webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Test entry file
	 *
	 * This is programatically created and updated, do not modify
	 *
	 * context: {"env":"production","urlBasePath":"","sourceMaps":false,"kbnVersion":"4.5.2-snapshot","buildNum":8467}
	 * includes code from:
	 *  - elasticsearch@1.0.0
	 *  - elasticsearch_status@0.0.0
	 *  - kbn_vislib_vis_types@1.0.0
	 *  - kibana@1.0.0
	 *  - markdown_vis@1.0.0
	 *  - metric_vis@1.0.0
	 *  - spyModes@1.0.0
	 *  - statusPage@1.0.0
	 *  - table_vis@1.0.0
	 *  - testsBundle@0.0.0
	 *
	 */

	'use strict';

	__webpack_require__(1);
	__webpack_require__(346);
	__webpack_require__(780);
	__webpack_require__(781);
	__webpack_require__(312);
	__webpack_require__(782);
	__webpack_require__(783);
	__webpack_require__(784);
	__webpack_require__(786);
	__webpack_require__(787);
	__webpack_require__(788);
	__webpack_require__(789);
	__webpack_require__(791);
	__webpack_require__(315);
	__webpack_require__(792);
	__webpack_require__(793);
	__webpack_require__(794);
	__webpack_require__(795);
	__webpack_require__(796);
	__webpack_require__(798);
	__webpack_require__(801);
	__webpack_require__(808);
	__webpack_require__(812);
	__webpack_require__(813);
	__webpack_require__(814);
	__webpack_require__(817);
	__webpack_require__(818);
	__webpack_require__(819);
	__webpack_require__(820);
	__webpack_require__(821);
	__webpack_require__(822);
	__webpack_require__(824);
	__webpack_require__(825);
	__webpack_require__(826);
	__webpack_require__(827);
	__webpack_require__(785);
	__webpack_require__(828);
	__webpack_require__(829);
	__webpack_require__(830);
	__webpack_require__(831);
	__webpack_require__(832);
	__webpack_require__(833);
	__webpack_require__(834);
	__webpack_require__(835);
	__webpack_require__(836);
	__webpack_require__(837);
	__webpack_require__(838);
	__webpack_require__(839);
	__webpack_require__(840);
	__webpack_require__(841);
	__webpack_require__(842);
	__webpack_require__(843);
	__webpack_require__(844);
	__webpack_require__(845);
	__webpack_require__(846);
	__webpack_require__(847);
	__webpack_require__(832);
	__webpack_require__(848);
	__webpack_require__(849);
	__webpack_require__(212);
	__webpack_require__(1);
	__webpack_require__(850);
	__webpack_require__(853);
	__webpack_require__(854);
	__webpack_require__(855);
	__webpack_require__(882);
	__webpack_require__(926);
	__webpack_require__(927);
	__webpack_require__(928);
	__webpack_require__(883);
	__webpack_require__(251);
	__webpack_require__(929);
	__webpack_require__(931);
	__webpack_require__(953);
	__webpack_require__(886);
	__webpack_require__(954);
	__webpack_require__(322);
	__webpack_require__(955);
	__webpack_require__(958);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(885);
	__webpack_require__(959);
	__webpack_require__(265);
	__webpack_require__(970);
	__webpack_require__(971);
	__webpack_require__(1012);
	__webpack_require__(216);
	__webpack_require__(1014);
	__webpack_require__(1019);
	__webpack_require__(1023);
	__webpack_require__(1028);
	__webpack_require__(1029);
	__webpack_require__(313);
	__webpack_require__(1).bootstrap();
	/* xoxo */

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var uiModules = __webpack_require__(215);
	var uiRoutes = __webpack_require__(217);
	var React = __webpack_require__(347);
	var ReactDOM = __webpack_require__(503);
	var HomePage = __webpack_require__(504);
	var chrome = __webpack_require__(1);

	window.BRANCH = chrome.getInjected('BRANCH', 'master');

	__webpack_require__(777);
	var overviewTemplate = __webpack_require__(778);
	var detailTemplate = __webpack_require__(779);

	//var logo = require('./icon.svg');
	document.title = 'elasticsearchStatus - Kibana';
	//require('ui/chrome')
	//  .setBrand({
	//    'logo': 'url(' + logo + ') left no-repeat #e8488b',
	//    'smallLogo': 'url(' + logo + ') left no-repeat #e8488b'
	//  });

	var app = uiModules.get('app/elasticsearch_status');

	uiRoutes.enable();

	uiRoutes.when('/', {
	  template: overviewTemplate,
	  controller: 'mycontroller'
	}).when('/index/:name', {
	  template: detailTemplate,
	  controller: 'elasticsearchDetailController',
	  controllerAs: 'ctrl'
	});

	app.controller('elasticsearchStatusController', function ($http) {
	  var _this = this;

	  $http.get('../api/elasticsearch_status/indices').then(function (response) {
	    _this.indices = response.data;
	  });
	}).controller('elasticsearchDetailController', function ($routeParams, $http) {
	  var _this2 = this;

	  this.index = $routeParams.name;

	  $http.get('../api/elasticsearch_status/index/' + this.index).then(function (response) {
	    _this2.status = response.data;
	  });
	});

	app.controller('mycontroller', ['$scope', function ($scope) {}]).directive("dejavuContent", function () {
	  return {
	    restrict: 'E',
	    scope: {
	      framework: '='
	    },
	    link: function link(scope, el, attrs) {
	      scope.$watch('framework', function (newValue, oldValue) {
	        $(el[0]).hide();
	        React.render(React.createElement(HomePage, {
	          framework: newValue
	        }), el[0]);
	      });
	    }
	  };
	});

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(348);


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(349);
	var ReactDOMServer = __webpack_require__(493);
	var ReactIsomorphic = __webpack_require__(497);

	var assign = __webpack_require__(384);
	var deprecated = __webpack_require__(502);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(350);
	var ReactDOMTextComponent = __webpack_require__(351);
	var ReactDefaultInjection = __webpack_require__(416);
	var ReactInstanceHandles = __webpack_require__(390);
	var ReactMount = __webpack_require__(373);
	var ReactPerf = __webpack_require__(363);
	var ReactReconciler = __webpack_require__(395);
	var ReactUpdates = __webpack_require__(399);
	var ReactVersion = __webpack_require__(491);

	var findDOMNode = __webpack_require__(436);
	var renderSubtreeIntoContainer = __webpack_require__(492);
	var warning = __webpack_require__(370);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(354);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 350 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(352);
	var DOMPropertyOperations = __webpack_require__(367);
	var ReactComponentBrowserEnvironment = __webpack_require__(371);
	var ReactMount = __webpack_require__(373);

	var assign = __webpack_require__(384);
	var escapeTextContentForBrowser = __webpack_require__(366);
	var setTextContent = __webpack_require__(365);
	var validateDOMNesting = __webpack_require__(415);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(353);
	var ReactMultiChildUpdateTypes = __webpack_require__(361);
	var ReactPerf = __webpack_require__(363);

	var setInnerHTML = __webpack_require__(364);
	var setTextContent = __webpack_require__(365);
	var invariant = __webpack_require__(358);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var createNodesFromMarkup = __webpack_require__(355);
	var emptyFunction = __webpack_require__(360);
	var getMarkupWrap = __webpack_require__(359);
	var invariant = __webpack_require__(358);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 354 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var createArrayFromMixed = __webpack_require__(356);
	var getMarkupWrap = __webpack_require__(359);
	var invariant = __webpack_require__(358);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(357);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var invariant = __webpack_require__(358);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 360 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(362);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);
	var escapeTextContentForBrowser = __webpack_require__(366);
	var setInnerHTML = __webpack_require__(364);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 366 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);
	var ReactPerf = __webpack_require__(363);

	var quoteAttributeValueForBrowser = __webpack_require__(369);
	var warning = __webpack_require__(370);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(366);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(360);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(372);
	var ReactMount = __webpack_require__(373);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(352);
	var DOMPropertyOperations = __webpack_require__(367);
	var ReactMount = __webpack_require__(373);
	var ReactPerf = __webpack_require__(363);

	var invariant = __webpack_require__(358);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);
	var ReactBrowserEventEmitter = __webpack_require__(374);
	var ReactCurrentOwner = __webpack_require__(350);
	var ReactDOMFeatureFlags = __webpack_require__(386);
	var ReactElement = __webpack_require__(387);
	var ReactEmptyComponentRegistry = __webpack_require__(389);
	var ReactInstanceHandles = __webpack_require__(390);
	var ReactInstanceMap = __webpack_require__(392);
	var ReactMarkupChecksum = __webpack_require__(393);
	var ReactPerf = __webpack_require__(363);
	var ReactReconciler = __webpack_require__(395);
	var ReactUpdateQueue = __webpack_require__(398);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var emptyObject = __webpack_require__(403);
	var containsNode = __webpack_require__(404);
	var instantiateReactComponent = __webpack_require__(407);
	var invariant = __webpack_require__(358);
	var setInnerHTML = __webpack_require__(364);
	var shouldUpdateReactComponent = __webpack_require__(412);
	var validateDOMNesting = __webpack_require__(415);
	var warning = __webpack_require__(370);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPluginHub = __webpack_require__(376);
	var EventPluginRegistry = __webpack_require__(377);
	var ReactEventEmitterMixin = __webpack_require__(382);
	var ReactPerf = __webpack_require__(363);
	var ViewportMetrics = __webpack_require__(383);

	var assign = __webpack_require__(384);
	var isEventSupported = __webpack_require__(385);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(362);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(377);
	var EventPluginUtils = __webpack_require__(378);
	var ReactErrorUtils = __webpack_require__(379);

	var accumulateInto = __webpack_require__(380);
	var forEachAccumulated = __webpack_require__(381);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var ReactErrorUtils = __webpack_require__(379);

	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 381 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(376);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 383 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 384 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 386 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(350);

	var assign = __webpack_require__(384);
	var canDefineProperty = __webpack_require__(388);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 389 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(391);

	var invariant = __webpack_require__(358);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 391 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 392 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(394);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 394 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(396);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(397);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(350);
	var ReactElement = __webpack_require__(387);
	var ReactInstanceMap = __webpack_require__(392);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(400);
	var PooledClass = __webpack_require__(401);
	var ReactPerf = __webpack_require__(363);
	var ReactReconciler = __webpack_require__(395);
	var Transaction = __webpack_require__(402);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(401);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(405);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(406);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 406 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(408);
	var ReactEmptyComponent = __webpack_require__(413);
	var ReactNativeComponent = __webpack_require__(414);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(409);
	var ReactCurrentOwner = __webpack_require__(350);
	var ReactElement = __webpack_require__(387);
	var ReactInstanceMap = __webpack_require__(392);
	var ReactPerf = __webpack_require__(363);
	var ReactPropTypeLocations = __webpack_require__(410);
	var ReactPropTypeLocationNames = __webpack_require__(411);
	var ReactReconciler = __webpack_require__(395);
	var ReactUpdateQueue = __webpack_require__(398);

	var assign = __webpack_require__(384);
	var emptyObject = __webpack_require__(403);
	var invariant = __webpack_require__(358);
	var shouldUpdateReactComponent = __webpack_require__(412);
	var warning = __webpack_require__(370);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(358);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(362);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 412 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(387);
	var ReactEmptyComponentRegistry = __webpack_require__(389);
	var ReactReconciler = __webpack_require__(395);

	var assign = __webpack_require__(384);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(384);
	var emptyFunction = __webpack_require__(360);
	var warning = __webpack_require__(370);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(417);
	var ChangeEventPlugin = __webpack_require__(425);
	var ClientReactRootIndex = __webpack_require__(428);
	var DefaultEventPluginOrder = __webpack_require__(429);
	var EnterLeaveEventPlugin = __webpack_require__(430);
	var ExecutionEnvironment = __webpack_require__(354);
	var HTMLDOMPropertyConfig = __webpack_require__(434);
	var ReactBrowserComponentMixin = __webpack_require__(435);
	var ReactComponentBrowserEnvironment = __webpack_require__(371);
	var ReactDefaultBatchingStrategy = __webpack_require__(437);
	var ReactDOMComponent = __webpack_require__(438);
	var ReactDOMTextComponent = __webpack_require__(351);
	var ReactEventListener = __webpack_require__(463);
	var ReactInjection = __webpack_require__(466);
	var ReactInstanceHandles = __webpack_require__(390);
	var ReactMount = __webpack_require__(373);
	var ReactReconcileTransaction = __webpack_require__(470);
	var SelectEventPlugin = __webpack_require__(475);
	var ServerReactRootIndex = __webpack_require__(476);
	var SimpleEventPlugin = __webpack_require__(477);
	var SVGDOMPropertyConfig = __webpack_require__(486);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(487);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPropagators = __webpack_require__(418);
	var ExecutionEnvironment = __webpack_require__(354);
	var FallbackCompositionState = __webpack_require__(419);
	var SyntheticCompositionEvent = __webpack_require__(421);
	var SyntheticInputEvent = __webpack_require__(423);

	var keyOf = __webpack_require__(424);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPluginHub = __webpack_require__(376);

	var warning = __webpack_require__(370);

	var accumulateInto = __webpack_require__(380);
	var forEachAccumulated = __webpack_require__(381);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(401);

	var assign = __webpack_require__(384);
	var getTextContentAccessor = __webpack_require__(420);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(422);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(401);

	var assign = __webpack_require__(384);
	var emptyFunction = __webpack_require__(360);
	var warning = __webpack_require__(370);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(422);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 424 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPluginHub = __webpack_require__(376);
	var EventPropagators = __webpack_require__(418);
	var ExecutionEnvironment = __webpack_require__(354);
	var ReactUpdates = __webpack_require__(399);
	var SyntheticEvent = __webpack_require__(422);

	var getEventTarget = __webpack_require__(426);
	var isEventSupported = __webpack_require__(385);
	var isTextInputElement = __webpack_require__(427);
	var keyOf = __webpack_require__(424);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 426 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 427 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 428 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(424);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPropagators = __webpack_require__(418);
	var SyntheticMouseEvent = __webpack_require__(431);

	var ReactMount = __webpack_require__(373);
	var keyOf = __webpack_require__(424);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(432);
	var ViewportMetrics = __webpack_require__(383);

	var getEventModifierState = __webpack_require__(433);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(422);

	var getEventTarget = __webpack_require__(426);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 433 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);
	var ExecutionEnvironment = __webpack_require__(354);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(392);

	var findDOMNode = __webpack_require__(436);
	var warning = __webpack_require__(370);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(350);
	var ReactInstanceMap = __webpack_require__(392);
	var ReactMount = __webpack_require__(373);

	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(399);
	var Transaction = __webpack_require__(402);

	var assign = __webpack_require__(384);
	var emptyFunction = __webpack_require__(360);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(439);
	var CSSPropertyOperations = __webpack_require__(441);
	var DOMProperty = __webpack_require__(368);
	var DOMPropertyOperations = __webpack_require__(367);
	var EventConstants = __webpack_require__(375);
	var ReactBrowserEventEmitter = __webpack_require__(374);
	var ReactComponentBrowserEnvironment = __webpack_require__(371);
	var ReactDOMButton = __webpack_require__(449);
	var ReactDOMInput = __webpack_require__(450);
	var ReactDOMOption = __webpack_require__(454);
	var ReactDOMSelect = __webpack_require__(457);
	var ReactDOMTextarea = __webpack_require__(458);
	var ReactMount = __webpack_require__(373);
	var ReactMultiChild = __webpack_require__(459);
	var ReactPerf = __webpack_require__(363);
	var ReactUpdateQueue = __webpack_require__(398);

	var assign = __webpack_require__(384);
	var canDefineProperty = __webpack_require__(388);
	var escapeTextContentForBrowser = __webpack_require__(366);
	var invariant = __webpack_require__(358);
	var isEventSupported = __webpack_require__(385);
	var keyOf = __webpack_require__(424);
	var setInnerHTML = __webpack_require__(364);
	var setTextContent = __webpack_require__(365);
	var shallowEqual = __webpack_require__(462);
	var validateDOMNesting = __webpack_require__(415);
	var warning = __webpack_require__(370);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(373);

	var findDOMNode = __webpack_require__(436);
	var focusNode = __webpack_require__(440);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 440 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(442);
	var ExecutionEnvironment = __webpack_require__(354);
	var ReactPerf = __webpack_require__(363);

	var camelizeStyleName = __webpack_require__(443);
	var dangerousStyleValue = __webpack_require__(445);
	var hyphenateStyleName = __webpack_require__(446);
	var memoizeStringOnly = __webpack_require__(448);
	var warning = __webpack_require__(370);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 442 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(444);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 444 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(442);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(447);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 447 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 448 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 449 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(372);
	var LinkedValueUtils = __webpack_require__(451);
	var ReactMount = __webpack_require__(373);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(452);
	var ReactPropTypeLocations = __webpack_require__(410);

	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(387);
	var ReactPropTypeLocationNames = __webpack_require__(411);

	var emptyFunction = __webpack_require__(360);
	var getIteratorFn = __webpack_require__(453);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 453 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(455);
	var ReactDOMSelect = __webpack_require__(457);

	var assign = __webpack_require__(384);
	var warning = __webpack_require__(370);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(401);
	var ReactElement = __webpack_require__(387);

	var emptyFunction = __webpack_require__(360);
	var traverseAllChildren = __webpack_require__(456);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(350);
	var ReactElement = __webpack_require__(387);
	var ReactInstanceHandles = __webpack_require__(390);

	var getIteratorFn = __webpack_require__(453);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(451);
	var ReactMount = __webpack_require__(373);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var warning = __webpack_require__(370);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(451);
	var ReactDOMIDOperations = __webpack_require__(372);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(409);
	var ReactMultiChildUpdateTypes = __webpack_require__(361);

	var ReactCurrentOwner = __webpack_require__(350);
	var ReactReconciler = __webpack_require__(395);
	var ReactChildReconciler = __webpack_require__(460);

	var flattenChildren = __webpack_require__(461);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(395);

	var instantiateReactComponent = __webpack_require__(407);
	var shouldUpdateReactComponent = __webpack_require__(412);
	var traverseAllChildren = __webpack_require__(456);
	var warning = __webpack_require__(370);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(456);
	var warning = __webpack_require__(370);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 462 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(464);
	var ExecutionEnvironment = __webpack_require__(354);
	var PooledClass = __webpack_require__(401);
	var ReactInstanceHandles = __webpack_require__(390);
	var ReactMount = __webpack_require__(373);
	var ReactUpdates = __webpack_require__(399);

	var assign = __webpack_require__(384);
	var getEventTarget = __webpack_require__(426);
	var getUnboundedScrollPosition = __webpack_require__(465);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(360);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 465 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);
	var EventPluginHub = __webpack_require__(376);
	var ReactComponentEnvironment = __webpack_require__(409);
	var ReactClass = __webpack_require__(467);
	var ReactEmptyComponent = __webpack_require__(413);
	var ReactBrowserEventEmitter = __webpack_require__(374);
	var ReactNativeComponent = __webpack_require__(414);
	var ReactPerf = __webpack_require__(363);
	var ReactRootIndex = __webpack_require__(391);
	var ReactUpdates = __webpack_require__(399);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(468);
	var ReactElement = __webpack_require__(387);
	var ReactPropTypeLocations = __webpack_require__(410);
	var ReactPropTypeLocationNames = __webpack_require__(411);
	var ReactNoopUpdateQueue = __webpack_require__(469);

	var assign = __webpack_require__(384);
	var emptyObject = __webpack_require__(403);
	var invariant = __webpack_require__(358);
	var keyMirror = __webpack_require__(362);
	var keyOf = __webpack_require__(424);
	var warning = __webpack_require__(370);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(469);

	var canDefineProperty = __webpack_require__(388);
	var emptyObject = __webpack_require__(403);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(370);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(400);
	var PooledClass = __webpack_require__(401);
	var ReactBrowserEventEmitter = __webpack_require__(374);
	var ReactDOMFeatureFlags = __webpack_require__(386);
	var ReactInputSelection = __webpack_require__(471);
	var Transaction = __webpack_require__(402);

	var assign = __webpack_require__(384);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(472);

	var containsNode = __webpack_require__(404);
	var focusNode = __webpack_require__(440);
	var getActiveElement = __webpack_require__(474);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var getNodeForCharacterOffset = __webpack_require__(473);
	var getTextContentAccessor = __webpack_require__(420);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 473 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 474 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventPropagators = __webpack_require__(418);
	var ExecutionEnvironment = __webpack_require__(354);
	var ReactInputSelection = __webpack_require__(471);
	var SyntheticEvent = __webpack_require__(422);

	var getActiveElement = __webpack_require__(474);
	var isTextInputElement = __webpack_require__(427);
	var keyOf = __webpack_require__(424);
	var shallowEqual = __webpack_require__(462);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 476 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(375);
	var EventListener = __webpack_require__(464);
	var EventPropagators = __webpack_require__(418);
	var ReactMount = __webpack_require__(373);
	var SyntheticClipboardEvent = __webpack_require__(478);
	var SyntheticEvent = __webpack_require__(422);
	var SyntheticFocusEvent = __webpack_require__(479);
	var SyntheticKeyboardEvent = __webpack_require__(480);
	var SyntheticMouseEvent = __webpack_require__(431);
	var SyntheticDragEvent = __webpack_require__(483);
	var SyntheticTouchEvent = __webpack_require__(484);
	var SyntheticUIEvent = __webpack_require__(432);
	var SyntheticWheelEvent = __webpack_require__(485);

	var emptyFunction = __webpack_require__(360);
	var getEventCharCode = __webpack_require__(481);
	var invariant = __webpack_require__(358);
	var keyOf = __webpack_require__(424);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(422);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(432);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(432);

	var getEventCharCode = __webpack_require__(481);
	var getEventKey = __webpack_require__(482);
	var getEventModifierState = __webpack_require__(433);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 481 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(481);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(431);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(432);

	var getEventModifierState = __webpack_require__(433);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(431);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(368);
	var ReactDefaultPerfAnalysis = __webpack_require__(488);
	var ReactMount = __webpack_require__(373);
	var ReactPerf = __webpack_require__(363);

	var performanceNow = __webpack_require__(489);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(384);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(490);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(354);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 491 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.8';

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(373);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(416);
	var ReactServerRendering = __webpack_require__(494);
	var ReactVersion = __webpack_require__(491);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(437);
	var ReactElement = __webpack_require__(387);
	var ReactInstanceHandles = __webpack_require__(390);
	var ReactMarkupChecksum = __webpack_require__(393);
	var ReactServerBatchingStrategy = __webpack_require__(495);
	var ReactServerRenderingTransaction = __webpack_require__(496);
	var ReactUpdates = __webpack_require__(399);

	var emptyObject = __webpack_require__(403);
	var instantiateReactComponent = __webpack_require__(407);
	var invariant = __webpack_require__(358);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 495 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(401);
	var CallbackQueue = __webpack_require__(400);
	var Transaction = __webpack_require__(402);

	var assign = __webpack_require__(384);
	var emptyFunction = __webpack_require__(360);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(455);
	var ReactComponent = __webpack_require__(468);
	var ReactClass = __webpack_require__(467);
	var ReactDOMFactories = __webpack_require__(498);
	var ReactElement = __webpack_require__(387);
	var ReactElementValidator = __webpack_require__(499);
	var ReactPropTypes = __webpack_require__(452);
	var ReactVersion = __webpack_require__(491);

	var assign = __webpack_require__(384);
	var onlyChild = __webpack_require__(501);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(387);
	var ReactElementValidator = __webpack_require__(499);

	var mapObject = __webpack_require__(500);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(387);
	var ReactPropTypeLocations = __webpack_require__(410);
	var ReactPropTypeLocationNames = __webpack_require__(411);
	var ReactCurrentOwner = __webpack_require__(350);

	var canDefineProperty = __webpack_require__(388);
	var getIteratorFn = __webpack_require__(453);
	var invariant = __webpack_require__(358);
	var warning = __webpack_require__(370);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 500 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(387);

	var invariant = __webpack_require__(358);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(384);
	var warning = __webpack_require__(370);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(349);


/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var TypeTable = __webpack_require__(505);
	var DataTable = __webpack_require__(761);
	var FeatureComponent = __webpack_require__(506);
	var ShareLink = __webpack_require__(771);
	var AppSelect = __webpack_require__(772);
	var PureRenderMixin = __webpack_require__(773);
	__webpack_require__(776);
	// This is the file which commands the data update/delete/append.
	// Any react component that wishes to modify the data state should
	// do so by flowing back the data and calling the `resetData` function
	//here. This is sort of like the Darth Vader - Dangerous and
	// Commands everything !
	//
	// ref: https://facebook.github.io/react/docs/two-way-binding-helpers.html
	var timeout = null;
	var init = false;
	var HomePage = React.createClass({
	  displayName: 'HomePage',

	  mixins: [PureRenderMixin],

	  // The underlying data structure that holds the documents/records
	  // is a hashmap with keys as `_id + _type`(refer to keys.js). Its
	  // because no two records can have the same _type _id pair, so its
	  // easy to check if a record already exists.

	  getInitialState: function getInitialState() {
	    return {
	      documents: [],
	      types: [],
	      signalColor: '',
	      signalActive: '',
	      signalText: '',
	      visibleColumns: [],
	      hiddenColumns: [],
	      indices: [],
	      sortInfo: {
	        active: false
	      },
	      app_match_flag: true,
	      show_index_info: false,
	      current_appname: '',
	      connect: false,
	      filterInfo: {
	        active: false,
	        applyFilter: this.applyFilter
	      },
	      infoObj: {
	        showing: 0,
	        total: 0,
	        getOnce: false,
	        availableTotal: 0,
	        searchTotal: 0,
	        userTouchAdd: this.userTouchAdd
	      },
	      totalRecord: 0,
	      pageLoading: false,
	      mappingObj: {},
	      actionOnRecord: {
	        active: false,
	        id: null,
	        type: null,
	        row: null,
	        selectToggle: false,
	        selectedRows: [],
	        selectRecord: this.selectRecord,
	        updateRecord: this.updateRecord,
	        deleteRecord: this.deleteRecord,
	        removeSelection: this.removeSelection,
	        selectToggleChange: this.selectToggleChange,
	        getUpdateObj: this.getUpdateObj
	      },
	      typeInfo: {
	        count: 0,
	        typeCounter: this.typeCounter
	      },
	      errorShow: false,
	      historicApps: [],
	      url: '',
	      appname: '',
	      splash: false,
	      hideUrl: false
	    };
	  },
	  //The record might have nested json objects. They can't be shown
	  //as is since it looks cumbersome in the table. What we do in the
	  //case of a nested json object is, we replace it with a font-icon
	  //(in injectLink) which upon clicking shows a Modal with the json
	  //object it contains.

	  flatten: function flatten(data, callback) {
	    var response = help.flatten(data);
	    return callback(response.data, response.fields);
	  },
	  injectLink: function injectLink(data, fields) {
	    return data;
	  },
	  deleteRow: function deleteRow(index) {
	    delete sdata[index];
	  },

	  //We cannot render a hashmap of documents on the table,
	  //hence we convert that to a list of documents every time
	  //there is a delete/update/change. This can be more optimised
	  //later but it is not that expensive right now, read writes to
	  //DOM are much more expensive.

	  resetData: function resetData(total) {
	    var sortedArray = [];
	    var sdata_values = [];

	    for (each in sdata) {
	      sdata_values.push(sdata[each]);
	    }
	    //if sort is already applied
	    if (this.state.sortInfo.active) {
	      sortedArray = help.sortIt(sdata_values, this.state.sortInfo.column, this.state.sortInfo.reverse);
	    }
	    //by default sort it by typename by passing json field
	    else {
	        sortedArray = help.sortIt(sdata_values, 'json', false);
	      }
	    var infoObj = this.state.infoObj;
	    infoObj.showing = sortedArray.length;
	    if (typeof total != 'undefined') {
	      infoObj.searchTotal = total;
	    }
	    var data = sortedArray;
	    var hiddenColumns = this.state.hiddenColumns;
	    var visibleColumns = [];
	    var availableColumns = [];
	    for (var each in sdata) {
	      for (var column in sdata[each]) {
	        //if (window.fixed && window.fixed.indexOf(column) <= -1 && column != '_id' && column != '_type') {
	        if (visibleColumns.indexOf(column) <= -1 && hiddenColumns.indexOf(column) == -1) {
	          visibleColumns.push(column);
	        }
	        if (availableColumns.indexOf(column) <= -1) availableColumns.push(column);
	      }
	      //}
	    }

	    if (availableColumns.length) {
	      hiddenColumns.forEach(function (col, key) {
	        if (availableColumns.indexOf(col) <= -1) hiddenColumns.splice(key, 1);
	      });
	    }

	    //set the combined state
	    this.setState({
	      documents: sortedArray,
	      infoObj: infoObj,
	      visibleColumns: visibleColumns,
	      hiddenColumns: hiddenColumns,
	      pageLoading: false
	    });

	    //set url
	    input_state.visibleColumns = visibleColumns;
	    input_state.hiddenColumns = hiddenColumns;
	    createUrl(input_state);
	  },

	  // Logic to stream continuous data.
	  // We call the ``getData()`` function in feed.js
	  // which returns a single json document(record).
	  updateDataOnView: function updateDataOnView(update, total) {
	    if (!Array.isArray(update)) {
	      update = this.flatten(update, this.injectLink);
	      var key = rowKeyGen(update);

	      //If the record already exists in sdata, it should
	      //either be a delete request or a change to an
	      //existing record.
	      if (sdata[key]) {
	        // If the update has a ``_deleted`` field, apply
	        // a 'delete transition' and then delete
	        // the record from sdata.
	        if (update['_deleted']) {
	          for (var each in sdata[key]) {
	            var _key = keyGen(sdata[key], each);
	            deleteTransition(_key);
	          }
	          deleteTransition(key);
	          this.deleteRow(key);
	          setTimeout((function (callback) {
	            callback();
	          }).bind(null, this.resetData), 1100);
	        }

	        // If it isn't a delete, we should find a record
	        // with the same _type and _id and apply an ``update
	        // transition`` and then update the record in sdata.
	        //Since sdata is modeled as a hashmap, this is
	        //trivial.
	        else {
	            sdata[key] = update;
	            this.resetData();
	            for (var each in update) {
	              updateTransition(keyGen(update, each));
	            }
	            var key = rowKeyGen(update);
	            updateTransition(key);
	          }
	      }
	      //If its a new record, we add it to sdata and then
	      //apply the `new transition`.
	      else {
	          sdata[key] = update;
	          this.resetData();
	          for (var each in update) {
	            var _key = keyGen(update, each);
	            newTransition(_key);
	          }
	          var _key = rowKeyGen(update);
	          newTransition(_key);
	        }
	      this.setSampleData(update);
	    } else {
	      // when update is an array
	      for (var each = 0; each < update.length; each++) {
	        update[each] = this.flatten(update[each], this.injectLink);
	        var key = rowKeyGen(update[each]);
	        if (!sdata[key]) {
	          sdata[key] = update[each];
	        }
	      }
	      this.resetData(total);
	      this.setSampleData(update[0]);
	    }

	    //Set sort from url
	    if (decryptedData.sortInfo) {
	      this.handleSort(decryptedData.sortInfo.column, null, null, decryptedData.sortInfo.reverse);
	    }
	  },
	  countTotalRecord: function countTotalRecord(total, fromStream, method) {
	    var totalRecord = this.state.totalRecord;
	    if (fromStream) {
	      if (method == 'index') totalRecord += 1;else if (method == 'delete') totalRecord -= 1;
	    } else totalRecord = total;
	    return totalRecord;
	  },
	  streamCallback: function streamCallback(total, fromStream, method) {
	    var totalRecord = this.countTotalRecord(total, fromStream, method);
	    this.setState({
	      totalRecord: totalRecord
	    });
	  },
	  onEmptySelection: function onEmptySelection() {
	    OperationFlag = false;
	    var infoObj = this.state.infoObj;
	    infoObj.showing = 0;
	    var totalRecord = 0;
	    sdata = {};
	    this.setState({
	      infoObj: infoObj,
	      totalRecord: totalRecord,
	      documents: sdata
	    });
	  },
	  getStreamingData: function getStreamingData(types) {
	    if (!OperationFlag) {
	      OperationFlag = true;

	      //If filter is applied apply filter data
	      if (this.state.filterInfo.active) {
	        var filterInfo = this.state.filterInfo;
	        this.applyFilter(types, filterInfo.columnName, filterInfo.method, filterInfo.value, filterInfo.analyzed);
	      }
	      //Get the data without filter
	      else {
	          if (types.length) {
	            feed.getData(types, (function (update, fromStream, total) {
	              if (subsetESTypes.length) this.updateDataOnView(update, total);else this.updateDataOnView([], 0);
	              OperationFlag = false;
	            }).bind(this), (function (total, fromStream, method) {
	              this.streamCallback(total, fromStream, method);
	            }).bind(this));
	          } else {
	            this.onEmptySelection();
	          }
	        }
	    } else {
	      setTimeout((function () {
	        this.getStreamingData(types);
	      }).bind(this), 300);
	    }
	  },
	  // infinite scroll implementation
	  paginateData: function paginateData() {
	    var filterInfo = this.state.filterInfo;
	    var queryBody = null;
	    if (filterInfo.active) queryBody = feed.createFilterQuery(filterInfo.method, filterInfo.columnName, filterInfo.value, filterInfo.type, filterInfo.analyzed);
	    feed.paginateData(this.state.infoObj.total, (function (update) {
	      this.updateDataOnView(update);
	    }).bind(this), queryBody);
	  },
	  // only called on change in types.
	  getStreamingTypes: function getStreamingTypes() {
	    $.ajax({
	      type: 'GET',
	      url: "/api/elasticsearch_status/" + APPNAME + "/types"
	    }).done((function (update) {
	      if (update instanceof Array) {
	        update = update.sort(function (a, b) {
	          return a.toLowerCase().localeCompare(b.toLowerCase());
	        });
	        this.setState({
	          types: update,
	          connect: true
	        });
	        OperationFlag = false;
	      }
	    }).bind(this));
	  },
	  removeType: function removeType(typeName) {
	    feed.deleteData(typeName, (function (data) {
	      this.resetData();
	    }).bind(this));
	  },
	  componentWillMount: function componentWillMount() {
	    console.log("in componentWillMount");
	    this.apply_other();
	  },
	  componentDidMount: function componentDidMount() {
	    // add a safe delay as app details are fetched from this
	    // iframe's parent function.
	    console.log("in componentDidMount");
	    //if (!this.state.splash) {
	    this.afterConnect();
	    //  input_state = JSON.parse(JSON.stringify(config));
	    //  createUrl(input_state);
	    //}
	    //this.setApps();
	    if (timeout) {
	      clearTimeout(timeout);
	    }
	    $("#dejavu-controller").show();
	    $("#dejavu-controller").children().show();
	    this.getStreamingTypes();
	  },
	  apply_other: function apply_other() {
	    if (typeof BRANCH != 'undefined') {
	      if (BRANCH === 'master') {
	        this.setIndices();
	      }
	    }
	  },
	  // BRANCH: MASTER
	  setIndices: function setIndices() {
	    //var es_host = document.URL.split('/_plugin/')[0];
	    var getIndices = feed.getIndices();
	    if (getIndices) {
	      getIndices.then((function (data) {
	        var historicApps = this.getApps();
	        var indices = [];
	        for (var indice in data) {
	          if (historicApps && historicApps.length) {
	            historicApps.forEach(function (old_app, index) {
	              if (old_app.appname === data[indice]) {
	                historicApps.splice(index, 1);
	              }
	            });
	          }
	          var obj = {
	            appname: data[indice]
	          };
	          indices.push(data[indice]);
	          historicApps.push(obj);
	        }
	        this.setState({
	          historicApps: historicApps,
	          indices: indices
	        });
	        window.localStorage.setItem('historicApps', JSON.stringify(historicApps));
	      }).bind(this));
	    }
	  },
	  appnameCb: function appnameCb(appname) {
	    var app_match = this.state.indices.filter(function (indice) {
	      return indice === appname;
	    });
	    var app_match_flag = app_match.length ? true : false;
	    var show_index_info = this.state.url === this.state.es_host ? true : false;
	    this.setState({
	      app_match_flag: app_match_flag,
	      current_appname: appname,
	      show_index_info: show_index_info
	    });
	  },
	  afterConnect: function afterConnect() {
	    if (appAuth) {
	      //Set filter from url
	      if (decryptedData.filterInfo) {
	        decryptedData.filterInfo.applyFilter = this.applyFilter;
	        this.setState({
	          filterInfo: decryptedData.filterInfo
	        });
	      }

	      //Set hidden columns from url
	      if (decryptedData.hiddenColumns) {
	        this.setState({
	          hiddenColumns: decryptedData.hiddenColumns
	        });
	      }

	      //Set visible columns from url
	      if (decryptedData.visibleColumns) {
	        this.setState({
	          visibleColumns: decryptedData.visibleColumns
	        });
	      }

	      setTimeout(this.setMap, 2000);
	      setTimeout(this.getStreamingTypes, 2000);
	      // call every 1 min.
	      window.mappingInterval = setInterval(this.setMap, 60 * 1000);
	      window.streamingInterval = setInterval(this.getStreamingTypes, 60 * 1000);
	      this.getTotalRecord();

	      this.setState({
	        url: config.url
	      });
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    var hiddenColumns = this.state.hiddenColumns;
	    this.hideAttribute(hiddenColumns, 'hide');
	  },
	  removeHidden: function removeHidden() {
	    var hiddenColumns = this.state.hiddenColumns;
	    this.hideAttribute(hiddenColumns, 'show');
	    var visibleColumns = this.state.visibleColumns.concat(hiddenColumns);

	    this.setState({
	      hiddenColumns: [],
	      visibleColumns: visibleColumns
	    });

	    //set url
	    input_state.visibleColumns = visibleColumns;
	    input_state.hiddenColumns = [];
	    createUrl(input_state);
	  },
	  hideAttribute: function hideAttribute(Columns, method) {
	    if (method == 'hide') {
	      Columns.forEach(function (col) {
	        if (document.getElementById(col) == null || document.getElementById(col) == 'null') {} else {
	          document.getElementById(col).style.display = "none";
	          for (var each in sdata) {
	            var key = keyGen(sdata[each], col);
	            document.getElementById(key).style.display = "none";
	          }
	        }
	      });
	    } else if (method == 'show') {
	      Columns.forEach(function (col) {
	        if (document.getElementById(col) == null || document.getElementById(col) == 'null') {} else {
	          document.getElementById(col).style.display = "";
	          for (var each in sdata) {
	            var key = keyGen(sdata[each], col);
	            document.getElementById(key).style.display = "";
	          }
	        }
	      });
	    }
	  },
	  getTotalRecord: function getTotalRecord() {
	    var $this = this;
	    if (!this.state.infoObj.getOnce) {
	      if (typeof APPNAME == 'undefined' || APPNAME == null) {
	        setTimeout(this.getTotalRecord, 1000);
	      } else {
	        feed.getTotalRecord().then(function (data) {
	          var infoObj = $this.state.infoObj;
	          infoObj.getOnce = true;
	          infoObj.availableTotal = data;
	          $this.setState({
	            infoObj: infoObj
	          });
	        });
	      }
	    }
	  },
	  watchStock: function watchStock(typeName) {
	    //Remove sorting while slecting new type
	    this.setState({
	      sortInfo: {
	        active: false
	      }
	    });

	    //Remove sortInfo from store
	    if (input_state.hasOwnProperty('sortInfo')) {
	      delete input_state.sortInfo;
	      createUrl(input_state);
	    }
	    window.stop();
	    subsetESTypes.push(typeName);
	    this.applyGetStream();
	    input_state.selectedType = subsetESTypes;
	    createUrl(input_state);
	  },
	  unwatchStock: function unwatchStock(typeName) {
	    //Remove sorting while unslecting type
	    this.setState({
	      sortInfo: {
	        active: false
	      }
	    });

	    //Remove sortInfo from store
	    if (input_state.hasOwnProperty('sortInfo')) {
	      delete input_state.sortInfo;
	      createUrl(input_state);
	    }
	    subsetESTypes.splice(subsetESTypes.indexOf(typeName), 1);
	    this.removeType(typeName);
	    input_state.selectedType = subsetESTypes;
	    createUrl(input_state);
	    this.watchSelectedRecord();
	    this.applyGetStream();
	  },
	  typeCounter: function typeCounter() {
	    var typeInfo = this.state.typeInfo;
	    typeInfo.count++;
	    this.setState({
	      typeInfo: typeInfo
	    });
	    this.applyGetStream();
	  },
	  applyGetStream: function applyGetStream() {
	    var typeInfo = this.state.typeInfo;
	    if (typeInfo.count >= this.state.types.length) {
	      this.getStreamingData(subsetESTypes);
	    }
	  },
	  setMap: function setMap() {
	    var $this = this;
	    if (APPNAME && !$('.modal-backdrop').hasClass('in')) {
	      var getMappingObj = feed.getMapping();
	      getMappingObj.done(function (data) {
	        var mappingObjData = data;
	        if (!getMapFlag) {
	          $this.setApps(true);
	          getMapFlag = true;
	        }
	        $this.setState({
	          mappingObj: mappingObjData[APPNAME]['mappings']
	        });
	      }).error(function (xhr) {
	        if (xhr.status == 401) {
	          $this.setState({
	            errorShow: true
	          });
	          appAuth = false;
	          clearInterval(mappingInterval);
	          clearInterval(streamingInterval);
	        }
	      });
	    }
	  },
	  handleScroll: function handleScroll(event) {
	    var scroller = document.getElementById('table-scroller');
	    var infoObj = this.state.infoObj;

	    // Plug in a handler which takes care of infinite scrolling
	    if (subsetESTypes.length && infoObj.showing < infoObj.searchTotal && scroller.scrollTop + scroller.offsetHeight >= scroller.scrollHeight - 100 && !this.state.pageLoading) {
	      this.setState({
	        pageLoading: true
	      });
	      this.paginateData();
	    }
	  },
	  handleSort: function handleSort(item, type, eve, order) {
	    if (!order) {
	      order = help.getOrder(item);
	    }
	    var storObj = {
	      active: true,
	      column: item,
	      reverse: order
	    };
	    this.setState({
	      sortInfo: storObj
	    });

	    //Store state of sort
	    if (decryptedData.sortInfo) delete decryptedData.sortInfo;
	    var sort_state = JSON.parse(JSON.stringify(storObj));
	    input_state.sortInfo = sort_state;
	    createUrl(input_state);

	    var docs = this.state.documents;
	    var sortedArray = help.sortIt(docs, item, order);
	    this.setState({
	      documents: sortedArray
	    });
	  },
	  addRecord: function addRecord(editorref) {
	    var form = $('#addObjectForm').serializeArray();
	    var obj = {
	      name: 'body',
	      value: editorref.getValue().trim()
	    };
	    form.push(obj);
	    this.indexCall(form, 'close-modal', 'index');
	  },
	  indexCall: function indexCall(form, modalId, method) {
	    var recordObject = {};
	    $.each(form, function (k2, v2) {
	      if (v2.value != '') recordObject[v2.name] = v2.value;
	    });
	    recordObject.body = JSON.parse(recordObject.body);
	    feed.indexData(recordObject, method, (function (newTypes) {
	      $('.close').click();
	      if (typeof newTypes != 'undefined') {
	        this.setState({
	          types: newTypes
	        });
	        setTimeout((function () {
	          this.setMap();
	        }).bind(this), 500);
	      }
	    }).bind(this));
	  },
	  getTypeDoc: function getTypeDoc(editorref) {
	    var selectedType = $('#setType').val();
	    var typeDocSample = this.state.typeDocSample;
	    var $this = this;
	    if (selectedType != '' && selectedType != null && typeDocSample) {
	      if (typeDocSample.hasOwnProperty(selectedType)) {

	        feed.getSingleDoc(selectedType, function (data) {
	          try {
	            typeDocSample[selectedType] = data.hits.hits[0]._source;
	            $this.setState({
	              typeDocSample: typeDocSample
	            });
	            $this.showSample(typeDocSample[selectedType], editorref);
	          } catch (err) {
	            console.log(err);
	          }
	        });
	      } else this.showSample(typeDocSample[selectedType], editorref);
	    }
	  },
	  userTouchFlag: false,
	  //If user didn't touch to textarea only then show the json
	  showSample: function showSample(obj, editorref) {
	    if (this.userTouchFlag && editorref.getValue().trim() != '') {} else {
	      var convertJson = obj.hasOwnProperty('json') ? obj.json : obj;
	      var objJson = JSON.stringify(convertJson, null, 2);
	      editorref.setValue(objJson);
	    }
	  },
	  setSampleData: function setSampleData(update) {
	    if (typeof update != 'undefined') {
	      var typeDocSample = this.state.typeDocSample ? this.state.typeDocSample : {};
	      typeDocSample[update['_type']] = $.extend({}, update);
	      delete typeDocSample[update['_type']]._id;
	      delete typeDocSample[update['_type']]._type;
	      this.setState({
	        typeDocSample: typeDocSample
	      });
	    }
	  },

	  applyFilter: function applyFilter(typeName, columnName, method, value, analyzed) {
	    var filterVal = $.isArray(value) ? value : value.split(',');
	    var $this = this;
	    var filterObj = this.state.filterInfo;
	    filterObj['type'] = typeName;
	    filterObj['columnName'] = columnName;
	    filterObj['method'] = method;
	    filterObj['value'] = filterVal;
	    filterObj['active'] = true;
	    filterObj['analyzed'] = analyzed;
	    this.setState({
	      filterInfo: filterObj
	    });

	    //Store state of filter
	    var filter_state = JSON.parse(JSON.stringify(filterObj));
	    delete filter_state.applyFilter;
	    input_state.filterInfo = filter_state;
	    createUrl(input_state);

	    if (typeName != '' && typeName != null) {
	      feed.filterQuery(method, columnName, filterVal, subsetESTypes, analyzed, (function (update, fromStream, total) {
	        if (!fromStream) {
	          sdata = [];
	          $this.resetData(total);
	        }
	        setTimeout(function () {
	          if (update != null) $this.updateDataOnView(update);
	        }, 500);
	      }).bind(this), (function (total, fromStream, method) {
	        this.streamCallback(total, fromStream, method);
	      }).bind(this));
	    } else {
	      this.onEmptySelection();
	    }
	    this.removeSelection();
	  },
	  removeFilter: function removeFilter() {
	    var $this = this;
	    var obj = {
	      active: false,
	      applyFilter: this.applyFilter
	    };
	    this.setState({
	      filterInfo: obj
	    });

	    //Remove filterinfo from store
	    if (input_state.hasOwnProperty('filterInfo')) {
	      delete input_state.filterInfo;
	      createUrl(input_state);
	    }

	    sdata = [];
	    $this.resetData();
	    setTimeout(function () {
	      $this.getStreamingData(subsetESTypes);
	    }, 500);
	    this.removeSelection();
	  },
	  removeSort: function removeSort() {
	    var docs = this.state.documents;
	    var sortedArray = help.sortIt(docs, '_type', false);
	    this.setState({
	      documents: sortedArray
	    });
	    this.setState({
	      sortInfo: {
	        active: false
	      }
	    });

	    //Remove sortInfo from store
	    if (input_state.hasOwnProperty('sortInfo')) {
	      delete input_state.sortInfo;
	      createUrl(input_state);
	    }
	  },
	  columnToggle: function columnToggle() {
	    var $this = this;
	    var obj = {
	      toggleIt: function toggleIt(elementId, checked) {
	        if (!checked) {
	          //visible columns - update
	          var visibleColumns = $this.state.visibleColumns.filter(function (v) {
	            if (v != elementId) return v;
	          });

	          //hidden columns - update
	          hiddenColumns = $this.state.hiddenColumns;
	          var flag = hiddenColumns.indexOf(elementId);
	          if (flag == -1) {
	            hiddenColumns.push(elementId);
	          }
	        } else {
	          //visible columns - update
	          visibleColumns = $this.state.visibleColumns;
	          var flag = visibleColumns.indexOf(elementId);
	          if (flag == -1) {
	            visibleColumns.push(elementId);
	          }

	          //hidden columns - update
	          var hiddenColumns = $this.state.hiddenColumns.filter(function (v) {
	            if (v != elementId) return v;
	          });
	        }

	        $this.setState({
	          visibleColumns: visibleColumns,
	          hiddenColumns: hiddenColumns
	        });

	        //set url
	        input_state.visibleColumns = visibleColumns;
	        input_state.hiddenColumns = hiddenColumns;
	        createUrl(input_state);
	      },
	      setVisibleColumn: function setVisibleColumn() {}
	    };
	    return obj;
	  },
	  selectRecord: function selectRecord(id, type, row, currentCheck) {
	    var selection = help.selectRecord(this.state.actionOnRecord, id, type, row, currentCheck, this.state.documents);
	    this.setState({
	      actionOnRecord: selection.actionOnRecord
	    });
	    this.forceUpdate();
	  },
	  removeSelection: function removeSelection() {
	    var selection = help.removeSelection(this.state.actionOnRecord, this.state.documents);
	    selection.actionOnRecord.selectToggle = false;
	    this.setState({
	      actionOnRecord: selection.actionOnRecord
	    });
	    this.forceUpdate();
	    $('[name="selectRecord"]').removeAttr('checked');
	  },
	  watchSelectedRecord: function watchSelectedRecord() {
	    var actionOnRecord = this.state.actionOnRecord;
	    actionOnRecord.selectedRows = _.filter(this.state.actionOnRecord.selectedRows, function (row) {
	      var flag = subsetESTypes.indexOf(row._type) === -1 ? false : true;
	      return flag;
	    });
	    if (!actionOnRecord.selectedRows.length) {
	      this.removeSelection();
	    } else {
	      this.setState({
	        actionOnRecord: actionOnRecord
	      });
	      this.forceUpdate();
	    }
	  },
	  selectToggleChange: function selectToggleChange(checkbox) {
	    var actionOnRecord = help.selectAll(checkbox, this.state.actionOnRecord, this.state.documents);
	    actionOnRecord.selectToggle = checkbox;
	    this.setState({
	      actionOnRecord: actionOnRecord
	    });
	    this.forceUpdate();
	  },
	  getUpdateObj: function getUpdateObj() {
	    var actionOnRecord = this.state.actionOnRecord;
	    var current_selected_row = actionOnRecord.selectedRows[0];
	    var current_row = _.filter(this.state.documents, function (ele) {
	      return ele._type == current_selected_row._type && ele._id == current_selected_row._id;
	    });
	    actionOnRecord.row = JSON.stringify(current_row[0].json, null, 4);
	    this.setState({
	      actionOnRecord: actionOnRecord
	    });
	  },
	  updateRecord: function updateRecord(json) {
	    var form = $('#updateObjectForm').serializeArray();
	    var obj = {
	      name: 'body',
	      value: json
	    };
	    form.push(obj);
	    var recordObject = {};
	    this.indexCall(form, 'close-update-modal', 'update');
	  },
	  deleteRecord: function deleteRecord() {
	    $('.loadingBtn').addClass('loading');
	    feed.deleteRecord(this.state.actionOnRecord.selectedRows, (function (update) {
	      $('.loadingBtn').removeClass('loading');
	      $('#close-delete-modal').click();
	      $('.close').click();
	      var infoObj = this.state.infoObj;
	      infoObj.total -= this.state.actionOnRecord.selectedRows.length;

	      this.setState({
	        infoObj: infoObj
	      });

	      this.removeSelection();
	      this.resetData();
	    }).bind(this));
	  },
	  connectPlayPause: function connectPlayPause() {
	    var reloadFlag = true;
	    var formInfo = $('#init-ES').serializeArray();
	    formInfo.forEach(function (v) {
	      if (v.value.trim() === '') {
	        reloadFlag = false;
	      } else {
	        APPNAME = v.value.trim();
	      }
	    });
	    if (!reloadFlag) {
	      alert('Url or appname should not be empty.');
	    } else {
	      var connectToggle = this.state.connect ? false : true;
	      //window.location.href = "#?input_state=''";
	      if (connectToggle) {
	        this.getStreamingTypes();
	      } else {
	        subsetESTypes = [];
	        this.setState({
	          connect: connectToggle,
	          documents: [],
	          types: [],
	          infoObj: {
	            showing: 0,
	            total: 0,
	            getOnce: false,
	            availableTotal: 0,
	            searchTotal: 0,
	            userTouchAdd: this.userTouchAdd
	          }
	        });
	      }
	    }
	  },

	  reloadData: function reloadData() {
	    this.getStreamingData(subsetESTypes);
	  },

	  userTouchAdd: function userTouchAdd(flag) {
	    this.userTouchFlag = flag;
	  },

	  closeErrorModal: function closeErrorModal() {
	    this.setState({
	      errorShow: false
	    });
	  },

	  exportJsonData: function exportJsonData() {
	    $('.json-spinner').show();

	    var activeQuery = {
	      "query": {
	        "match_all": {}
	      },
	      "size": 1000
	    };
	    if (this.state.filterInfo.active) {
	      var filterInfo = this.state.filterInfo;
	      activeQuery = feed.createFilterQuery(filterInfo.method, filterInfo.columnName, filterInfo.value, filterInfo.type, filterInfo.analyzed);
	    }
	    this.scrollApi({ "activeQuery": activeQuery });
	  },

	  scrollApi: function scrollApi(info) {
	    feed.scrollapi(subsetESTypes, info.activeQuery, info.scroll, info.scroll_id).done((function (data) {
	      var hits = data.hits.hits;
	      exportJsonData = exportJsonData.concat(hits);
	      if (hits.length > 999) {
	        var scrollObj = {
	          'scroll': '1m',
	          'scroll_id': data._scroll_id
	        };
	        this.scrollApi({ "activeQuery": scrollObj, "scroll": true, "scroll_id": data._scroll_id });
	      } else {
	        var str = JSON.stringify(exportJsonData, null, 4);
	        var dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(str);
	        var link = document.getElementById('jsonlink').href = dataUri;
	        $('.json-spinner').hide();
	        $('#jsonlink').removeClass('hide');
	        exportJsonData = [];
	      }
	    }).bind(this));
	  },

	  getApps: function getApps() {
	    var apps = window.localStorage.getItem('historicApps');
	    if (apps) {
	      try {
	        apps = JSON.parse(apps);
	      } catch (e) {
	        apps = [];
	      }
	    } else {
	      apps = [];
	    }
	    return apps;
	  },

	  setApps: function setApps(authFlag) {
	    var app = {
	      url: config.url,
	      appname: config.appname
	    };
	    var historicApps = this.getApps();
	    if (authFlag) {
	      if (historicApps && historicApps.length) {
	        historicApps.forEach(function (old_app, index) {
	          if (old_app.appname === app.appname) {
	            historicApps.splice(index, 1);
	          }
	        });
	      }
	      if (app.url) {
	        historicApps.push(app);
	      }
	    }
	    this.setState({
	      historicApps: historicApps
	    });
	    window.localStorage.setItem('historicApps', JSON.stringify(historicApps));
	  },

	  setConfig: function setConfig(url) {
	    this.setState({ url: url });
	    this.setState({
	      connect: false
	    });
	  },

	  valChange: function valChange(event) {
	    this.setState({ url: event.target.value });
	    this.appnameCb(this.state.current_appname);
	  },

	  hideUrlChange: function hideUrlChange() {
	    var hideUrl = this.state.hideUrl ? false : true;
	    this.setState({
	      hideUrl: hideUrl
	    });
	  },

	  //The homepage is built on two children components(which may
	  //have other children components). TypeTable renders the
	  //streaming types and DataTable renders the streaming documents.
	  //main.js ties them together.

	  render: function render() {
	    var EsForm = !this.state.splash ? 'col-xs-12 init-ES' : 'col-xs-12 EsBigForm';
	    var esText = !this.state.splash ? this.state.connect ? 'Disconnect' : 'Connect' : 'Start Browsing';
	    var esBtn = this.state.connect ? 'btn-primary ' : '';
	    esBtn += 'btn btn-default submit-btn';
	    var shareBtn = this.state.connect ? 'share-btn' : 'hide';
	    var url = this.state.url;
	    var opts = {};
	    var playClass = 'ib fa fa-play';
	    var pauseClass = 'hide fa fa-pause';
	    if (this.state.connect) {
	      opts['readOnly'] = 'readOnly';
	      playClass = 'hide fa fa-play';
	      pauseClass = 'ib fa fa-pause';
	    }
	    var hideEye = { 'display': this.state.splash ? 'none' : 'block' };
	    var hideUrl = this.state.hideUrl ? 'hide-url expand' : 'hide-url collapse';
	    var hideUrlText = this.state.hideUrl ? React.createElement('span', { className: 'fa fa-eye-slash' }, null) : React.createElement('span', { className: 'fa fa-eye' }, null);
	    var index_create_text = React.createElement('div', { className: 'index-create-info col-xs-12' });
	    if (BRANCH === 'master' && this.state.show_index_info && this.state.current_appname.length && !this.state.app_match_flag) {
	      index_create_text = React.createElement(
	        'p',
	        { className: 'danger-text' },
	        ' A new index \'',
	        this.state.current_appname,
	        '\' will be created.'
	      );
	    }
	    return React.createElement(
	      'div',
	      null,
	      React.createElement('div', { id: 'modal' }),
	      React.createElement(
	        'div',
	        { className: 'row dejavuContainer' },
	        React.createElement(
	          'form',
	          { className: EsForm, id: 'init-ES' },
	          React.createElement(
	            'div',
	            { className: 'vertical0' },
	            React.createElement(
	              'div',
	              { className: 'vertical1' },
	              React.createElement(
	                'div',
	                { className: 'esContainer' },
	                React.createElement(
	                  'div',
	                  { className: 'img-container' },
	                  React.createElement('img', { src: 'assets/img/icon.png' })
	                ),
	                React.createElement(
	                  'div',
	                  null,
	                  index_create_text
	                ),
	                React.createElement(
	                  ShareLink,
	                  { btn: shareBtn },
	                  ' '
	                ),
	                React.createElement(
	                  'div',
	                  { className: 'splashIn' },
	                  React.createElement(
	                    'div',
	                    { className: 'form-group m-0 col-xs-4 pd-0 pr-5' },
	                    React.createElement(AppSelect, { connect: this.state.connect,
	                      splash: this.state.splash,
	                      setConfig: this.setConfig,
	                      apps: this.state.historicApps,
	                      appnameCb: this.appnameCb })
	                  )
	                ),
	                React.createElement(
	                  'div',
	                  { className: 'submit-btn-container' },
	                  React.createElement(
	                    'a',
	                    { className: esBtn, onClick: this.connectPlayPause },
	                    React.createElement('i', { className: playClass }),
	                    React.createElement('i', { className: pauseClass }),
	                    esText
	                  )
	                )
	              )
	            )
	          )
	        ),
	        React.createElement(
	          'div',
	          { className: 'typeContainer' },
	          React.createElement(TypeTable, {
	            Types: this.state.types,
	            watchTypeHandler: this.watchStock,
	            unwatchTypeHandler: this.unwatchStock,
	            ExportData: this.exportData,
	            signalColor: this.state.signalColor,
	            signalActive: this.state.signalActive,
	            signalText: this.state.signalText,
	            typeInfo: this.state.typeInfo })
	        ),
	        React.createElement(
	          'div',
	          { className: 'col-xs-12 dataContainer' },
	          React.createElement(DataTable, {
	            _data: this.state.documents,
	            sortInfo: this.state.sortInfo,
	            filterInfo: this.state.filterInfo,
	            infoObj: this.state.infoObj,
	            totalRecord: this.state.totalRecord,
	            scrollFunction: this.handleScroll,
	            selectedTypes: subsetESTypes,
	            handleSort: this.handleSort,
	            mappingObj: this.state.mappingObj,
	            removeFilter: this.removeFilter,
	            addRecord: this.addRecord,
	            getTypeDoc: this.getTypeDoc,
	            Types: this.state.types,
	            removeSort: this.removeSort,
	            removeHidden: this.removeHidden,
	            visibleColumns: this.state.visibleColumns,
	            hiddenColumns: this.state.hiddenColumns,
	            columnToggle: this.columnToggle,
	            actionOnRecord: this.state.actionOnRecord,
	            pageLoading: this.state.pageLoading,
	            reloadData: this.reloadData })
	        ),
	        React.createElement(FeatureComponent.ErrorModal, {
	          errorShow: this.state.errorShow,
	          closeErrorModal: this.closeErrorModal })
	      )
	    );
	  }
	});

	module.exports = HomePage;

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var FeatureComponent = __webpack_require__(506);

	// Each row in the types table on the left side.
	var TypeRow = React.createClass({
	  displayName: 'TypeRow',

	  getInitialState: function getInitialState() {
	    // we store the state(checked/unchecked) for every type
	    // so that when we reload, the state restores.

	    return {
	      isChecked: false
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    var types = window.localStorage.getItem('types');
	    var checked = false;
	    try {
	      types = JSON.parse(types);
	      if (types.indexOf(this.props.type) !== -1) {
	        checked = true;
	        this.props.watchTypeHandler(this.props.type);
	      }
	    } catch (e) {}
	    this.setState({
	      isChecked: checked
	    });
	    this.props.typeInfo.typeCounter();
	  },
	  unwatch: function unwatch() {
	    var checked = false;
	    if (this.state.isChecked) {
	      this.props.unwatchTypeHandler(this.props.type);
	    } else {
	      checked = true;
	      this.props.watchTypeHandler(this.props.type);
	    }
	    // every time its checked we update the local storage.
	    var types = [];
	    var typesJson = window.localStorage.getItem('types');
	    try {
	      types = JSON.parse(typesJson);
	    } catch (e) {
	      types = [];
	    }
	    types = types == null ? [] : types;
	    if (checked) {
	      types.push(this.props.type);
	    } else {
	      types.forEach((function (val, index) {
	        if (val == this.props.type) {
	          types.splice(index, 1);
	        }
	      }).bind(this));
	    }
	    window.localStorage.setItem('types', JSON.stringify(types));
	    this.setState({
	      isChecked: checked
	    });
	  },
	  render: function render() {
	    return React.createElement(
	      'li',
	      null,
	      React.createElement(
	        'div',
	        { className: 'theme-element checkbox' },
	        React.createElement('input', {
	          id: this.props.type,
	          type: 'checkbox',
	          key: this.props.type,
	          checked: this.state.isChecked,
	          onChange: this.unwatch,
	          readOnly: false }),
	        React.createElement(
	          'label',
	          { htmlFor: this.props.type },
	          this.props.type
	        )
	      )
	    );
	  }
	});

	// This is for the table holding the types on the
	// left tab.
	var TypeTable = React.createClass({
	  displayName: 'TypeTable',

	  render: function render() {
	    var types = this.props.Types;
	    var rowObj = [];
	    //appname = APPNAME;
	    for (var type in types) {
	      rowObj.push(React.createElement(TypeRow, {
	        key: type,
	        type: types[type],
	        unwatchTypeHandler: this.props.unwatchTypeHandler,
	        watchTypeHandler: this.props.watchTypeHandler,
	        typeInfo: this.props.typeInfo }));
	    }
	    if (types.length < 1) {
	      return React.createElement(
	        'div',
	        { className: 'left-tab' },
	        React.createElement(
	          'div',
	          { className: 'highlight-tip left-tip' },
	          React.createElement(
	            'strong',
	            null,
	            'No data to view!'
	          ),
	          ' Insert data by following this tutorial ',
	          React.createElement(
	            'a',
	            { href: 'http://docs.appbase.io/scalr/rest/intro.html', target: '_blank' },
	            'here'
	          ),
	          '.'
	        )
	      );
	    }
	    return React.createElement(
	      'div',
	      { className: 'left-tab' },
	      React.createElement(
	        'div',
	        { className: 'row typesList' },
	        React.createElement(
	          'h4',
	          { className: 'types-header pull-left col-xs-12' },
	          React.createElement(
	            'span',
	            { className: 'pull-left' },
	            'Types'
	          )
	        ),
	        React.createElement(
	          'ul',
	          { className: 'fa-ul types-list clearfix' },
	          rowObj
	        )
	      )
	    );
	  }
	});

	module.exports = TypeTable;

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var AddDocument = __webpack_require__(507);
	var ImportData = __webpack_require__(752);
	var ExportData = __webpack_require__(753);
	var Pretty = __webpack_require__(754);
	var SignalCircle = __webpack_require__(755);
	var RemoveFilterButton = __webpack_require__(756);
	var UpdateDocument = __webpack_require__(757);
	var DeleteDocument = __webpack_require__(758);
	var ErrorModal = __webpack_require__(759);
	var ExportasJson = __webpack_require__(760);

	var FeatureComponent = {
	    AddDocument: AddDocument,
	    ImportData: ImportData,
	    ExportData: ExportData,
	    Pretty: Pretty,
	    SignalCircle: SignalCircle,
	    RemoveFilterButton: RemoveFilterButton,
	    UpdateDocument: UpdateDocument,
	    DeleteDocument: DeleteDocument,
	    ErrorModal: ErrorModal,
	    ExportasJson: ExportasJson
	};

	module.exports = FeatureComponent;

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	var AddDocument = React.createClass({
	    displayName: 'AddDocument',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false,
	            validate: {
	                touch: false,
	                type: false,
	                body: false

	            }
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        //apply select2 for auto complete
	        if (!this.state.validate.type && typeof this.props.types != 'undefined' && typeof this.props.selectClass != 'undefined') this.applySelect();
	    },
	    applySelect: function applySelect(ele) {
	        var $this = this;
	        var $eventSelect = $("." + this.props.selectClass);
	        var typeList = this.getType();
	        $eventSelect.select2({
	            tags: true,
	            maximumSelectionLength: 1,
	            data: typeList
	        });
	        $eventSelect.on("change", function (e) {
	            var validateClass = $this.state.validate;
	            validateClass.type = true;
	            $this.setState({
	                validate: validateClass
	            });
	            $this.props.getTypeDoc($this.editorref);
	        });
	    },
	    close: function close() {
	        this.setState({
	            showModal: false,
	            validate: {
	                touch: false,
	                type: false,
	                body: false
	            },
	            selectClass: ''
	        });
	    },
	    open: function open() {
	        this.userTouch(false);
	        this.setState({
	            showModal: true
	        });
	        setTimeout((function () {
	            var options = {
	                lineNumbers: true,
	                mode: "javascript",
	                autoCloseBrackets: true,
	                matchBrackets: true,
	                showCursorWhenSelecting: true,
	                tabSize: 2,
	                extraKeys: {
	                    "Ctrl-Q": function CtrlQ(cm) {
	                        cm.foldCode(cm.getCursor());
	                    }
	                },
	                foldGutter: true,
	                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
	            };
	            this.editorref = CodeMirror.fromTextArea(document.getElementById('setBody'), options);
	        }).bind(this), 300);
	    },
	    getType: function getType() {
	        var typeList = this.props.types.map(function (type) {
	            return {
	                id: type,
	                text: type
	            };
	        });
	        return typeList;
	    },
	    validateInput: function validateInput() {
	        var validateClass = this.state.validate;
	        validateClass.touch = true;
	        validateClass.type = document.getElementById('setType').value == '' ? false : true;
	        validateClass.body = this.IsJsonString(this.editorref.getValue());
	        this.setState({
	            validate: validateClass
	        });
	        if (validateClass.type && validateClass.body) this.props.addRecord(this.editorref);
	    },
	    IsJsonString: function IsJsonString(str) {
	        try {
	            JSON.parse(str);
	        } catch (e) {
	            return false;
	        }
	        return true;
	    },
	    userTouch: function userTouch(flag) {
	        this.props.userTouchAdd(flag);
	    },
	    render: function render() {
	        var typeList = '';
	        var btnText = this.props.text ? this.props.text : '';
	        if (typeof this.props.types != 'undefined') {
	            typeList = this.props.types.map(function (type) {
	                return React.createElement(
	                    'option',
	                    { value: type },
	                    type
	                );
	            });
	        }
	        if (this.state.validate.touch) {
	            var validateClass = {};
	            validateClass.body = this.state.validate.body ? 'form-group' : 'form-group has-error';
	            validateClass.type = this.state.validate.type ? 'form-group' : 'form-group has-error';
	        } else {
	            var validateClass = {
	                type: 'form-group',
	                body: 'form-group'
	            };
	        }
	        var btnLinkClassSub = this.props.link == "true" ? 'add-record-link fa fa-plus' : 'add-record-btn btn btn-primary fa fa-plus';
	        var selectClass = this.props.selectClass + ' tags-select form-control';

	        return React.createElement(
	            'div',
	            { className: 'add-record-container pd-r10' },
	            React.createElement(
	                'a',
	                { href: 'javascript:void(0);', className: btnLinkClassSub, title: 'Add', onClick: this.open },
	                btnText
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Add Data'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'form',
	                        { className: 'form-horizontal', id: 'addObjectForm' },
	                        React.createElement(
	                            'div',
	                            { className: validateClass.type },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputEmail3', className: 'col-sm-3 control-label' },
	                                'Type ',
	                                React.createElement(
	                                    'span',
	                                    { className: 'small-span' },
	                                    '(aka table)'
	                                )
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('select', { id: 'setType', className: selectClass, multiple: 'multiple', name: 'type' }),
	                                React.createElement(
	                                    'span',
	                                    { className: 'help-block' },
	                                    'Type in which the data will be stored.'
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'form-group' },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputPassword3', className: 'col-sm-3 control-label' },
	                                'Document Id'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('input', { type: 'text', className: 'form-control', id: 'setId', placeholder: 'set Id', name: 'id' })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: validateClass.body },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputPassword3', className: 'col-sm-3 control-label' },
	                                'JSON'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('textarea', { id: 'setBody', className: 'form-control', rows: '10', name: 'body',
	                                    onClick: this.userTouch.bind(null, true),
	                                    onFocus: this.userTouch.bind(null, true) }),
	                                React.createElement(
	                                    'span',
	                                    { className: 'help-block' },
	                                    'A data document is stored as a JSON object.'
	                                )
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'success', onClick: this.validateInput },
	                        'Add'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = AddDocument;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	
	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var _domHelpersUtilScrollbarSize = __webpack_require__(538);

	var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

	var _domHelpersUtilInDOM = __webpack_require__(539);

	var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

	var _domHelpersOwnerDocument = __webpack_require__(540);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	var _domHelpersEvents = __webpack_require__(541);

	var _domHelpersEvents2 = _interopRequireDefault(_domHelpersEvents);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Fade = __webpack_require__(549);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _ModalDialog = __webpack_require__(561);

	var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

	var _ModalBody = __webpack_require__(562);

	var _ModalBody2 = _interopRequireDefault(_ModalBody);

	var _ModalHeader = __webpack_require__(563);

	var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

	var _ModalTitle = __webpack_require__(565);

	var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

	var _ModalFooter = __webpack_require__(566);

	var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

	var _reactOverlaysLibModal = __webpack_require__(567);

	var _reactOverlaysLibModal2 = _interopRequireDefault(_reactOverlaysLibModal);

	var _reactOverlaysLibUtilsIsOverflowing = __webpack_require__(587);

	var _reactOverlaysLibUtilsIsOverflowing2 = _interopRequireDefault(_reactOverlaysLibUtilsIsOverflowing);

	var _lodashCompatObjectPick = __webpack_require__(593);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var Modal = _react2['default'].createClass({
	  displayName: 'Modal',

	  propTypes: _extends({}, _reactOverlaysLibModal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

	    /**
	     * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
	     */
	    backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

	    /**
	     * Close the modal when escape key is pressed
	     */
	    keyboard: _react2['default'].PropTypes.bool,

	    /**
	     * Open and close the Modal with a slide and fade animation.
	     */
	    animation: _react2['default'].PropTypes.bool,

	    /**
	     * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
	     * styles and markup to create a custom modal component.
	     */
	    dialogComponent: _reactPropTypesLibElementType2['default'],

	    /**
	     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
	     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
	     */
	    autoFocus: _react2['default'].PropTypes.bool,

	    /**
	     * When `true` The modal will prevent focus from leaving the Modal while open.
	     * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
	     * such as screen readers.
	     */
	    enforceFocus: _react2['default'].PropTypes.bool,

	    /**
	     * Hide this from automatic props documentation generation.
	     * @private
	     */
	    bsStyle: _react2['default'].PropTypes.string,

	    /**
	     * When `true` The modal will show itself.
	     */
	    show: _react2['default'].PropTypes.bool,

	    /**
	     * A callback fired when the header closeButton or non-static backdrop is
	     * clicked. Required if either are specified.
	     */
	    onHide: _react2['default'].PropTypes.func
	  }),

	  childContextTypes: {
	    '$bs_onModalHide': _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return _extends({}, _reactOverlaysLibModal2['default'].defaultProps, {
	      bsClass: 'modal',
	      animation: true,
	      dialogComponent: _ModalDialog2['default']
	    });
	  },

	  getInitialState: function getInitialState() {
	    return {
	      modalStyles: {}
	    };
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_onModalHide: this.props.onHide
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var className = _props.className;
	    var children = _props.children;
	    var dialogClassName = _props.dialogClassName;
	    var animation = _props.animation;

	    var props = _objectWithoutProperties(_props, ['className', 'children', 'dialogClassName', 'animation']);

	    var modalStyles = this.state.modalStyles;

	    var inClass = { 'in': props.show && !animation };
	    var Dialog = props.dialogComponent;

	    var parentProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_reactOverlaysLibModal2['default'].propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']) // the rest are fired in _onHide() and _onShow()
	    );

	    var modal = _react2['default'].createElement(
	      Dialog,
	      _extends({
	        key: 'modal',
	        ref: function (ref) {
	          return _this._modal = ref;
	        }
	      }, props, {
	        style: modalStyles,
	        className: _classnames2['default'](className, inClass),
	        dialogClassName: dialogClassName,
	        onClick: props.backdrop === true ? this.handleDialogClick : null
	      }),
	      this.props.children
	    );

	    return _react2['default'].createElement(
	      _reactOverlaysLibModal2['default'],
	      _extends({}, parentProps, {
	        show: props.show,
	        ref: function (ref) {
	          _this._wrapper = ref && ref.refs.modal;
	          _this._backdrop = ref && ref.refs.backdrop;
	        },
	        onEntering: this._onShow,
	        onExited: this._onHide,
	        backdropClassName: _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(props, 'backdrop'), inClass),
	        containerClassName: _utilsBootstrapUtils2['default'].prefix(props, 'open'),
	        transition: animation ? _Fade2['default'] : undefined,
	        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
	        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
	      }),
	      modal
	    );
	  },

	  _onShow: function _onShow() {
	    _domHelpersEvents2['default'].on(window, 'resize', this.handleWindowResize);

	    this.setState(this._getStyles());

	    if (this.props.onEntering) {
	      var _props2;

	      (_props2 = this.props).onEntering.apply(_props2, arguments);
	    }
	  },

	  _onHide: function _onHide() {
	    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);

	    if (this.props.onExited) {
	      var _props3;

	      (_props3 = this.props).onExited.apply(_props3, arguments);
	    }
	  },

	  handleDialogClick: function handleDialogClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    this.props.onHide();
	  },

	  handleWindowResize: function handleWindowResize() {
	    this.setState(this._getStyles());
	  },

	  _getStyles: function _getStyles() {
	    if (!_domHelpersUtilInDOM2['default']) {
	      return {};
	    }

	    var node = _reactDom2['default'].findDOMNode(this._modal);
	    var doc = _domHelpersOwnerDocument2['default'](node);

	    var scrollHt = node.scrollHeight;
	    var bodyIsOverflowing = _reactOverlaysLibUtilsIsOverflowing2['default'](_reactDom2['default'].findDOMNode(this.props.container || doc.body));
	    var modalIsOverflowing = scrollHt > doc.documentElement.clientHeight;

	    return {
	      modalStyles: {
	        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
	        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
	      }
	    };
	  }
	});

	Modal.Body = _ModalBody2['default'];
	Modal.Header = _ModalHeader2['default'];
	Modal.Title = _ModalTitle2['default'];
	Modal.Footer = _ModalFooter2['default'];

	Modal.Dialog = _ModalDialog2['default'];

	Modal.TRANSITION_DURATION = 300;
	Modal.BACKDROP_TRANSITION_DURATION = 150;

	exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', Modal));
	module.exports = exports['default'];

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$assign = __webpack_require__(510)["default"];

	exports["default"] = _Object$assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(511), __esModule: true };

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(512);
	module.exports = __webpack_require__(515).Object.assign;

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(513);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(518)});

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(514)
	  , core      = __webpack_require__(515)
	  , ctx       = __webpack_require__(516)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 514 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 515 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(517);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 517 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(519)
	  , toObject = __webpack_require__(520)
	  , IObject  = __webpack_require__(522);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(524)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ },
/* 519 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(521);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 521 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(523);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 523 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 524 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 525 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(527), __esModule: true };

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(528);
	module.exports = __webpack_require__(515).Object.keys;

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(520);

	__webpack_require__(529)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(513)
	  , core    = __webpack_require__(515)
	  , fails   = __webpack_require__(524);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 530 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _styleMaps = __webpack_require__(533);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _invariant = __webpack_require__(536);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	function curry(fn) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var last = args[args.length - 1];
	    if (typeof last === 'function') {
	      return fn.apply(undefined, args);
	    }
	    return function (Component) {
	      return fn.apply(undefined, args.concat([Component]));
	    };
	  };
	}

	function prefix(props, variant) {
	  if (props === undefined) props = {};

	  !(props.bsClass || '').trim() ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'A `bsClass` prop is required for this component') : _invariant2['default'](false) : undefined;
	  return props.bsClass + (variant ? '-' + variant : '');
	}

	var bsClass = curry(function (defaultClass, Component) {
	  var propTypes = Component.propTypes || (Component.propTypes = {});
	  var defaultProps = Component.defaultProps || (Component.defaultProps = {});

	  propTypes.bsClass = _react.PropTypes.string;
	  defaultProps.bsClass = defaultClass;

	  return Component;
	});

	exports.bsClass = bsClass;
	var bsStyles = curry(function (styles, defaultStyle, Component) {
	  if (typeof defaultStyle !== 'string') {
	    Component = defaultStyle;
	    defaultStyle = undefined;
	  }

	  var existing = Component.STYLES || [];
	  var propTypes = Component.propTypes || {};

	  styles.forEach(function (style) {
	    if (existing.indexOf(style) === -1) {
	      existing.push(style);
	    }
	  });

	  var propType = _react.PropTypes.oneOf(existing);

	  // expose the values on the propType function for documentation
	  Component.STYLES = propType._values = existing;

	  Component.propTypes = _extends({}, propTypes, {
	    bsStyle: propType
	  });

	  if (defaultStyle !== undefined) {
	    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
	    defaultProps.bsStyle = defaultStyle;
	  }

	  return Component;
	});

	exports.bsStyles = bsStyles;
	var bsSizes = curry(function (sizes, defaultSize, Component) {
	  if (typeof defaultSize !== 'string') {
	    Component = defaultSize;
	    defaultSize = undefined;
	  }

	  var existing = Component.SIZES || [];
	  var propTypes = Component.propTypes || {};

	  sizes.forEach(function (size) {
	    if (existing.indexOf(size) === -1) {
	      existing.push(size);
	    }
	  });

	  var values = existing.reduce(function (result, size) {
	    if (_styleMaps2['default'].SIZES[size] && _styleMaps2['default'].SIZES[size] !== size) {
	      result.push(_styleMaps2['default'].SIZES[size]);
	    }
	    return result.concat(size);
	  }, []);

	  var propType = _react.PropTypes.oneOf(values);

	  propType._values = values;

	  // expose the values on the propType function for documentation
	  Component.SIZES = existing;

	  Component.propTypes = _extends({}, propTypes, {
	    bsSize: propType
	  });

	  if (defaultSize !== undefined) {
	    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
	    defaultProps.bsSize = defaultSize;
	  }

	  return Component;
	});

	exports.bsSizes = bsSizes;
	exports['default'] = {

	  prefix: prefix,

	  getClassSet: function getClassSet(props) {
	    var classes = {};
	    var bsClassName = prefix(props);

	    if (bsClassName) {
	      var bsSize = undefined;

	      classes[bsClassName] = true;

	      if (props.bsSize) {
	        bsSize = _styleMaps2['default'].SIZES[props.bsSize] || bsSize;
	      }

	      if (bsSize) {
	        classes[prefix(props, bsSize)] = true;
	      }

	      if (props.bsStyle) {
	        if (props.bsStyle.indexOf(prefix(props)) === 0) {
	          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, // small migration convenience, since the old method required manual prefixing
	          'bsStyle will automatically prefix custom values with the bsClass, so there is no ' + 'need to append it manually. (bsStyle: ' + props.bsStyle + ', bsClass: ' + prefix(props) + ')') : undefined;
	          classes[props.bsStyle] = true;
	        } else {
	          classes[prefix(props, props.bsStyle)] = true;
	        }
	      }
	    }

	    return classes;
	  },

	  /**
	   * Add a style variant to a Component. Mutates the propTypes of the component
	   * in order to validate the new variant.
	   */
	  addStyle: function addStyle(Component, styleVariant) {
	    bsStyles(styleVariant, Component);
	  }
	};
	var _curry = curry;
	exports._curry = _curry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$assign = __webpack_require__(510)['default'];

	var _Object$create = __webpack_require__(534)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	exports.__esModule = true;

	var constant = function constant(obj) {
	  return _Object$assign(_Object$create({
	    values: function values() {
	      var _this = this;

	      return _Object$keys(this).map(function (k) {
	        return _this[k];
	      });
	    }
	  }), obj);
	};

	var styleMaps = {

	  SIZES: {
	    'large': 'lg',
	    'medium': 'md',
	    'small': 'sm',
	    'xsmall': 'xs',
	    'lg': 'lg',
	    'md': 'md',
	    'sm': 'sm',
	    'xs': 'xs'
	  },
	  GRID_COLUMNS: 12
	};

	var Sizes = constant({
	  LARGE: 'large',
	  MEDIUM: 'medium',
	  SMALL: 'small',
	  XSMALL: 'xsmall'
	});

	exports.Sizes = Sizes;
	var State = constant({
	  SUCCESS: 'success',
	  WARNING: 'warning',
	  DANGER: 'danger',
	  INFO: 'info'
	});

	exports.State = State;
	var DEFAULT = 'default';
	exports.DEFAULT = DEFAULT;
	var PRIMARY = 'primary';
	exports.PRIMARY = PRIMARY;
	var LINK = 'link';
	exports.LINK = LINK;
	var INVERSE = 'inverse';

	exports.INVERSE = INVERSE;
	exports['default'] = styleMaps;

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(535), __esModule: true };

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(519);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var NODE_ENV = process.env.NODE_ENV;

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = process.env.NODE_ENV !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var canUseDOM = __webpack_require__(539);

	var size;

	module.exports = function (recalc) {
	  if (!size || recalc) {
	    if (canUseDOM) {
	      var scrollDiv = document.createElement('div');

	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';

	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	};

/***/ },
/* 539 */
/***/ function(module, exports) {

	'use strict';
	module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 540 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = ownerDocument;

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	module.exports = exports["default"];

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var on = __webpack_require__(542),
	    off = __webpack_require__(543),
	    filter = __webpack_require__(544);

	module.exports = { on: on, off: off, filter: filter };

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(539);
	var on = function on() {};

	if (canUseDOM) {
	  on = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = on;

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(539);
	var off = function off() {};

	if (canUseDOM) {

	  off = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = off;

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var contains = __webpack_require__(545),
	    qsa = __webpack_require__(546);

	module.exports = function (selector, handler) {
	  return function (e) {
	    var top = e.currentTarget,
	        target = e.target,
	        matches = qsa(top, selector);

	    if (matches.some(function (match) {
	      return contains(match, target);
	    })) handler.call(this, e);
	  };
	};

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(539);

	var contains = (function () {
	  var root = canUseDOM && document.documentElement;

	  return root && root.contains ? function (context, node) {
	    return context.contains(node);
	  } : root && root.compareDocumentPosition ? function (context, node) {
	    return context === node || !!(context.compareDocumentPosition(node) & 16);
	  } : function (context, node) {
	    if (node) do {
	      if (node === context) return true;
	    } while (node = node.parentNode);

	    return false;
	  };
	})();

	module.exports = contains;

/***/ },
/* 546 */
/***/ function(module, exports) {

	'use strict';
	//     Zepto.js
	//     (c) 2010-2015 Thomas Fuchs
	//     Zepto.js may be freely distributed under the MIT license.
	var simpleSelectorRE = /^[\w-]*$/,
	    toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);

	module.exports = function qsa(element, selector) {
	  var maybeID = selector[0] === '#',
	      maybeClass = selector[0] === '.',
	      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
	      isSimple = simpleSelectorRE.test(nameOnly),
	      found;

	  if (isSimple) {
	    if (maybeID) {
	      element = element.getElementById ? element : document;
	      return (found = element.getElementById(nameOnly)) ? [found] : [];
	    }

	    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));

	    return toArray(element.getElementsByTagName(selector));
	  }

	  return toArray(element.querySelectorAll(selector));
	};

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(548);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 548 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactOverlaysLibTransition = __webpack_require__(558);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _reactPropTypesLibDeprecated = __webpack_require__(560);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var Fade = (function (_React$Component) {
	  _inherits(Fade, _React$Component);

	  function Fade() {
	    _classCallCheck(this, Fade);

	    _React$Component.apply(this, arguments);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Fade.prototype.render = function render() {
	    var timeout = this.props.timeout || this.props.duration;

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({}, this.props, {
	        timeout: timeout,
	        className: _classnames2['default'](this.props.className, 'fade'),
	        enteredClassName: 'in',
	        enteringClassName: 'in'
	      }),
	      this.props.children
	    );
	  };

	  return Fade;
	})(_react2['default'].Component);

	Fade.propTypes = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	Fade.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};

	exports['default'] = Fade;
	module.exports = exports['default'];

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(534)["default"];

	var _Object$setPrototypeOf = __webpack_require__(551)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(552), __esModule: true };

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(553);
	module.exports = __webpack_require__(515).Object.setPrototypeOf;

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(513);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(554).set});

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(519).getDesc
	  , isObject = __webpack_require__(555)
	  , anObject = __webpack_require__(556);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(516)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 555 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(555);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 557 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domHelpersTransitionProperties = __webpack_require__(559);

	var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

	var _domHelpersEventsOn = __webpack_require__(542);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

	var UNMOUNTED = 0;
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 1;
	exports.EXITED = EXITED;
	var ENTERING = 2;
	exports.ENTERING = ENTERING;
	var ENTERED = 3;
	exports.ENTERED = ENTERED;
	var EXITING = 4;

	exports.EXITING = EXITING;
	/**
	 * The Transition component lets you define and run css transitions with a simple declarative api.
	 * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
	 * but is specifically optimized for transitioning a single child "in" or "out".
	 *
	 * You don't even need to use class based css transitions if you don't want to (but it is easiest).
	 * The extensive set of lifecyle callbacks means you have control over
	 * the transitioning now at each step of the way.
	 */

	var Transition = (function (_React$Component) {
	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    _React$Component.call(this, props, context);

	    var initialStatus = undefined;
	    if (props['in']) {
	      // Start enter transition in componentDidMount.
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    this.state = { status: initialStatus };

	    this.nextCallback = null;
	  }

	  _inherits(Transition, _React$Component);

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props['in']) {
	      this.performEnter(this.props);
	    }
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var status = this.state.status;
	    if (nextProps['in']) {
	      if (status === EXITING) {
	        this.performEnter(nextProps);
	      } else if (this.props.unmountOnExit) {
	        if (status === UNMOUNTED) {
	          // Start enter transition in componentDidUpdate.
	          this.setState({ status: EXITED });
	        }
	      } else if (status === EXITED) {
	        this.performEnter(nextProps);
	      }

	      // Otherwise we're already entering or entered.
	    } else {
	      if (status === ENTERING || status === ENTERED) {
	        this.performExit(nextProps);
	      }

	      // Otherwise we're already exited or exiting.
	    }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.unmountOnExit && this.state.status === EXITED) {
	      // EXITED is always a transitional state to either ENTERING or UNMOUNTED
	      // when using unmountOnExit.
	      if (this.props['in']) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }
	    }
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this = this;

	    this.cancelNextCallback();
	    var node = _reactDom2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onEnter(node);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this.props.onEntering(node);

	      _this.onTransitionEnd(node, function () {
	        _this.safeSetState({ status: ENTERED }, function () {
	          _this.props.onEntered(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(props) {
	    var _this2 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this2.props.onExiting(node);

	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: EXITED }, function () {
	          _this2.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    this.setState(nextState, this.setNextCallback(callback));
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this3 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this3.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var childProps = _objectWithoutProperties(_props, ['children', 'className']);

	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });

	    var transitionClassName = undefined;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }

	    var child = _react2['default'].Children.only(children);
	    return _react2['default'].cloneElement(child, _extends({}, childProps, {
	      className: _classnames2['default'](child.props.className, className, transitionClassName)
	    }));
	  };

	  return Transition;
	})(_react2['default'].Component);

	Transition.propTypes = {
	  /**
	   * Show the component; triggers the enter or exit animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is not shown
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the enter animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
	   * transition indefinately if the browser transitionEnd events are
	   * canceled or interrupted.
	   *
	   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
	   * setting this to the duration of your animation (or a bit above it).
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * CSS class or classes applied when the component is exited
	   */
	  exitedClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is exiting
	   */
	  exitingClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied when the component is entered
	   */
	  enteredClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is entering
	   */
	  enteringClassName: _react2['default'].PropTypes.string,

	  /**
	   * Callback fired before the "entering" classes are applied
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "entering" classes are applied
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "enter" classes are applied
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the "exiting" classes are applied
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exiting" classes are applied
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exited" classes are applied
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	// Name the function so it is clearer in the documentation
	function noop() {}

	Transition.displayName = 'Transition';

	Transition.defaultProps = {
	  'in': false,
	  unmountOnExit: false,
	  transitionAppear: false,

	  timeout: 5000,

	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,

	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	exports['default'] = Transition;

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(539);

	var has = Object.prototype.hasOwnProperty,
	    transform = 'transform',
	    transition = {},
	    transitionTiming,
	    transitionDuration,
	    transitionProperty,
	    transitionDelay;

	if (canUseDOM) {
	  transition = getTransitionProperties();

	  transform = transition.prefix + transform;

	  transitionProperty = transition.prefix + 'transition-property';
	  transitionDuration = transition.prefix + 'transition-duration';
	  transitionDelay = transition.prefix + 'transition-delay';
	  transitionTiming = transition.prefix + 'transition-timing-function';
	}

	module.exports = {
	  transform: transform,
	  end: transition.end,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};

	function getTransitionProperties() {
	  var endEvent,
	      prefix = '',
	      transitions = {
	    O: 'otransitionend',
	    Moz: 'transitionend',
	    Webkit: 'webkitTransitionEnd',
	    ms: 'MSTransitionEnd'
	  };

	  var element = document.createElement('div');

	  for (var vendor in transitions) if (has.call(transitions, vendor)) {
	    if (element.style[vendor + 'TransitionProperty'] !== undefined) {
	      prefix = '-' + vendor.toLowerCase() + '-';
	      endEvent = transitions[vendor];
	      break;
	    }
	  }

	  if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

	  return { end: endEvent, prefix: prefix };
	}

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = deprecated;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	var warned = {};

	function deprecated(propType, explanation) {
	  return function validate(props, propName, componentName) {
	    if (props[propName] != null) {
	      var message = '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation;
	      if (!warned[message]) {
	        _warning2['default'](false, message);
	        warned[message] = true;
	      }
	    }

	    return propType(props, propName, componentName);
	  };
	}

	function _resetWarned() {
	  warned = {};
	}

	deprecated._resetWarned = _resetWarned;
	module.exports = exports['default'];

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var ModalDialog = _react2['default'].createClass({
	  displayName: 'ModalDialog',

	  propTypes: {
	    /**
	     * A css class to apply to the Modal dialog DOM node.
	     */
	    dialogClassName: _react2['default'].PropTypes.string
	  },

	  render: function render() {
	    var modalStyle = _extends({
	      display: 'block'
	    }, this.props.style);
	    var prefix = _utilsBootstrapUtils2['default'].prefix(this.props);
	    var dialogClasses = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    delete dialogClasses[prefix];
	    dialogClasses[_utilsBootstrapUtils2['default'].prefix(this.props, 'dialog')] = true;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: null,
	        tabIndex: '-1',
	        role: 'dialog',
	        style: modalStyle,
	        className: _classnames2['default'](this.props.className, prefix)
	      }),
	      _react2['default'].createElement(
	        'div',
	        { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
	        _react2['default'].createElement(
	          'div',
	          { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'), role: 'document' },
	          this.props.children
	        )
	      )
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', ModalDialog));
	module.exports = exports['default'];

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalBody = (function (_React$Component) {
	  _inherits(ModalBody, _React$Component);

	  function ModalBody() {
	    _classCallCheck(this, ModalBody);

	    _React$Component.apply(this, arguments);
	  }

	  ModalBody.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'body')) }),
	      this.props.children
	    );
	  };

	  return ModalBody;
	})(_react2['default'].Component);

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalBody);
	module.exports = exports['default'];

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var ModalHeader = (function (_React$Component) {
	  _inherits(ModalHeader, _React$Component);

	  function ModalHeader() {
	    _classCallCheck(this, ModalHeader);

	    _React$Component.apply(this, arguments);
	  }

	  ModalHeader.prototype.render = function render() {
	    var _props = this.props;
	    var label = _props['aria-label'];

	    var props = _objectWithoutProperties(_props, ['aria-label']);

	    var onHide = _utilsCreateChainedFunction2['default'](this.context.$bs_onModalHide, this.props.onHide);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'header'))
	      }),
	      this.props.closeButton && _react2['default'].createElement(
	        'button',
	        {
	          type: 'button',
	          className: 'close',
	          'aria-label': label,
	          onClick: onHide },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-hidden': 'true' },
	          '×'
	        )
	      ),
	      this.props.children
	    );
	  };

	  return ModalHeader;
	})(_react2['default'].Component);

	ModalHeader.propTypes = {
	  /**
	   * The 'aria-label' attribute provides an accessible label for the close button.
	   * It is used for Assistive Technology when the label text is not readable.
	   */
	  'aria-label': _react2['default'].PropTypes.string,

	  bsClass: _react2['default'].PropTypes.string,

	  /**
	   * Specify whether the Component should contain a close button
	   */
	  closeButton: _react2['default'].PropTypes.bool,

	  /**
	   * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
	   * be propagated up to the parent Modal `onHide`.
	   */
	  onHide: _react2['default'].PropTypes.func
	};

	ModalHeader.contextTypes = {
	  '$bs_onModalHide': _react2['default'].PropTypes.func
	};

	ModalHeader.defaultProps = {
	  'aria-label': 'Close',
	  closeButton: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalHeader);
	module.exports = exports['default'];

/***/ },
/* 564 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalTitle = (function (_React$Component) {
	  _inherits(ModalTitle, _React$Component);

	  function ModalTitle() {
	    _classCallCheck(this, ModalTitle);

	    _React$Component.apply(this, arguments);
	  }

	  ModalTitle.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'h4',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'title')) }),
	      this.props.children
	    );
	  };

	  return ModalTitle;
	})(_react2['default'].Component);

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalTitle);
	module.exports = exports['default'];

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalFooter = (function (_React$Component) {
	  _inherits(ModalFooter, _React$Component);

	  function ModalFooter() {
	    _classCallCheck(this, ModalFooter);

	    _React$Component.apply(this, arguments);
	  }

	  ModalFooter.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'footer')) }),
	      this.props.children
	    );
	  };

	  return ModalFooter;
	})(_react2['default'].Component);

	ModalFooter.propTypes = {
	  /**
	   * A css class applied to the Component
	   */
	  bsClass: _react2['default'].PropTypes.string
	};

	ModalFooter.defaultProps = {
	  bsClass: 'modal'
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalFooter);
	module.exports = exports['default'];

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/prop-types */
	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	var _reactPropTypesLibMountable = __webpack_require__(568);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	var _reactPropTypesLibElementType = __webpack_require__(570);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Portal = __webpack_require__(571);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _ModalManager = __webpack_require__(574);

	var _ModalManager2 = _interopRequireDefault(_ModalManager);

	var _utilsOwnerDocument = __webpack_require__(572);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsAddEventListener = __webpack_require__(590);

	var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

	var _utilsAddFocusListener = __webpack_require__(591);

	var _utilsAddFocusListener2 = _interopRequireDefault(_utilsAddFocusListener);

	var _domHelpersUtilInDOM = __webpack_require__(539);

	var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

	var _domHelpersActiveElement = __webpack_require__(592);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryContains = __webpack_require__(545);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _utilsGetContainer = __webpack_require__(573);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	var modalManager = new _ModalManager2['default']();

	/**
	 * Love them or hate them, `<Modal/>` provides a solid foundation for creating dialogs, lightboxes, or whatever else.
	 * The Modal component renders its `children` node in front of a backdrop component.
	 *
	 * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:
	 *
	 * - Manages dialog stacking when one-at-a-time just isn't enough.
	 * - Creates a backdrop, for disabling interaction below the modal.
	 * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
	 * - It disables scrolling of the page content while open.
	 * - Adds the appropriate ARIA roles are automatically.
	 * - Easily pluggable animations via a `<Transition/>` component.
	 *
	 */
	var Modal = _react2['default'].createClass({
	  displayName: 'Modal',

	  propTypes: _extends({}, _Portal2['default'].propTypes, {

	    /**
	     * A Node, Component instance, or function that returns either. The Modal is appended to it's container element.
	     *
	     * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
	     * page content can be placed behind a virtual backdrop as well as a visual one.
	     */
	    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),

	    /**
	     * A callback fired when the Modal is opening.
	     */
	    onShow: _react2['default'].PropTypes.func,

	    /**
	     * A callback fired when either the backdrop is clicked, or the escape key is pressed.
	     */
	    onHide: _react2['default'].PropTypes.func,

	    /**
	     * Include a backdrop component.
	     */
	    backdrop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.oneOf(['static'])]),

	    /**
	     * A callback fired when the escape key, if specified in `keyboard`, is pressed.
	     */
	    onEscapeKeyUp: _react2['default'].PropTypes.func,

	    /**
	     * A callback fired when the backdrop, if specified, is clicked.
	     */
	    onBackdropClick: _react2['default'].PropTypes.func,

	    /**
	     * A style object for the backdrop component.
	     */
	    backdropStyle: _react2['default'].PropTypes.object,

	    /**
	     * A css class or classes for the backdrop component.
	     */
	    backdropClassName: _react2['default'].PropTypes.string,

	    /**
	     * A css class or set of classes applied to the modal container when the modal is open,
	     * and removed when it is closed.
	     */
	    containerClassName: _react2['default'].PropTypes.string,

	    /**
	     * Close the modal when escape key is pressed
	     */
	    keyboard: _react2['default'].PropTypes.bool,

	    /**
	     * A `<Transition/>` component to use for the dialog and backdrop components.
	     */
	    transition: _reactPropTypesLibElementType2['default'],

	    /**
	     * The `timeout` of the dialog transition if specified. This number is used to ensure that transition callbacks are always
	     * fired, even if browser transition events are canceled.
	     *
	     * See the Transition `timeout` prop for more infomation.
	     */
	    dialogTransitionTimeout: _react2['default'].PropTypes.number,

	    /**
	     * The `timeout` of the backdrop transition if specified. This number is used to ensure that transition callbacks are always
	     * fired, even if browser transition events are canceled.
	     *
	     * See the Transition `timeout` prop for more infomation.
	     */
	    backdropTransitionTimeout: _react2['default'].PropTypes.number,

	    /**
	     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
	     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen readers.
	     */
	    autoFocus: _react2['default'].PropTypes.bool,

	    /**
	     * When `true` The modal will prevent focus from leaving the Modal while open.
	     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen readers.
	     */
	    enforceFocus: _react2['default'].PropTypes.bool

	  }),

	  getDefaultProps: function getDefaultProps() {
	    var noop = function noop() {};

	    return {
	      show: false,
	      backdrop: true,
	      keyboard: true,
	      autoFocus: true,
	      enforceFocus: true,
	      onHide: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    return { exited: !this.props.show };
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var children = _props.children;
	    var Transition = _props.transition;
	    var backdrop = _props.backdrop;
	    var dialogTransitionTimeout = _props.dialogTransitionTimeout;

	    var props = _objectWithoutProperties(_props, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout']);

	    var onExit = props.onExit;
	    var onExiting = props.onExiting;
	    var onEnter = props.onEnter;
	    var onEntering = props.onEntering;
	    var onEntered = props.onEntered;

	    var show = !!props.show;
	    var dialog = _react2['default'].Children.only(this.props.children);

	    var setMountNode = function setMountNode(ref) {
	      return _this.mountNode = !ref || ref.getMountNode();
	    };

	    var mountModal = show || Transition && !this.state.exited;

	    if (!mountModal) {
	      return null;
	    }

	    var _dialog$props = dialog.props;
	    var role = _dialog$props.role;
	    var tabIndex = _dialog$props.tabIndex;

	    if (role === undefined || tabIndex === undefined) {
	      dialog = _react.cloneElement(dialog, {
	        role: role === undefined ? 'document' : role,
	        tabIndex: tabIndex == null ? '-1' : tabIndex
	      });
	    }

	    if (Transition) {
	      dialog = _react2['default'].createElement(
	        Transition,
	        {
	          transitionAppear: true,
	          unmountOnExit: true,
	          'in': show,
	          timeout: dialogTransitionTimeout,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.handleHidden,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        dialog
	      );
	    }

	    return _react2['default'].createElement(
	      _Portal2['default'],
	      {
	        ref: setMountNode,
	        container: props.container
	      },
	      _react2['default'].createElement(
	        'div',
	        {
	          ref: 'modal',
	          role: props.role || 'dialog',
	          style: props.style,
	          className: props.className
	        },
	        backdrop && this.renderBackdrop(),
	        dialog
	      )
	    );
	  },

	  renderBackdrop: function renderBackdrop() {
	    var _props2 = this.props;
	    var Transition = _props2.transition;
	    var backdropTransitionTimeout = _props2.backdropTransitionTimeout;

	    var backdrop = _react2['default'].createElement('div', { ref: 'backdrop',
	      style: this.props.backdropStyle,
	      className: this.props.backdropClassName,
	      onClick: this.handleBackdropClick
	    });

	    if (Transition) {
	      backdrop = _react2['default'].createElement(
	        Transition,
	        { transitionAppear: true,
	          'in': this.props.show,
	          timeout: backdropTransitionTimeout
	        },
	        backdrop
	      );
	    }

	    return backdrop;
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  },

	  componentWillUpdate: function componentWillUpdate(nextProps) {
	    if (nextProps.show) {
	      this.checkForFocus();
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.show) {
	      this.onShow();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var transition = this.props.transition;

	    if (prevProps.show && !this.props.show && !transition) {
	      // Otherwise handleHidden will call this.
	      this.onHide();
	    } else if (!prevProps.show && this.props.show) {
	      this.onShow();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var _props3 = this.props;
	    var show = _props3.show;
	    var transition = _props3.transition;

	    if (show || transition && !this.state.exited) {
	      this.onHide();
	    }
	  },

	  onShow: function onShow() {
	    var doc = _utilsOwnerDocument2['default'](this);
	    var container = _utilsGetContainer2['default'](this.props.container, doc.body);

	    modalManager.add(this, container, this.props.containerClassName);

	    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);

	    this._onFocusinListener = _utilsAddFocusListener2['default'](this.enforceFocus);

	    this.focus();
	  },

	  onHide: function onHide() {
	    modalManager.remove(this);

	    this._onDocumentKeyupListener.remove();

	    this._onFocusinListener.remove();

	    this.restoreLastFocus();
	  },

	  handleHidden: function handleHidden() {
	    this.setState({ exited: true });
	    this.onHide();

	    if (this.props.onExited) {
	      var _props4;

	      (_props4 = this.props).onExited.apply(_props4, arguments);
	    }
	  },

	  handleBackdropClick: function handleBackdropClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    if (this.props.onBackdropClick) {
	      this.props.onBackdropClick(e);
	    }

	    if (this.props.backdrop === true) {
	      this.props.onHide();
	    }
	  },

	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
	      if (this.props.onEscapeKeyUp) {
	        this.props.onEscapeKeyUp(e);
	      }
	      this.props.onHide();
	    }
	  },

	  checkForFocus: function checkForFocus() {
	    if (_domHelpersUtilInDOM2['default']) {
	      this.lastFocus = _domHelpersActiveElement2['default']();
	    }
	  },

	  focus: function focus() {
	    var autoFocus = this.props.autoFocus;
	    var modalContent = this.getDialogElement();
	    var current = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
	    var focusInModal = current && _domHelpersQueryContains2['default'](modalContent, current);

	    if (modalContent && autoFocus && !focusInModal) {
	      this.lastFocus = current;

	      if (!modalContent.hasAttribute('tabIndex')) {
	        modalContent.setAttribute('tabIndex', -1);
	        _warning2['default'](false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
	      }

	      modalContent.focus();
	    }
	  },

	  restoreLastFocus: function restoreLastFocus() {
	    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
	    if (this.lastFocus && this.lastFocus.focus) {
	      this.lastFocus.focus();
	      this.lastFocus = null;
	    }
	  },

	  enforceFocus: function enforceFocus() {
	    var enforceFocus = this.props.enforceFocus;

	    if (!enforceFocus || !this.isMounted() || !this.isTopModal()) {
	      return;
	    }

	    var active = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
	    var modal = this.getDialogElement();

	    if (modal && modal !== active && !_domHelpersQueryContains2['default'](modal, active)) {
	      modal.focus();
	    }
	  },

	  //instead of a ref, which might conflict with one the parent applied.
	  getDialogElement: function getDialogElement() {
	    var node = this.refs.modal;
	    return node && node.lastChild;
	  },

	  isTopModal: function isTopModal() {
	    return modalManager.isTopModal(this);
	  }

	});

	Modal.manager = modalManager;

	exports['default'] = Modal;
	module.exports = exports['default'];

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _common = __webpack_require__(569);

	/**
	 * Checks whether a prop provides a DOM element
	 *
	 * The element can be provided in two forms:
	 * - Directly passed
	 * - Or passed an object that has a `render` method
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
	    return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 569 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(569);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactPropTypesLibMountable = __webpack_require__(568);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	var _utilsOwnerDocument = __webpack_require__(572);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(573);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	/**
	 * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
	 * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
	 * The children of `<Portal/>` component will be appended to the `container` specified.
	 */
	var Portal = _react2['default'].createClass({

	  displayName: 'Portal',

	  propTypes: {
	    /**
	     * A Node, Component instance, or function that returns either. The `container` will have the Portal children
	     * appended to it.
	     */
	    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
	  },

	  componentDidMount: function componentDidMount() {
	    this._renderOverlay();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._renderOverlay();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unrenderOverlay();
	    this._unmountOverlayTarget();
	  },

	  _mountOverlayTarget: function _mountOverlayTarget() {
	    if (!this._overlayTarget) {
	      this._overlayTarget = document.createElement('div');
	      this.getContainerDOMNode().appendChild(this._overlayTarget);
	    }
	  },

	  _unmountOverlayTarget: function _unmountOverlayTarget() {
	    if (this._overlayTarget) {
	      this.getContainerDOMNode().removeChild(this._overlayTarget);
	      this._overlayTarget = null;
	    }
	  },

	  _renderOverlay: function _renderOverlay() {

	    var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

	    // Save reference for future access.
	    if (overlay !== null) {
	      this._mountOverlayTarget();
	      this._overlayInstance = _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, overlay, this._overlayTarget);
	    } else {
	      // Unrender if the component is null for transitions to null
	      this._unrenderOverlay();
	      this._unmountOverlayTarget();
	    }
	  },

	  _unrenderOverlay: function _unrenderOverlay() {
	    if (this._overlayTarget) {
	      _reactDom2['default'].unmountComponentAtNode(this._overlayTarget);
	      this._overlayInstance = null;
	    }
	  },

	  render: function render() {
	    return null;
	  },

	  getMountNode: function getMountNode() {
	    return this._overlayTarget;
	  },

	  getOverlayDOMNode: function getOverlayDOMNode() {
	    if (!this.isMounted()) {
	      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
	    }

	    if (this._overlayInstance) {
	      if (this._overlayInstance.getWrappedDOMNode) {
	        return this._overlayInstance.getWrappedDOMNode();
	      } else {
	        return _reactDom2['default'].findDOMNode(this._overlayInstance);
	      }
	    }

	    return null;
	  },

	  getContainerDOMNode: function getContainerDOMNode() {
	    return _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
	  }
	});

	exports['default'] = Portal;
	module.exports = exports['default'];

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domHelpersOwnerDocument = __webpack_require__(540);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	exports['default'] = function (componentOrElement) {
	  return _domHelpersOwnerDocument2['default'](_reactDom2['default'].findDOMNode(componentOrElement));
	};

	module.exports = exports['default'];

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = getContainer;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2['default'].findDOMNode(container) || defaultContainer;
	}

	module.exports = exports['default'];

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _domHelpersStyle = __webpack_require__(575);

	var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

	var _domHelpersClass = __webpack_require__(583);

	var _domHelpersClass2 = _interopRequireDefault(_domHelpersClass);

	var _domHelpersUtilScrollbarSize = __webpack_require__(538);

	var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

	var _utilsIsOverflowing = __webpack_require__(587);

	var _utilsIsOverflowing2 = _interopRequireDefault(_utilsIsOverflowing);

	var _utilsManageAriaHidden = __webpack_require__(589);

	function findIndexOf(arr, cb) {
	  var idx = -1;
	  arr.some(function (d, i) {
	    if (cb(d, i)) {
	      idx = i;
	      return true;
	    }
	  });
	  return idx;
	}

	function findContainer(data, modal) {
	  return findIndexOf(data, function (d) {
	    return d.modals.indexOf(modal) !== -1;
	  });
	}

	/**
	 * Proper state managment for containers and the modals in those containers.
	 *
	 * @internal Used by the Modal to ensure proper styling of containers.
	 */

	var ModalManager = (function () {
	  function ModalManager() {
	    var hideSiblingNodes = arguments[0] === undefined ? true : arguments[0];

	    _classCallCheck(this, ModalManager);

	    this.hideSiblingNodes = hideSiblingNodes;
	    this.modals = [];
	    this.containers = [];
	    this.data = [];
	  }

	  ModalManager.prototype.add = function add(modal, container, className) {
	    var modalIdx = this.modals.indexOf(modal);
	    var containerIdx = this.containers.indexOf(container);

	    if (modalIdx !== -1) {
	      return modalIdx;
	    }

	    modalIdx = this.modals.length;
	    this.modals.push(modal);

	    if (this.hideSiblingNodes) {
	      _utilsManageAriaHidden.hideSiblings(container, modal.mountNode);
	    }

	    if (containerIdx !== -1) {
	      this.data[containerIdx].modals.push(modal);
	      return modalIdx;
	    }

	    var data = {
	      modals: [modal],
	      //right now only the first modal of a container will have its classes applied
	      classes: className ? className.split(/\s+/) : [],
	      //we are only interested in the actual `style` here becasue we will override it
	      style: {
	        overflow: container.style.overflow,
	        paddingRight: container.style.paddingRight
	      }
	    };

	    var style = { overflow: 'hidden' };

	    data.overflowing = _utilsIsOverflowing2['default'](container);

	    if (data.overflowing) {
	      // use computed style, here to get the real padding
	      // to add our scrollbar width
	      style.paddingRight = parseInt(_domHelpersStyle2['default'](container, 'paddingRight') || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
	    }

	    _domHelpersStyle2['default'](container, style);

	    data.classes.forEach(_domHelpersClass2['default'].addClass.bind(null, container));

	    this.containers.push(container);
	    this.data.push(data);

	    return modalIdx;
	  };

	  ModalManager.prototype.remove = function remove(modal) {
	    var modalIdx = this.modals.indexOf(modal);

	    if (modalIdx === -1) {
	      return;
	    }

	    var containerIdx = findContainer(this.data, modal);
	    var data = this.data[containerIdx];
	    var container = this.containers[containerIdx];

	    data.modals.splice(data.modals.indexOf(modal), 1);

	    this.modals.splice(modalIdx, 1);

	    //if that was the last modal in a container, clean it up.
	    if (data.modals.length === 0) {
	      Object.keys(data.style).forEach(function (key) {
	        return container.style[key] = data.style[key];
	      });

	      data.classes.forEach(_domHelpersClass2['default'].removeClass.bind(null, container));

	      if (this.hideSiblingNodes) {
	        _utilsManageAriaHidden.showSiblings(container, modal.mountNode);
	      }
	      this.containers.splice(containerIdx, 1);
	      this.data.splice(containerIdx, 1);
	    } else if (this.hideSiblingNodes) {
	      //otherwise make sure the next top modal is visible to a SR
	      _utilsManageAriaHidden.ariaHidden(false, data.modals[data.modals.length - 1].mountNode);
	    }
	  };

	  ModalManager.prototype.isTopModal = function isTopModal(modal) {
	    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
	  };

	  return ModalManager;
	})();

	exports['default'] = ModalManager;
	module.exports = exports['default'];

/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var camelize = __webpack_require__(576),
	    hyphenate = __webpack_require__(578),
	    _getComputedStyle = __webpack_require__(580),
	    removeStyle = __webpack_require__(582);

	var has = Object.prototype.hasOwnProperty;

	module.exports = function style(node, property, value) {
	  var css = '',
	      props = property;

	  if (typeof property === 'string') {

	    if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
	  }

	  for (var key in props) if (has.call(props, key)) {
	    !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
	  }

	  node.style.cssText += ';' + css;
	};

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	 */

	'use strict';
	var camelize = __webpack_require__(577);
	var msPattern = /^-ms-/;

	module.exports = function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	};

/***/ },
/* 577 */
/***/ function(module, exports) {

	"use strict";

	var rHyphen = /-(.)/g;

	module.exports = function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	};

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	 */

	"use strict";

	var hyphenate = __webpack_require__(579);
	var msPattern = /^ms-/;

	module.exports = function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, "-ms-");
	};

/***/ },
/* 579 */
/***/ function(module, exports) {

	'use strict';

	var rUpper = /([A-Z])/g;

	module.exports = function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	};

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(581);

	var _utilCamelizeStyle = __webpack_require__(576);

	var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

	module.exports = function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;

	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;

	      prop = (0, _utilCamelizeStyle2['default'])(prop);

	      if (prop == 'float') prop = 'styleFloat';

	      var current = node.currentStyle[prop] || null;

	      if (current == null && style && style[prop]) current = style[prop];

	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left;

	        // Put in the new values to get a computed value out
	        if (rsLeft) runStyle.left = node.currentStyle.left;

	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px';

	        // Revert the changed values
	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }

	      return current;
	    }
	  };
	};

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === "object") {
	    factory(exports);
	  } else {
	    factory(root.babelHelpers = {});
	  }
	})(this, function (global) {
	  var babelHelpers = global;

	  babelHelpers.interopRequireDefault = function (obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  };

	  babelHelpers._extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	})

/***/ },
/* 582 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	};

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  addClass: __webpack_require__(584),
	  removeClass: __webpack_require__(586),
	  hasClass: __webpack_require__(585)
	};

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hasClass = __webpack_require__(585);

	module.exports = function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element)) element.className = element.className + ' ' + className;
	};

/***/ },
/* 585 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (' ' + element.className + ' ').indexOf(' ' + className + ' ') !== -1;
	};

/***/ },
/* 586 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	};

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = isOverflowing;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _domHelpersQueryIsWindow = __webpack_require__(588);

	var _domHelpersQueryIsWindow2 = _interopRequireDefault(_domHelpersQueryIsWindow);

	var _domHelpersOwnerDocument = __webpack_require__(540);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	function isBody(node) {
	  return node && node.tagName.toLowerCase() === 'body';
	}

	function bodyIsOverflowing(node) {
	  var doc = _domHelpersOwnerDocument2['default'](node);
	  var win = _domHelpersQueryIsWindow2['default'](doc);
	  var fullWidth = win.innerWidth;

	  // Support: ie8, no innerWidth
	  if (!fullWidth) {
	    var documentElementRect = doc.documentElement.getBoundingClientRect();
	    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	  }

	  return doc.body.clientWidth < fullWidth;
	}

	function isOverflowing(container) {
	  var win = _domHelpersQueryIsWindow2['default'](container);

	  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
	}

	module.exports = exports['default'];

/***/ },
/* 588 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	};

/***/ },
/* 589 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.ariaHidden = ariaHidden;
	exports.hideSiblings = hideSiblings;
	exports.showSiblings = showSiblings;

	var BLACKLIST = ['template', 'script', 'style'];

	var isHidable = function isHidable(_ref) {
	  var nodeType = _ref.nodeType;
	  var tagName = _ref.tagName;
	  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
	};

	var siblings = function siblings(container, mount, cb) {
	  mount = [].concat(mount);

	  [].forEach.call(container.children, function (node) {
	    if (mount.indexOf(node) === -1 && isHidable(node)) {
	      cb(node);
	    }
	  });
	};

	function ariaHidden(show, node) {
	  if (!node) {
	    return;
	  }
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}

	function hideSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(true, node);
	  });
	}

	function showSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(false, node);
	  });
	}

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _domHelpersEventsOn = __webpack_require__(542);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _domHelpersEventsOff = __webpack_require__(543);

	var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

	exports['default'] = function (node, event, handler) {
	  _domHelpersEventsOn2['default'](node, event, handler);
	  return {
	    remove: function remove() {
	      _domHelpersEventsOff2['default'](node, event, handler);
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 591 */
/***/ function(module, exports) {

	/**
	 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
	 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
	 *
	 * We only allow one Listener at a time to avoid stack overflows
	 */
	'use strict';

	exports.__esModule = true;
	exports['default'] = addFocusListener;

	function addFocusListener(handler) {
	  var useFocusin = !document.addEventListener;
	  var remove = undefined;

	  if (useFocusin) {
	    document.attachEvent('onfocusin', handler);
	    remove = function () {
	      return document.detachEvent('onfocusin', handler);
	    };
	  } else {
	    document.addEventListener('focus', handler, true);
	    remove = function () {
	      return document.removeEventListener('focus', handler, true);
	    };
	  }

	  return { remove: remove };
	}

	module.exports = exports['default'];

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(581);

	exports.__esModule = true;

	/**
	 * document.activeElement
	 */
	exports['default'] = activeElement;

	var _ownerDocument = __webpack_require__(540);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	function activeElement() {
	  var doc = arguments[0] === undefined ? document : arguments[0];

	  try {
	    return doc.activeElement;
	  } catch (e) {}
	}

	module.exports = exports['default'];

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(594),
	    bindCallback = __webpack_require__(611),
	    pickByArray = __webpack_require__(613),
	    pickByCallback = __webpack_require__(614),
	    restParam = __webpack_require__(621);

	/**
	 * Creates an object composed of the picked `object` properties. Property
	 * names may be specified as individual arguments or as arrays of property
	 * names. If `predicate` is provided it's invoked for each property of `object`
	 * picking the properties `predicate` returns truthy for. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to pick, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.pick(object, 'user');
	 * // => { 'user': 'fred' }
	 *
	 * _.pick(object, _.isString);
	 * // => { 'user': 'fred' }
	 */
	var pick = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  return typeof props[0] == 'function'
	    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	    : pickByArray(object, baseFlatten(props));
	});

	module.exports = pick;


/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(595),
	    isArguments = __webpack_require__(596),
	    isArray = __webpack_require__(606),
	    isArrayLike = __webpack_require__(597),
	    isObjectLike = __webpack_require__(603);

	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 595 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(597),
	    isObjectLike = __webpack_require__(603);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(598),
	    isLength = __webpack_require__(605);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(599);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(600);

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : toObject(object)[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(601),
	    isString = __webpack_require__(602),
	    support = __webpack_require__(604);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  if (support.unindexedChars && isString(value)) {
	    var index = -1,
	        length = value.length,
	        result = Object(value);

	    while (++index < length) {
	      result[index] = value.charAt(index);
	    }
	    return result;
	  }
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ },
/* 601 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(603);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 603 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 604 */
/***/ function(module, exports) {

	/** Used for native method references. */
	var arrayProto = Array.prototype,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/**
	 * An object environment feature flags.
	 *
	 * @static
	 * @memberOf _
	 * @type Object
	 */
	var support = {};

	(function(x) {
	  var Ctor = function() { this.x = x; },
	      object = { '0': x, 'length': x },
	      props = [];

	  Ctor.prototype = { 'valueOf': x, 'y': x };
	  for (var key in new Ctor) { props.push(key); }

	  /**
	   * Detect if `name` or `message` properties of `Error.prototype` are
	   * enumerable by default (IE < 9, Safari < 5.1).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
	    propertyIsEnumerable.call(errorProto, 'name');

	  /**
	   * Detect if `prototype` properties are enumerable by default.
	   *
	   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	   * (if the prototype or a property on the prototype has been set)
	   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
	   * property to `true`.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

	  /**
	   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	   *
	   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
	   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.nonEnumShadows = !/valueOf/.test(props);

	  /**
	   * Detect if own properties are iterated after inherited properties (IE < 9).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.ownLast = props[0] != 'x';

	  /**
	   * Detect if `Array#shift` and `Array#splice` augment array-like objects
	   * correctly.
	   *
	   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
	   * `shift()` and `splice()` functions that fail to remove the last element,
	   * `value[0]`, of array-like objects even though the "length" property is
	   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
	   * while `splice()` is buggy regardless of mode in IE < 9.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

	  /**
	   * Detect lack of support for accessing string characters by index.
	   *
	   * IE < 8 can't access characters by index. IE 8 can only access characters
	   * by index on string literals, not string objects.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
	}(1, 0));

	module.exports = support;


/***/ },
/* 605 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(607),
	    isLength = __webpack_require__(605),
	    isObjectLike = __webpack_require__(603);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(608);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(609),
	    isHostObject = __webpack_require__(610),
	    isObjectLike = __webpack_require__(603);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}

	module.exports = isNative;


/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(601);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 610 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	var isHostObject = (function() {
	  try {
	    Object({ 'toString': 0 } + '');
	  } catch(e) {
	    return function() { return false; };
	  }
	  return function(value) {
	    // IE < 9 presents many host objects as `Object` objects that can coerce
	    // to strings despite having improperly defined `toString` methods.
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  };
	}());

	module.exports = isHostObject;


/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(612);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ },
/* 612 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(600);

	/**
	 * A specialized version of `_.pick` which picks `object` properties specified
	 * by `props`.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property names to pick.
	 * @returns {Object} Returns the new object.
	 */
	function pickByArray(object, props) {
	  object = toObject(object);

	  var index = -1,
	      length = props.length,
	      result = {};

	  while (++index < length) {
	    var key = props[index];
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}

	module.exports = pickByArray;


/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(615);

	/**
	 * A specialized version of `_.pick` which picks `object` properties `predicate`
	 * returns truthy for.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Object} Returns the new object.
	 */
	function pickByCallback(object, predicate) {
	  var result = {};
	  baseForIn(object, function(value, key, object) {
	    if (predicate(value, key, object)) {
	      result[key] = value;
	    }
	  });
	  return result;
	}

	module.exports = pickByCallback;


/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(616),
	    keysIn = __webpack_require__(618);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(617);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(600);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(619),
	    isArguments = __webpack_require__(596),
	    isArray = __webpack_require__(606),
	    isFunction = __webpack_require__(609),
	    isIndex = __webpack_require__(620),
	    isLength = __webpack_require__(605),
	    isObject = __webpack_require__(601),
	    isString = __webpack_require__(602),
	    support = __webpack_require__(604);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/** Used to fix the JScript `[[DontEnum]]` bug. */
	var shadowProps = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];

	/** Used for native method references. */
	var errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to avoid iterating over non-enumerable properties in IE < 9. */
	var nonEnumProps = {};
	nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
	nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
	nonEnumProps[objectTag] = { 'constructor': true };

	arrayEach(shadowProps, function(key) {
	  for (var tag in nonEnumProps) {
	    if (hasOwnProperty.call(nonEnumProps, tag)) {
	      var props = nonEnumProps[tag];
	      props[key] = hasOwnProperty.call(props, key);
	    }
	  }
	});

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;

	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
	      isProto = proto === object,
	      result = Array(length),
	      skipIndexes = length > 0,
	      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
	      skipProto = support.enumPrototypes && isFunction(object);

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  // lodash skips the `constructor` property when it infers it's iterating
	  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
	  // attribute of an existing property and the `constructor` property of a
	  // prototype defaults to non-enumerable.
	  for (var key in object) {
	    if (!(skipProto && key == 'prototype') &&
	        !(skipErrorProps && (key == 'message' || key == 'name')) &&
	        !(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  if (support.nonEnumShadows && object !== objectProto) {
	    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
	        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

	    if (tag == objectTag) {
	      proto = objectProto;
	    }
	    length = shadowProps.length;
	    while (length--) {
	      key = shadowProps[length];
	      var nonEnum = nonEnums[key];
	      if (!(isProto && nonEnum) &&
	          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
	        result.push(key);
	      }
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 619 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 620 */
/***/ function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 621 */
/***/ function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var types = ['button', 'reset', 'submit'];

	var ButtonStyles = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY, _styleMaps.LINK);

	var Button = _react2['default'].createClass({
	  displayName: 'Button',

	  propTypes: {
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    block: _react2['default'].PropTypes.bool,
	    navItem: _react2['default'].PropTypes.bool,
	    navDropdown: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    /**
	     * Defines HTML button type Attribute
	     * @type {("button"|"reset"|"submit")}
	     * @defaultValue 'button'
	     */
	    type: _react2['default'].PropTypes.oneOf(types)
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      block: false,
	      disabled: false,
	      navItem: false,
	      navDropdown: false
	    };
	  },

	  render: function render() {
	    var _extends2;

	    var classes = this.props.navDropdown ? {} : _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var renderFuncName = undefined;

	    var blockClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'block');

	    classes = _extends((_extends2 = {
	      active: this.props.active
	    }, _extends2[blockClass] = this.props.block, _extends2), classes);

	    if (this.props.navItem) {
	      return this.renderNavItem(classes);
	    }

	    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

	    return this[renderFuncName](classes);
	  },

	  renderAnchor: function renderAnchor(classes) {
	    var Component = this.props.componentClass || 'a';
	    var href = this.props.href || '#';
	    classes.disabled = this.props.disabled;

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        href: href,
	        className: _classnames2['default'](this.props.className, classes),
	        role: 'button' }),
	      this.props.children
	    );
	  },

	  renderButton: function renderButton(classes) {
	    var Component = this.props.componentClass || 'button';

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        type: this.props.type || 'button',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  },

	  renderNavItem: function renderNavItem(classes) {
	    var liClasses = {
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](liClasses) },
	      this.renderAnchor(classes)
	    );
	  }
	});

	Button.types = types;

	exports['default'] = _utilsBootstrapUtils.bsStyles(ButtonStyles, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL, _styleMaps.Sizes.XSMALL], _utilsBootstrapUtils.bsClass('btn', Button)));
	module.exports = exports['default'];

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	var _interopRequireWildcard = __webpack_require__(624)['default'];

	exports.__esModule = true;

	var _utilsChildrenValueInputValidation = __webpack_require__(625);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Accordion2 = __webpack_require__(628);

	var _Accordion3 = _interopRequireDefault(_Accordion2);

	exports.Accordion = _Accordion3['default'];

	var _Alert2 = __webpack_require__(630);

	var _Alert3 = _interopRequireDefault(_Alert2);

	exports.Alert = _Alert3['default'];

	var _Badge2 = __webpack_require__(631);

	var _Badge3 = _interopRequireDefault(_Badge2);

	exports.Badge = _Badge3['default'];

	var _Breadcrumb2 = __webpack_require__(632);

	var _Breadcrumb3 = _interopRequireDefault(_Breadcrumb2);

	exports.Breadcrumb = _Breadcrumb3['default'];

	var _BreadcrumbItem2 = __webpack_require__(633);

	var _BreadcrumbItem3 = _interopRequireDefault(_BreadcrumbItem2);

	exports.BreadcrumbItem = _BreadcrumbItem3['default'];

	var _Button2 = __webpack_require__(622);

	var _Button3 = _interopRequireDefault(_Button2);

	exports.Button = _Button3['default'];

	var _ButtonGroup2 = __webpack_require__(635);

	var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

	exports.ButtonGroup = _ButtonGroup3['default'];

	var _ButtonInput2 = __webpack_require__(637);

	var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

	exports.ButtonInput = _ButtonInput3['default'];

	var _ButtonToolbar2 = __webpack_require__(641);

	var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

	exports.ButtonToolbar = _ButtonToolbar3['default'];

	var _Carousel2 = __webpack_require__(642);

	var _Carousel3 = _interopRequireDefault(_Carousel2);

	exports.Carousel = _Carousel3['default'];

	var _CarouselItem2 = __webpack_require__(643);

	var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

	exports.CarouselItem = _CarouselItem3['default'];

	var _Col2 = __webpack_require__(645);

	var _Col3 = _interopRequireDefault(_Col2);

	exports.Col = _Col3['default'];

	var _CollapsibleNav2 = __webpack_require__(646);

	var _CollapsibleNav3 = _interopRequireDefault(_CollapsibleNav2);

	exports.CollapsibleNav = _CollapsibleNav3['default'];

	var _Dropdown2 = __webpack_require__(649);

	var _Dropdown3 = _interopRequireDefault(_Dropdown2);

	exports.Dropdown = _Dropdown3['default'];

	var _DropdownButton2 = __webpack_require__(701);

	var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

	exports.DropdownButton = _DropdownButton3['default'];

	var _Glyphicon2 = __webpack_require__(640);

	var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

	exports.Glyphicon = _Glyphicon3['default'];

	var _Grid2 = __webpack_require__(702);

	var _Grid3 = _interopRequireDefault(_Grid2);

	exports.Grid = _Grid3['default'];

	var _Image2 = __webpack_require__(703);

	var _Image3 = _interopRequireDefault(_Image2);

	exports.Image = _Image3['default'];

	var _Input2 = __webpack_require__(704);

	var _Input3 = _interopRequireDefault(_Input2);

	exports.Input = _Input3['default'];

	var _Interpolate2 = __webpack_require__(707);

	var _Interpolate3 = _interopRequireDefault(_Interpolate2);

	exports.Interpolate = _Interpolate3['default'];

	var _Jumbotron2 = __webpack_require__(708);

	var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

	exports.Jumbotron = _Jumbotron3['default'];

	var _Label2 = __webpack_require__(709);

	var _Label3 = _interopRequireDefault(_Label2);

	exports.Label = _Label3['default'];

	var _ListGroup2 = __webpack_require__(710);

	var _ListGroup3 = _interopRequireDefault(_ListGroup2);

	exports.ListGroup = _ListGroup3['default'];

	var _ListGroupItem2 = __webpack_require__(711);

	var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

	exports.ListGroupItem = _ListGroupItem3['default'];

	var _MenuItem2 = __webpack_require__(712);

	var _MenuItem3 = _interopRequireDefault(_MenuItem2);

	exports.MenuItem = _MenuItem3['default'];

	var _Modal2 = __webpack_require__(508);

	var _Modal3 = _interopRequireDefault(_Modal2);

	exports.Modal = _Modal3['default'];

	var _ModalBody2 = __webpack_require__(562);

	var _ModalBody3 = _interopRequireDefault(_ModalBody2);

	exports.ModalBody = _ModalBody3['default'];

	var _ModalFooter2 = __webpack_require__(566);

	var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

	exports.ModalFooter = _ModalFooter3['default'];

	var _ModalHeader2 = __webpack_require__(563);

	var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

	exports.ModalHeader = _ModalHeader3['default'];

	var _ModalTitle2 = __webpack_require__(565);

	var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

	exports.ModalTitle = _ModalTitle3['default'];

	var _Nav2 = __webpack_require__(713);

	var _Nav3 = _interopRequireDefault(_Nav2);

	exports.Nav = _Nav3['default'];

	var _Navbar2 = __webpack_require__(714);

	var _Navbar3 = _interopRequireDefault(_Navbar2);

	exports.Navbar = _Navbar3['default'];

	var _NavBrand2 = __webpack_require__(716);

	var _NavBrand3 = _interopRequireDefault(_NavBrand2);

	exports.NavBrand = _NavBrand3['default'];

	var _NavbarBrand2 = __webpack_require__(717);

	var _NavbarBrand3 = _interopRequireDefault(_NavbarBrand2);

	exports.NavbarBrand = _NavbarBrand3['default'];

	var _NavDropdown2 = __webpack_require__(721);

	var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

	exports.NavDropdown = _NavDropdown3['default'];

	var _NavItem2 = __webpack_require__(722);

	var _NavItem3 = _interopRequireDefault(_NavItem2);

	exports.NavItem = _NavItem3['default'];

	var _Overlay2 = __webpack_require__(723);

	var _Overlay3 = _interopRequireDefault(_Overlay2);

	exports.Overlay = _Overlay3['default'];

	var _OverlayTrigger2 = __webpack_require__(732);

	var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

	exports.OverlayTrigger = _OverlayTrigger3['default'];

	var _PageHeader2 = __webpack_require__(733);

	var _PageHeader3 = _interopRequireDefault(_PageHeader2);

	exports.PageHeader = _PageHeader3['default'];

	var _PageItem2 = __webpack_require__(734);

	var _PageItem3 = _interopRequireDefault(_PageItem2);

	exports.PageItem = _PageItem3['default'];

	var _Pager2 = __webpack_require__(735);

	var _Pager3 = _interopRequireDefault(_Pager2);

	exports.Pager = _Pager3['default'];

	var _Pagination2 = __webpack_require__(736);

	var _Pagination3 = _interopRequireDefault(_Pagination2);

	exports.Pagination = _Pagination3['default'];

	var _Panel2 = __webpack_require__(739);

	var _Panel3 = _interopRequireDefault(_Panel2);

	exports.Panel = _Panel3['default'];

	var _PanelGroup2 = __webpack_require__(629);

	var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

	exports.PanelGroup = _PanelGroup3['default'];

	var _Popover2 = __webpack_require__(740);

	var _Popover3 = _interopRequireDefault(_Popover2);

	exports.Popover = _Popover3['default'];

	var _ProgressBar2 = __webpack_require__(741);

	var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

	exports.ProgressBar = _ProgressBar3['default'];

	var _ResponsiveEmbed2 = __webpack_require__(742);

	var _ResponsiveEmbed3 = _interopRequireDefault(_ResponsiveEmbed2);

	exports.ResponsiveEmbed = _ResponsiveEmbed3['default'];

	var _Row2 = __webpack_require__(743);

	var _Row3 = _interopRequireDefault(_Row2);

	exports.Row = _Row3['default'];

	var _SafeAnchor2 = __webpack_require__(634);

	var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

	exports.SafeAnchor = _SafeAnchor3['default'];

	var _SplitButton3 = __webpack_require__(744);

	var _SplitButton4 = _interopRequireDefault(_SplitButton3);

	exports.SplitButton = _SplitButton4['default'];

	var _SplitButton5 = _interopRequireDefault(_SplitButton3);

	exports.SplitButton = _SplitButton5['default'];

	var _Tab2 = __webpack_require__(746);

	var _Tab3 = _interopRequireDefault(_Tab2);

	exports.Tab = _Tab3['default'];

	var _Table2 = __webpack_require__(747);

	var _Table3 = _interopRequireDefault(_Table2);

	exports.Table = _Table3['default'];

	var _Tabs2 = __webpack_require__(748);

	var _Tabs3 = _interopRequireDefault(_Tabs2);

	exports.Tabs = _Tabs3['default'];

	var _Thumbnail2 = __webpack_require__(749);

	var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

	exports.Thumbnail = _Thumbnail3['default'];

	var _Tooltip2 = __webpack_require__(750);

	var _Tooltip3 = _interopRequireDefault(_Tooltip2);

	exports.Tooltip = _Tooltip3['default'];

	var _Well2 = __webpack_require__(751);

	var _Well3 = _interopRequireDefault(_Well2);

	exports.Well = _Well3['default'];

	var _Collapse2 = __webpack_require__(647);

	var _Collapse3 = _interopRequireDefault(_Collapse2);

	exports.Collapse = _Collapse3['default'];

	var _Fade2 = __webpack_require__(549);

	var _Fade3 = _interopRequireDefault(_Fade2);

	exports.Fade = _Fade3['default'];

	var _FormControls2 = __webpack_require__(705);

	var _FormControls = _interopRequireWildcard(_FormControls2);

	exports.FormControls = _FormControls;
	var utils = {
	  bootstrapUtils: _utilsBootstrapUtils2['default'],
	  childrenValueInputValidation: _utilsChildrenValueInputValidation2['default'],
	  createChainedFunction: _utilsCreateChainedFunction2['default'],
	  ValidComponentChildren: _utilsValidComponentChildren2['default']
	};
	exports.utils = utils;

/***/ },
/* 624 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;
	exports['default'] = valueValidation;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactPropTypesLibSinglePropFrom = __webpack_require__(626);

	var _reactPropTypesLibSinglePropFrom2 = _interopRequireDefault(_reactPropTypesLibSinglePropFrom);

	function valueValidation(props, propName, componentName) {
	  var error = _reactPropTypesLibSinglePropFrom2['default']('children', 'value')(props, propName, componentName);

	  if (!error) {
	    error = _react2['default'].PropTypes.node(props, propName, componentName);
	  }

	  return error;
	}

	module.exports = exports['default'];

/***/ },
/* 626 */
/***/ function(module, exports) {

	/**
	 * Checks if only one of the listed properties is in use. An error is given
	 * if multiple have a value
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */
	'use strict';

	exports.__esModule = true;
	exports['default'] = createSinglePropFromChecker;

	function createSinglePropFromChecker() {
	  for (var _len = arguments.length, arrOfProps = Array(_len), _key = 0; _key < _len; _key++) {
	    arrOfProps[_key] = arguments[_key];
	  }

	  function validate(props, propName) {
	    var usedPropCount = arrOfProps.map(function (listedProp) {
	      return props[listedProp];
	    }).reduce(function (acc, curr) {
	      return acc + (curr !== undefined ? 1 : 0);
	    }, 0);

	    if (usedPropCount > 1) {
	      var first = arrOfProps[0];
	      var others = arrOfProps.slice(1);

	      var message = others.join(', ') + ' and ' + first;
	      return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
	    }
	  }
	  return validate;
	}

	module.exports = exports['default'];

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	/**
	 * Maps children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The mapFunction provided index will be normalised to the components mapped,
	 * so an invalid component would not increase the index.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.map(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      var lastIndex = index;
	      index++;
	      return func.call(context, child, lastIndex);
	    }

	    return child;
	  });
	}

	/**
	 * Iterates through children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child with the index reflecting the position relative to "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      func.call(context, child, index);
	      index++;
	    }
	  });
	}

	/**
	 * Count the number of "valid components" in the Children container.
	 *
	 * @param {?*} children Children tree container.
	 * @returns {number}
	 */
	function numberOfValidComponents(children) {
	  var count = 0;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      count++;
	    }
	  });

	  return count;
	}

	/**
	 * Determine if the Child container has one or more "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @returns {boolean}
	 */
	function hasValidComponent(children) {
	  var hasValid = false;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (!hasValid && _react2['default'].isValidElement(child)) {
	      hasValid = true;
	    }
	  });

	  return hasValid;
	}

	function find(children, finder) {
	  var child = undefined;

	  forEachValidComponents(children, function (c, idx) {
	    if (!child && finder(c, idx, children)) {
	      child = c;
	    }
	  });

	  return child;
	}

	/**
	 * Finds children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child with the index reflecting the position relative to "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} findFunc.
	 * @param {*} findContext Context for findContext.
	 * @returns {array} of children that meet the findFunc return statement
	 */
	function findValidComponents(children, func, context) {
	  var index = 0;
	  var returnChildren = [];

	  _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      if (func.call(context, child, index)) {
	        returnChildren.push(child);
	      }
	      index++;
	    }
	  });

	  return returnChildren;
	}

	exports['default'] = {
	  map: mapValidComponents,
	  forEach: forEachValidComponents,
	  numberOf: numberOfValidComponents,
	  find: find,
	  findValidComponents: findValidComponents,
	  hasValidComponent: hasValidComponent
	};
	module.exports = exports['default'];

/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _PanelGroup = __webpack_require__(629);

	var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

	var Accordion = _react2['default'].createClass({
	  displayName: 'Accordion',

	  render: function render() {
	    return _react2['default'].createElement(
	      _PanelGroup2['default'],
	      _extends({}, this.props, { accordion: true }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Accordion;
	module.exports = exports['default'];

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var PanelGroup = _react2['default'].createClass({
	  displayName: 'PanelGroup',

	  propTypes: {
	    accordion: _react2['default'].PropTypes.bool,
	    activeKey: _react2['default'].PropTypes.any,
	    className: _react2['default'].PropTypes.string,
	    children: _react2['default'].PropTypes.node,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    onSelect: _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      accordion: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey;

	    return {
	      activeKey: defaultActiveKey
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var _props = this.props;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['className']);

	    if (this.props.accordion) {
	      props.role = 'tablist';
	    }
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
	      _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
	    );
	  },

	  renderPanel: function renderPanel(child, index) {
	    var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

	    var props = {
	      bsStyle: child.props.bsStyle || this.props.bsStyle,
	      key: child.key ? child.key : index,
	      ref: child.ref
	    };

	    if (this.props.accordion) {
	      props.headerRole = 'tab';
	      props.panelRole = 'tabpanel';
	      props.collapsible = true;
	      props.expanded = child.props.eventKey === activeKey;
	      props.onSelect = this.handleSelect;
	    }

	    return _react.cloneElement(child, props);
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(e, key) {
	    e.preventDefault();

	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(key);
	      this._isChanging = false;
	    }

	    if (this.state.activeKey === key) {
	      key = null;
	    }

	    this.setState({
	      activeKey: key
	    });
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('panel-group', PanelGroup);
	module.exports = exports['default'];

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var Alert = _react2['default'].createClass({
	  displayName: 'Alert',

	  propTypes: {
	    onDismiss: _react2['default'].PropTypes.func,
	    dismissAfter: _react2['default'].PropTypes.number,
	    closeLabel: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeLabel: 'Close Alert'
	    };
	  },

	  renderDismissButton: function renderDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close',
	        onClick: this.props.onDismiss,
	        'aria-hidden': 'true',
	        tabIndex: '-1' },
	      _react2['default'].createElement(
	        'span',
	        null,
	        '×'
	      )
	    );
	  },

	  renderSrOnlyDismissButton: function renderSrOnlyDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close sr-only',
	        onClick: this.props.onDismiss },
	      this.props.closeLabel
	    );
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var isDismissable = !!this.props.onDismiss;

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'dismissable')] = isDismissable;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { role: 'alert', className: _classnames2['default'](this.props.className, classes) }),
	      isDismissable ? this.renderDismissButton() : null,
	      this.props.children,
	      isDismissable ? this.renderSrOnlyDismissButton() : null
	    );
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.dismissAfter && this.props.onDismiss) {
	      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.dismissTimer);
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _styleMaps.State.INFO, _utilsBootstrapUtils.bsClass('alert', Alert));
	module.exports = exports['default'];

/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Badge = _react2['default'].createClass({
	  displayName: 'Badge',

	  propTypes: {
	    pullRight: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      pullRight: false,
	      bsClass: 'badge'
	    };
	  },

	  hasContent: function hasContent() {
	    return _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || _react2['default'].Children.count(this.props.children) > 1 || typeof this.props.children === 'string' || typeof this.props.children === 'number';
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {
	      'pull-right': this.props.pullRight
	    }, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = this.hasContent(), _classes);
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Badge;
	module.exports = exports['default'];

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var Breadcrumb = _react2['default'].createClass({
	  displayName: 'Breadcrumb',

	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'breadcrumb'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['className']);

	    return _react2['default'].createElement(
	      'ol',
	      _extends({}, props, {
	        role: 'navigation',
	        'aria-label': 'breadcrumbs',
	        className: _classnames2['default'](className, this.props.bsClass) }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderBreadcrumbItem)
	    );
	  },

	  renderBreadcrumbItem: function renderBreadcrumbItem(child, index) {
	    return _react.cloneElement(child, { key: child.key || index });
	  }
	});

	exports['default'] = Breadcrumb;
	module.exports = exports['default'];

/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var BreadcrumbItem = _react2['default'].createClass({
	  displayName: 'BreadcrumbItem',

	  propTypes: {
	    /**
	     * If set to true, renders `span` instead of `a`
	     */
	    active: _react2['default'].PropTypes.bool,
	    /**
	     * HTML id for the wrapper `li` element
	     */
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    /**
	     * HTML id for the inner `a` element
	     */
	    linkId: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    /**
	     * `href` attribute for the inner `a` element
	     */
	    href: _react2['default'].PropTypes.string,
	    /**
	     * `title` attribute for the inner `a` element
	     */
	    title: _react2['default'].PropTypes.node,
	    /**
	     * `target` attribute for the inner `a` element
	     */
	    target: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var active = _props.active;
	    var className = _props.className;
	    var id = _props.id;
	    var linkId = _props.linkId;
	    var children = _props.children;
	    var href = _props.href;
	    var title = _props.title;
	    var target = _props.target;

	    var props = _objectWithoutProperties(_props, ['active', 'className', 'id', 'linkId', 'children', 'href', 'title', 'target']);

	    var linkProps = {
	      href: href,
	      title: title,
	      target: target,
	      id: linkId
	    };

	    return _react2['default'].createElement(
	      'li',
	      { id: id, className: _classnames2['default'](className, { active: active }) },
	      active ? _react2['default'].createElement(
	        'span',
	        props,
	        children
	      ) : _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, props, linkProps),
	        children
	      )
	    );
	  }
	});

	exports['default'] = BreadcrumbItem;
	module.exports = exports['default'];

/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	/**
	 * Note: This is intended as a stop-gap for accessibility concerns that the
	 * Bootstrap CSS does not address as they have styled anchors and not buttons
	 * in many cases.
	 */

	var SafeAnchor = (function (_React$Component) {
	  _inherits(SafeAnchor, _React$Component);

	  function SafeAnchor(props) {
	    _classCallCheck(this, SafeAnchor);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  SafeAnchor.prototype.handleClick = function handleClick(event) {
	    if (this.props.href === undefined) {
	      event.preventDefault();
	    }
	  };

	  SafeAnchor.prototype.render = function render() {
	    return _react2['default'].createElement('a', _extends({ role: this.props.href ? undefined : 'button'
	    }, this.props, {
	      onClick: _utilsCreateChainedFunction2['default'](this.props.onClick, this.handleClick),
	      href: this.props.href || '' }));
	  };

	  return SafeAnchor;
	})(_react2['default'].Component);

	exports['default'] = SafeAnchor;

	SafeAnchor.propTypes = {
	  href: _react2['default'].PropTypes.string,
	  onClick: _react2['default'].PropTypes.func
	};
	module.exports = exports['default'];

/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibAll = __webpack_require__(636);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var ButtonGroup = _react2['default'].createClass({
	  displayName: 'ButtonGroup',

	  propTypes: {
	    vertical: _react2['default'].PropTypes.bool,
	    justified: _react2['default'].PropTypes.bool,
	    /**
	     * Display block buttons, only useful when used with the "vertical" prop.
	     * @type {bool}
	     */
	    block: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
	      if (props.block && !props.vertical) {
	        return new Error('The block property requires the vertical property to be set to have any effect');
	      }
	    })
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      block: false,
	      justified: false,
	      vertical: false
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = !this.props.vertical;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'vertical')] = this.props.vertical;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

	    // this is annoying, since the class is `btn-block` not `btn-group-block`
	    classes[_utilsBootstrapUtils2['default'].prefix(_Button2['default'].defaultProps, 'block')] = this.props.block;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('btn-group', ButtonGroup);
	module.exports = exports['default'];

/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = all;

	var _common = __webpack_require__(548);

	function all() {
	  for (var _len = arguments.length, propTypes = Array(_len), _key = 0; _key < _len; _key++) {
	    propTypes[_key] = arguments[_key];
	  }

	  if (propTypes === undefined) {
	    throw new Error('No validations provided');
	  }

	  if (propTypes.some(function (propType) {
	    return typeof propType !== 'function';
	  })) {
	    throw new Error('Invalid arguments, must be functions');
	  }

	  if (propTypes.length === 0) {
	    throw new Error('No validations provided');
	  }

	  function validate(props, propName, componentName) {
	    for (var i = 0; i < propTypes.length; i++) {
	      var result = propTypes[i](props, propName, componentName);

	      if (result !== undefined && result !== null) {
	        return result;
	      }
	    }
	  }

	  return _common.createChainableTypeChecker(validate);
	}

	module.exports = exports['default'];

/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var _FormGroup = __webpack_require__(638);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _InputBase2 = __webpack_require__(639);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(625);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var ButtonInput = (function (_InputBase) {
	  _inherits(ButtonInput, _InputBase);

	  function ButtonInput() {
	    _classCallCheck(this, ButtonInput);

	    _InputBase.apply(this, arguments);
	  }

	  ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
	    var _props = this.props;
	    var bsStyle = _props.bsStyle;
	    var value = _props.value;

	    var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      other,
	      children
	    );
	  };

	  ButtonInput.prototype.renderInput = function renderInput() {
	    var _props2 = this.props;
	    var children = _props2.children;
	    var value = _props2.value;

	    var other = _objectWithoutProperties(_props2, ['children', 'value']);

	    var val = children ? children : value;
	    return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
	  };

	  return ButtonInput;
	})(_InputBase3['default']);

	ButtonInput.types = _Button2['default'].types;

	ButtonInput.defaultProps = {
	  type: 'button'
	};

	ButtonInput.propTypes = {
	  type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
	  bsStyle: function bsStyle() {
	    // defer to Button propTypes of bsStyle
	    return null;
	  },
	  children: _utilsChildrenValueInputValidation2['default'],
	  value: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = ButtonInput;
	module.exports = exports['default'];

/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var FormGroup = (function (_React$Component) {
	  _inherits(FormGroup, _React$Component);

	  function FormGroup() {
	    _classCallCheck(this, FormGroup);

	    _React$Component.apply(this, arguments);
	  }

	  FormGroup.prototype.render = function render() {
	    var classes = {
	      'form-group': !this.props.standalone,
	      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
	      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
	      'has-feedback': this.props.hasFeedback,
	      'has-success': this.props.bsStyle === 'success',
	      'has-warning': this.props.bsStyle === 'warning',
	      'has-error': this.props.bsStyle === 'error'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes, this.props.groupClassName) },
	      this.props.children
	    );
	  };

	  return FormGroup;
	})(_react2['default'].Component);

	FormGroup.defaultProps = {
	  hasFeedback: false,
	  standalone: false
	};

	FormGroup.propTypes = {
	  standalone: _react2['default'].PropTypes.bool,
	  hasFeedback: _react2['default'].PropTypes.bool,
	  bsSize: function bsSize(props) {
	    if (props.standalone && props.bsSize !== undefined) {
	      return new Error('bsSize will not be used when `standalone` is set.');
	    }

	    return _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']).apply(null, arguments);
	  },
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  groupClassName: _react2['default'].PropTypes.string
	};

	exports['default'] = FormGroup;
	module.exports = exports['default'];

/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _FormGroup = __webpack_require__(638);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _Glyphicon = __webpack_require__(640);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var InputBase = (function (_React$Component) {
	  _inherits(InputBase, _React$Component);

	  function InputBase() {
	    _classCallCheck(this, InputBase);

	    _React$Component.apply(this, arguments);
	  }

	  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
	    return this.refs.input;
	  };

	  InputBase.prototype.getValue = function getValue() {
	    if (this.props.type === 'static') {
	      return this.props.value;
	    } else if (this.props.type) {
	      if (this.props.type === 'select' && this.props.multiple) {
	        return this.getSelectedOptions();
	      }
	      return this.getInputDOMNode().value;
	    }
	    throw new Error('Cannot use getValue without specifying input type.');
	  };

	  InputBase.prototype.getChecked = function getChecked() {
	    return this.getInputDOMNode().checked;
	  };

	  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
	    var values = [];

	    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
	      if (option.selected) {
	        var value = option.getAttribute('value') || option.innerHtml;
	        values.push(value);
	      }
	    });

	    return values;
	  };

	  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
	    return this.props.type === 'checkbox' || this.props.type === 'radio';
	  };

	  InputBase.prototype.isFile = function isFile() {
	    return this.props.type === 'file';
	  };

	  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
	    var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonBefore' },
	      this.props.addonBefore
	    ) : null;

	    var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonAfter' },
	      this.props.addonAfter
	    ) : null;

	    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonBefore
	    ) : null;

	    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonAfter
	    ) : null;

	    var inputGroupClassName = undefined;
	    switch (this.props.bsSize) {
	      case 'small':
	        inputGroupClassName = 'input-group-sm';break;
	      case 'large':
	        inputGroupClassName = 'input-group-lg';break;
	      default:
	    }

	    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
	      addonBefore,
	      buttonBefore,
	      children,
	      addonAfter,
	      buttonAfter
	    ) : children;
	  };

	  InputBase.prototype.renderIcon = function renderIcon() {
	    if (this.props.hasFeedback) {
	      if (this.props.feedbackIcon) {
	        return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
	      }

	      switch (this.props.bsStyle) {
	        case 'success':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
	        case 'warning':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
	        case 'error':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
	        default:
	          return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
	      }
	    } else {
	      return null;
	    }
	  };

	  InputBase.prototype.renderHelp = function renderHelp() {
	    return this.props.help ? _react2['default'].createElement(
	      'span',
	      { className: 'help-block', key: 'help' },
	      this.props.help
	    ) : null;
	  };

	  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
	    var classes = {
	      'checkbox': this.props.type === 'checkbox',
	      'radio': this.props.type === 'radio'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
	      children
	    );
	  };

	  InputBase.prototype.renderWrapper = function renderWrapper(children) {
	    return this.props.wrapperClassName ? _react2['default'].createElement(
	      'div',
	      { className: this.props.wrapperClassName, key: 'wrapper' },
	      children
	    ) : children;
	  };

	  InputBase.prototype.renderLabel = function renderLabel(children) {
	    var classes = {
	      'control-label': !this.isCheckboxOrRadio()
	    };
	    classes[this.props.labelClassName] = this.props.labelClassName;

	    return this.props.label ? _react2['default'].createElement(
	      'label',
	      { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
	      children,
	      this.props.label
	    ) : children;
	  };

	  InputBase.prototype.renderInput = function renderInput() {
	    if (!this.props.type) {
	      return this.props.children;
	    }

	    switch (this.props.type) {
	      case 'select':
	        return _react2['default'].createElement(
	          'select',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
	          this.props.children
	        );
	      case 'textarea':
	        return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
	      case 'static':
	        return _react2['default'].createElement(
	          'p',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	          this.props.value
	        );
	      default:
	        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
	        return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
	    }
	  };

	  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      this.props,
	      children
	    );
	  };

	  InputBase.prototype.renderChildren = function renderChildren() {
	    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
	  };

	  InputBase.prototype.render = function render() {
	    var children = this.renderChildren();
	    return this.renderFormGroup(children);
	  };

	  return InputBase;
	})(_react2['default'].Component);

	InputBase.propTypes = {
	  type: _react2['default'].PropTypes.string,
	  label: _react2['default'].PropTypes.node,
	  help: _react2['default'].PropTypes.node,
	  addonBefore: _react2['default'].PropTypes.node,
	  addonAfter: _react2['default'].PropTypes.node,
	  buttonBefore: _react2['default'].PropTypes.node,
	  buttonAfter: _react2['default'].PropTypes.node,
	  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  hasFeedback: _react2['default'].PropTypes.bool,
	  feedbackIcon: _react2['default'].PropTypes.node,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  groupClassName: _react2['default'].PropTypes.string,
	  wrapperClassName: _react2['default'].PropTypes.string,
	  labelClassName: _react2['default'].PropTypes.string,
	  multiple: _react2['default'].PropTypes.bool,
	  disabled: _react2['default'].PropTypes.bool,
	  value: _react2['default'].PropTypes.any
	};

	InputBase.defaultProps = {
	  disabled: false,
	  hasFeedback: false,
	  multiple: false
	};

	exports['default'] = InputBase;
	module.exports = exports['default'];

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Glyphicon = _react2['default'].createClass({
	  displayName: 'Glyphicon',

	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _react2['default'].PropTypes.string,
	    /**
	     * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
	     */
	    glyph: _react2['default'].PropTypes.string.isRequired,
	    /**
	     * Adds 'form-control-feedback' class
	     * @private
	     */
	    formControlFeedback: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'glyphicon',
	      formControlFeedback: false
	    };
	  },

	  render: function render() {
	    var _classNames;

	    var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: className }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Glyphicon;
	module.exports = exports['default'];

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var ButtonToolbar = _react2['default'].createClass({
	  displayName: 'ButtonToolbar',

	  propTypes: {
	    bsSize: _Button2['default'].propTypes.bsSize
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'btn-toolbar'
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        role: 'toolbar',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = ButtonToolbar;
	module.exports = exports['default'];

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _Glyphicon = __webpack_require__(640);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Carousel = _react2['default'].createClass({
	  displayName: 'Carousel',

	  propTypes: {
	    slide: _react2['default'].PropTypes.bool,
	    indicators: _react2['default'].PropTypes.bool,
	    interval: _react2['default'].PropTypes.number,
	    controls: _react2['default'].PropTypes.bool,
	    pauseOnHover: _react2['default'].PropTypes.bool,
	    wrap: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    onSlideEnd: _react2['default'].PropTypes.func,
	    activeIndex: _react2['default'].PropTypes.number,
	    defaultActiveIndex: _react2['default'].PropTypes.number,
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    prevIcon: _react2['default'].PropTypes.node,
	    nextIcon: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'carousel',
	      slide: true,
	      interval: 5000,
	      pauseOnHover: true,
	      wrap: true,
	      indicators: true,
	      controls: true,
	      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
	      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
	      previousActiveIndex: null,
	      direction: null
	    };
	  },

	  getDirection: function getDirection(prevIndex, index) {
	    if (prevIndex === index) {
	      return null;
	    }

	    return prevIndex > index ? 'prev' : 'next';
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var activeIndex = this.getActiveIndex();

	    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
	      clearTimeout(this.timeout);
	      this.setState({
	        previousActiveIndex: activeIndex,
	        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
	      });
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    this.waitForNext();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timeout);
	  },

	  next: function next(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() + 1;
	    var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	    if (index > count - 1) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = 0;
	    }

	    this.handleSelect(index, 'next');
	  },

	  prev: function prev(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() - 1;

	    if (index < 0) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = _utilsValidComponentChildren2['default'].numberOf(this.props.children) - 1;
	    }

	    this.handleSelect(index, 'prev');
	  },

	  pause: function pause() {
	    this.isPaused = true;
	    clearTimeout(this.timeout);
	  },

	  play: function play() {
	    this.isPaused = false;
	    this.waitForNext();
	  },

	  waitForNext: function waitForNext() {
	    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
	      this.timeout = setTimeout(this.next, this.props.interval);
	    }
	  },

	  handleMouseOver: function handleMouseOver() {
	    if (this.props.pauseOnHover) {
	      this.pause();
	    }
	  },

	  handleMouseOut: function handleMouseOut() {
	    if (this.isPaused) {
	      this.play();
	    }
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes.slide = this.props.slide, _classes);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes),
	        onMouseOver: this.handleMouseOver,
	        onMouseOut: this.handleMouseOut }),
	      this.props.indicators ? this.renderIndicators() : null,
	      _react2['default'].createElement(
	        'div',
	        {
	          ref: 'inner',
	          className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner')
	        },
	        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
	      ),
	      this.props.controls ? this.renderControls() : null
	    );
	  },

	  renderPrev: function renderPrev() {
	    var classes = 'left ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

	    return _react2['default'].createElement(
	      'a',
	      { className: classes, href: '#prev', key: 0, onClick: this.prev },
	      this.props.prevIcon
	    );
	  },

	  renderNext: function renderNext() {
	    var classes = 'right ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

	    return _react2['default'].createElement(
	      'a',
	      { className: classes, href: '#next', key: 1, onClick: this.next },
	      this.props.nextIcon
	    );
	  },

	  renderControls: function renderControls() {
	    if (!this.props.wrap) {
	      var activeIndex = this.getActiveIndex();
	      var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
	    }

	    return [this.renderPrev(), this.renderNext()];
	  },

	  renderIndicator: function renderIndicator(child, index) {
	    var className = index === this.getActiveIndex() ? 'active' : null;

	    return _react2['default'].createElement('li', {
	      key: index,
	      className: className,
	      onClick: this.handleSelect.bind(this, index, null) });
	  },

	  renderIndicators: function renderIndicators() {
	    var _this = this;

	    var indicators = [];
	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
	      indicators.push(_this.renderIndicator(child, index),

	      // Force whitespace between indicator elements, bootstrap
	      // requires this for correct spacing of elements.
	      ' ');
	    }, this);

	    return _react2['default'].createElement(
	      'ol',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'indicators') },
	      indicators
	    );
	  },

	  getActiveIndex: function getActiveIndex() {
	    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
	  },

	  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
	    var _this2 = this;

	    this.setState({
	      previousActiveIndex: null,
	      direction: null
	    }, function () {
	      _this2.waitForNext();

	      if (_this2.props.onSlideEnd) {
	        _this2.props.onSlideEnd();
	      }
	    });
	  },

	  renderItem: function renderItem(child, index) {
	    var activeIndex = this.getActiveIndex();
	    var isActive = index === activeIndex;
	    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

	    return _react.cloneElement(child, {
	      active: isActive,
	      ref: child.ref,
	      key: child.key ? child.key : index,
	      index: index,
	      animateOut: isPreviousActive,
	      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
	      direction: this.state.direction,
	      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
	    });
	  },

	  handleSelect: function handleSelect(index, direction) {
	    clearTimeout(this.timeout);

	    if (this.isMounted()) {
	      var previousActiveIndex = this.getActiveIndex();
	      direction = direction || this.getDirection(previousActiveIndex, index);

	      if (this.props.onSelect) {
	        this.props.onSelect(index, direction);
	      }

	      if (this.props.activeIndex == null && index !== previousActiveIndex) {
	        if (this.state.previousActiveIndex != null) {
	          // If currently animating don't activate the new index.
	          // TODO: look into queuing this canceled call and
	          // animating after the current animation has ended.
	          return;
	        }

	        this.setState({
	          activeIndex: index,
	          previousActiveIndex: previousActiveIndex,
	          direction: direction
	        });
	      }
	    }
	  }
	});

	exports['default'] = Carousel;
	module.exports = exports['default'];

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsTransitionEvents = __webpack_require__(644);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var CarouselItem = _react2['default'].createClass({
	  displayName: 'CarouselItem',

	  propTypes: {
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    animateIn: _react2['default'].PropTypes.bool,
	    animateOut: _react2['default'].PropTypes.bool,
	    caption: _react2['default'].PropTypes.node,
	    index: _react2['default'].PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      direction: null
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsStyle: 'carousel',
	      active: false,
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  handleAnimateOutEnd: function handleAnimateOutEnd() {
	    if (this.props.onAnimateOutEnd && this.isMounted()) {
	      this.props.onAnimateOutEnd(this.props.index);
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.active !== nextProps.active) {
	      this.setState({
	        direction: null
	      });
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    if (!this.props.active && prevProps.active) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.handleAnimateOutEnd);
	    }

	    if (this.props.active !== prevProps.active) {
	      setTimeout(this.startAnimation, 20);
	    }
	  },

	  startAnimation: function startAnimation() {
	    if (!this.isMounted()) {
	      return;
	    }

	    this.setState({
	      direction: this.props.direction === 'prev' ? 'right' : 'left'
	    });
	  },

	  render: function render() {
	    var classes = {
	      item: true,
	      active: this.props.active && !this.props.animateIn || this.props.animateOut,
	      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
	      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
	    };

	    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
	      classes[this.state.direction] = true;
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children,
	      this.props.caption ? this.renderCaption() : null
	    );
	  },

	  renderCaption: function renderCaption() {
	    var classes = _utilsBootstrapUtils2['default'].prefix(this.props, 'caption');

	    return _react2['default'].createElement(
	      'div',
	      { className: classes },
	      this.props.caption
	    );
	  }
	});

	exports['default'] = CarouselItem;
	module.exports = exports['default'];

/***/ },
/* 644 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This file contains a modified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
	 *
	 * This source code is licensed under the BSD-style license found here:
	 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
	 * An additional grant of patent rights can be found here:
	 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
	 */

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    // eslint-disable-line guard-for-in
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports['default'] = ReactTransitionEvents;
	module.exports = exports['default'];

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _styleMaps = __webpack_require__(533);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Col = _react2['default'].createClass({
	  displayName: 'Col',

	  propTypes: {
	    /**
	     * The number of columns you wish to span
	     *
	     * for Extra small devices Phones (<768px)
	     *
	     * class-prefix `col-xs-`
	     */
	    xs: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Small devices Tablets (≥768px)
	     *
	     * class-prefix `col-sm-`
	     */
	    sm: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Medium devices Desktops (≥992px)
	     *
	     * class-prefix `col-md-`
	     */
	    md: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Large devices Desktops (≥1200px)
	     *
	     * class-prefix `col-lg-`
	     */
	    lg: _react2['default'].PropTypes.number,
	    /**
	     * Hide column
	     *
	     * on Extra small devices Phones
	     *
	     * adds class `hidden-xs`
	     */
	    xsHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Small devices Tablets
	     *
	     * adds class `hidden-sm`
	     */
	    smHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Medium devices Desktops
	     *
	     * adds class `hidden-md`
	     */
	    mdHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Large devices Desktops
	     *
	     * adds class `hidden-lg`
	     */
	    lgHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Move columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-offset-`
	     */
	    xsOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-offset-`
	     */
	    smOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-offset-`
	     */
	    mdOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-offset-`
	     */
	    lgOffset: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-push-`
	     */
	    xsPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-push-`
	     */
	    smPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-push-`
	     */
	    mdPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-push-`
	     */
	    lgPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-pull-`
	     */
	    xsPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-pull-`
	     */
	    smPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-pull-`
	     */
	    mdPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-pull-`
	     */
	    lgPull: _react2['default'].PropTypes.number,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var ComponentClass = this.props.componentClass;
	    var classes = {};

	    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
	      var size = _styleMaps2['default'].SIZES[key];
	      var prop = size;
	      var classPart = size + '-';

	      if (_this.props[prop]) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      classes['hidden-' + size] = _this.props[size + 'Hidden'];

	      prop = size + 'Offset';
	      classPart = size + '-offset-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      prop = size + 'Push';
	      classPart = size + '-push-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      prop = size + 'Pull';
	      classPart = size + '-pull-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }
	    }, this);

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Col;
	module.exports = exports['default'];

/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Collapse = __webpack_require__(647);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsDeprecationWarning = __webpack_require__(648);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var CollapsibleNav = _react2['default'].createClass({
	  displayName: 'CollapsibleNav',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func,
	    activeHref: _react2['default'].PropTypes.string,
	    activeKey: _react2['default'].PropTypes.any,
	    collapsible: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      collapsible: false,
	      expanded: false
	    };
	  },

	  render: function render() {
	    /*
	     * this.props.collapsible is set in NavBar when an eventKey is supplied.
	     */
	    var classes = this.props.collapsible ? 'navbar-collapse' : null;
	    var renderChildren = this.props.collapsible ? this.renderCollapsibleNavChildren : this.renderChildren;

	    var nav = _react2['default'].createElement(
	      'div',
	      { eventKey: this.props.eventKey, className: _classnames2['default'](this.props.className, classes) },
	      _utilsValidComponentChildren2['default'].map(this.props.children, renderChildren)
	    );

	    if (this.props.collapsible) {
	      return _react2['default'].createElement(
	        _Collapse2['default'],
	        { 'in': this.props.expanded },
	        nav
	      );
	    }
	    return nav;
	  },

	  getChildActiveProp: function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  },

	  renderChildren: function renderChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      ref: 'nocollapse_' + key,
	      key: key,
	      navItem: true
	    });
	  },

	  renderCollapsibleNavChildren: function renderCollapsibleNavChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      ref: 'collapsible_' + key,
	      key: key,
	      navItem: true
	    });
	  }
	});

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(CollapsibleNav, 'CollapsibleNav', 'Navbar.Collapse', 'http://react-bootstrap.github.io/components.html#navbars');
	module.exports = exports['default'];

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _domHelpersStyle = __webpack_require__(575);

	var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactOverlaysLibTransition = __webpack_require__(558);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _reactPropTypesLibDeprecated = __webpack_require__(560);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var capitalize = function capitalize(str) {
	  return str[0].toUpperCase() + str.substr(1);
	};

	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	var triggerBrowserReflow = function triggerBrowserReflow(node) {
	  return node.offsetHeight;
	};

	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};

	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + capitalize(dimension)];
	  var margins = MARGINS[dimension];

	  return value + parseInt(_domHelpersStyle2['default'](elem, margins[0]), 10) + parseInt(_domHelpersStyle2['default'](elem, margins[1]), 10);
	}

	var Collapse = (function (_React$Component) {
	  _inherits(Collapse, _React$Component);

	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);

	    _React$Component.call(this, props, context);

	    this.onEnterListener = this.handleEnter.bind(this);
	    this.onEnteringListener = this.handleEntering.bind(this);
	    this.onEnteredListener = this.handleEntered.bind(this);
	    this.onExitListener = this.handleExit.bind(this);
	    this.onExitingListener = this.handleExiting.bind(this);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Collapse.prototype.render = function render() {
	    var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
	    var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
	    var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
	    var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
	    var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({
	        ref: 'transition'
	      }, this.props, {
	        'aria-expanded': this.props.role ? this.props['in'] : null,
	        className: _classnames2['default'](this.props.className, { width: this._dimension() === 'width' }),
	        exitedClassName: 'collapse',
	        exitingClassName: 'collapsing',
	        enteredClassName: 'collapse in',
	        enteringClassName: 'collapsing',
	        onEnter: enter,
	        onEntering: entering,
	        onEntered: entered,
	        onExit: exit,
	        onExiting: exiting,
	        onExited: this.props.onExited
	      }),
	      this.props.children
	    );
	  };

	  /* -- Expanding -- */

	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };

	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };

	  /* -- Collapsing -- */

	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	  };

	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();

	    triggerBrowserReflow(elem);
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };

	  // for testing

	  Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
	    return this.refs.transition;
	  };

	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + capitalize(dimension)] + 'px';
	  };

	  return Collapse;
	})(_react2['default'].Component);

	Collapse.propTypes = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _react2['default'].PropTypes.func,

	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _react2['default'].PropTypes.func,

	  /**
	   * ARIA role of collapsible element
	   */
	  role: _react2['default'].PropTypes.string
	};

	Collapse.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,

	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};

	exports['default'] = Collapse;
	module.exports = exports['default'];

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	var warned = {};

	function deprecationWarning(oldname, newname, link) {
	  var message = undefined;

	  if (typeof oldname === 'object') {
	    message = oldname.message;
	  } else {
	    message = oldname + ' is deprecated. Use ' + newname + ' instead.';

	    if (link) {
	      message += '\nYou can read more about it at ' + link;
	    }
	  }

	  if (warned[message]) {
	    return;
	  }

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](false, message) : undefined;
	  warned[message] = true;
	}

	deprecationWarning.wrapper = function (Component) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return (function (_Component) {
	    _inherits(DeprecatedComponent, _Component);

	    function DeprecatedComponent() {
	      _classCallCheck(this, DeprecatedComponent);

	      _Component.apply(this, arguments);
	    }

	    DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
	      deprecationWarning.apply(undefined, args);

	      if (_Component.prototype.componentWillMount) {
	        var _Component$prototype$componentWillMount;

	        for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          methodArgs[_key2] = arguments[_key2];
	        }

	        (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
	      }
	    };

	    return DeprecatedComponent;
	  })(Component);
	};

	exports['default'] = deprecationWarning;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _domHelpersActiveElement = __webpack_require__(592);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryContains = __webpack_require__(545);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _keycode = __webpack_require__(650);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _lodashCompatCollectionFind = __webpack_require__(651);

	var _lodashCompatCollectionFind2 = _interopRequireDefault(_lodashCompatCollectionFind);

	var _lodashCompatObjectOmit = __webpack_require__(682);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactPropTypesLibAll = __webpack_require__(636);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(691);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var _uncontrollable = __webpack_require__(692);

	var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _ButtonGroup = __webpack_require__(635);

	var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

	var _DropdownMenu = __webpack_require__(695);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _DropdownToggle = __webpack_require__(698);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsCustomPropTypes = __webpack_require__(699);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var TOGGLE_REF = 'toggle-btn';
	var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
	var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

	var Dropdown = (function (_React$Component) {
	  _inherits(Dropdown, _React$Component);

	  function Dropdown(props) {
	    _classCallCheck(this, Dropdown);

	    _React$Component.call(this, props);

	    this.Toggle = _DropdownToggle2['default'];

	    this.toggleOpen = this.toggleOpen.bind(this);
	    this.handleClick = this.handleClick.bind(this);
	    this.handleKeyDown = this.handleKeyDown.bind(this);
	    this.handleClose = this.handleClose.bind(this);
	    this.extractChildren = this.extractChildren.bind(this);

	    this.refineMenu = this.refineMenu.bind(this);
	    this.refineToggle = this.refineToggle.bind(this);

	    this.childExtractors = [{
	      key: 'toggle',
	      matches: function matches(child) {
	        return child.props.bsRole === TOGGLE_ROLE;
	      },
	      refine: this.refineToggle
	    }, {
	      key: 'menu',
	      exclusive: true,
	      matches: function matches(child) {
	        return child.props.bsRole === MENU_ROLE;
	      },
	      refine: this.refineMenu
	    }];

	    this.state = {};

	    this.lastOpenEventType = null;
	  }

	  Dropdown.prototype.componentDidMount = function componentDidMount() {
	    this.focusNextOnOpen();
	  };

	  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    if (!nextProps.open && this.props.open) {
	      this._focusInDropdown = _domHelpersQueryContains2['default'](_reactDom2['default'].findDOMNode(this.refs.menu), _domHelpersActiveElement2['default'](document));
	    }
	  };

	  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.open && !prevProps.open) {
	      this.focusNextOnOpen();
	    }

	    if (!this.props.open && prevProps.open) {
	      // if focus hasn't already moved from the menu lets return it
	      // to the toggle
	      if (this._focusInDropdown) {
	        this._focusInDropdown = false;
	        this.focus();
	      }
	    }
	  };

	  Dropdown.prototype.render = function render() {
	    var _rootClasses;

	    var children = this.extractChildren();
	    var Component = this.props.componentClass;

	    var props = _lodashCompatObjectOmit2['default'](this.props, ['id', 'bsClass', 'role']);
	    var className = _utilsBootstrapUtils2['default'].prefix(this.props);

	    var rootClasses = (_rootClasses = {
	      open: this.props.open,
	      disabled: this.props.disabled
	    }, _rootClasses[className] = !this.props.dropup, _rootClasses.dropup = this.props.dropup, _rootClasses);

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, props, {
	        tabIndex: '-1',
	        className: _classnames2['default'](this.props.className, rootClasses)
	      }),
	      children
	    );
	  };

	  Dropdown.prototype.toggleOpen = function toggleOpen() {
	    var eventType = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

	    var open = !this.props.open;

	    if (open) {
	      this.lastOpenEventType = eventType;
	    }

	    if (this.props.onToggle) {
	      this.props.onToggle(open);
	    }
	  };

	  Dropdown.prototype.handleClick = function handleClick() {
	    if (this.props.disabled) {
	      return;
	    }

	    this.toggleOpen('click');
	  };

	  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
	    if (this.props.disabled) {
	      return;
	    }

	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        if (!this.props.open) {
	          this.toggleOpen('keydown');
	        } else if (this.refs.menu.focusNext) {
	          this.refs.menu.focusNext();
	        }
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.handleClose(event);
	        break;
	      default:
	    }
	  };

	  Dropdown.prototype.handleClose = function handleClose() {
	    if (!this.props.open) {
	      return;
	    }

	    this.toggleOpen();
	  };

	  Dropdown.prototype.focusNextOnOpen = function focusNextOnOpen() {
	    var menu = this.refs.menu;

	    if (!menu.focusNext) {
	      return;
	    }

	    if (this.lastOpenEventType === 'keydown' || this.props.role === 'menuitem') {
	      menu.focusNext();
	    }
	  };

	  Dropdown.prototype.focus = function focus() {
	    var toggle = _reactDom2['default'].findDOMNode(this.refs[TOGGLE_REF]);

	    if (toggle && toggle.focus) {
	      toggle.focus();
	    }
	  };

	  Dropdown.prototype.extractChildren = function extractChildren() {
	    var _this = this;

	    var open = !!this.props.open;
	    var seen = {};

	    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
	      var extractor = _lodashCompatCollectionFind2['default'](_this.childExtractors, function (x) {
	        return x.matches(child);
	      });

	      if (extractor) {
	        if (seen[extractor.key]) {
	          return false;
	        }

	        seen[extractor.key] = extractor.exclusive;
	        child = extractor.refine(child, open);
	      }

	      return child;
	    });
	  };

	  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
	    var menuProps = {
	      ref: 'menu',
	      open: open,
	      labelledBy: this.props.id,
	      pullRight: this.props.pullRight,
	      bsClass: this.props.bsClass
	    };

	    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

	    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

	    return _react.cloneElement(menu, menuProps, menu.props.children);
	  };

	  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
	    var toggleProps = {
	      open: open,
	      id: this.props.id,
	      ref: TOGGLE_REF,
	      role: this.props.role
	    };

	    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

	    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

	    return _react.cloneElement(toggle, toggleProps, toggle.props.children);
	  };

	  return Dropdown;
	})(_react2['default'].Component);

	Dropdown.Toggle = _DropdownToggle2['default'];

	Dropdown.TOGGLE_REF = TOGGLE_REF;
	Dropdown.TOGGLE_ROLE = TOGGLE_ROLE;
	Dropdown.MENU_ROLE = MENU_ROLE;

	Dropdown.defaultProps = {
	  componentClass: _ButtonGroup2['default'],
	  bsClass: 'dropdown'
	};

	Dropdown.propTypes = {

	  bsClass: _react2['default'].PropTypes.string,

	  /**
	   * The menu will open above the dropdown button, instead of below it.
	   */
	  dropup: _react2['default'].PropTypes.bool,

	  /**
	   * An html id attribute, necessary for assistive technologies, such as screen readers.
	   * @type {string|number}
	   * @required
	   */
	  id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	  componentClass: _reactPropTypesLibElementType2['default'],

	  /**
	   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
	   * @type {node}
	   */
	  children: _reactPropTypesLibAll2['default'](_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)),

	  /**
	   * Whether or not component is disabled.
	   */
	  disabled: _react2['default'].PropTypes.bool,

	  /**
	   * Align the menu to the right side of the Dropdown toggle
	   */
	  pullRight: _react2['default'].PropTypes.bool,

	  /**
	   * Whether or not the Dropdown is visible.
	   *
	   * @controllable onToggle
	   */
	  open: _react2['default'].PropTypes.bool,

	  /**
	   * A callback fired when the Dropdown closes.
	   */
	  onClose: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
	   * `open` value.
	   *
	   * ```js
	   * function(Boolean isOpen) {}
	   * ```
	   * @controllable open
	   */
	  onToggle: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when a menu item is selected.
	   *
	   * ```js
	   * function(Object event, Any eventKey)
	   * ```
	   */
	  onSelect: _react2['default'].PropTypes.func,

	  /**
	   * If `'menuitem'`, causes the dropdown to behave like a menu item rather than
	   * a menu button.
	   */
	  role: _react2['default'].PropTypes.string
	};

	Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

	Dropdown.Toggle = _DropdownToggle2['default'];
	Dropdown.Menu = _DropdownMenu2['default'];

	exports['default'] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 650 */
/***/ function(module, exports) {

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
	    if (hasKeyCode) searchInput = hasKeyCode
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]

	  // Everything else (cast to string)
	  var search = String(searchInput)

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)

	  return undefined
	}

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	}

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	}


	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i

	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111

	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */

	var names = exports.names = exports.title = {} // title for backward compat

	// Create reverse mapping
	for (i in codes) names[codes[i]] = i

	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias]
	}


/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(652),
	    createFind = __webpack_require__(657);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias detect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.result(_.find(users, function(chr) {
	 *   return chr.age < 40;
	 * }), 'user');
	 * // => 'barney'
	 *
	 * // using the `_.matches` callback shorthand
	 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.result(_.find(users, 'active', false), 'user');
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.result(_.find(users, 'active'), 'user');
	 * // => 'barney'
	 */
	var find = createFind(baseEach);

	module.exports = find;


/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(653),
	    createBaseEach = __webpack_require__(656);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(616),
	    keys = __webpack_require__(654);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(607),
	    isArrayLike = __webpack_require__(597),
	    isObject = __webpack_require__(601),
	    shimKeys = __webpack_require__(655),
	    support = __webpack_require__(604);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(596),
	    isArray = __webpack_require__(606),
	    isIndex = __webpack_require__(620),
	    isLength = __webpack_require__(605),
	    isString = __webpack_require__(602),
	    keysIn = __webpack_require__(618);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(598),
	    isLength = __webpack_require__(605),
	    toObject = __webpack_require__(600);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(658),
	    baseFind = __webpack_require__(680),
	    baseFindIndex = __webpack_require__(681),
	    isArray = __webpack_require__(606);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(eachFunc, fromRight) {
	  return function(collection, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    if (isArray(collection)) {
	      var index = baseFindIndex(collection, predicate, fromRight);
	      return index > -1 ? collection[index] : undefined;
	    }
	    return baseFind(collection, predicate, eachFunc);
	  };
	}

	module.exports = createFind;


/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(659),
	    baseMatchesProperty = __webpack_require__(671),
	    bindCallback = __webpack_require__(611),
	    identity = __webpack_require__(612),
	    property = __webpack_require__(678);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(660),
	    getMatchData = __webpack_require__(668),
	    toObject = __webpack_require__(600);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      object = toObject(object);
	      return object[key] === value && (value !== undefined || (key in object));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(661),
	    toObject = __webpack_require__(600);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(662),
	    isObject = __webpack_require__(601),
	    isObjectLike = __webpack_require__(603);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	var equalArrays = __webpack_require__(663),
	    equalByTag = __webpack_require__(665),
	    equalObjects = __webpack_require__(666),
	    isArray = __webpack_require__(606),
	    isHostObject = __webpack_require__(610),
	    isTypedArray = __webpack_require__(667);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(664);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ },
/* 664 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 665 */
/***/ function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(654);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(605),
	    isObjectLike = __webpack_require__(603);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(669),
	    pairs = __webpack_require__(670);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(601);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(654),
	    toObject = __webpack_require__(600);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(672),
	    baseIsEqual = __webpack_require__(661),
	    baseSlice = __webpack_require__(673),
	    isArray = __webpack_require__(606),
	    isKey = __webpack_require__(674),
	    isStrictComparable = __webpack_require__(669),
	    last = __webpack_require__(675),
	    toObject = __webpack_require__(600),
	    toPath = __webpack_require__(676);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(600);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  object = toObject(object);
	  if (pathKey !== undefined && pathKey in object) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = toObject(object)[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 673 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(606),
	    toObject = __webpack_require__(600);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ },
/* 675 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(677),
	    isArray = __webpack_require__(606);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 677 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(599),
	    basePropertyDeep = __webpack_require__(679),
	    isKey = __webpack_require__(674);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(672),
	    toPath = __webpack_require__(676);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 680 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	 * without support for callback shorthands and `this` binding, which iterates
	 * over `collection` using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}

	module.exports = baseFind;


/***/ },
/* 681 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(683),
	    baseDifference = __webpack_require__(684),
	    baseFlatten = __webpack_require__(594),
	    bindCallback = __webpack_require__(611),
	    keysIn = __webpack_require__(618),
	    pickByArray = __webpack_require__(613),
	    pickByCallback = __webpack_require__(614),
	    restParam = __webpack_require__(621);

	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable properties of `object` that are not omitted.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to omit, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.omit(object, 'age');
	 * // => { 'user': 'fred' }
	 *
	 * _.omit(object, _.isNumber);
	 * // => { 'user': 'fred' }
	 */
	var omit = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  if (typeof props[0] != 'function') {
	    var props = arrayMap(baseFlatten(props), String);
	    return pickByArray(object, baseDifference(keysIn(object), props));
	  }
	  var predicate = bindCallback(props[0], props[1], 3);
	  return pickByCallback(object, function(value, key, object) {
	    return !predicate(value, key, object);
	  });
	});

	module.exports = omit;


/***/ },
/* 683 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(685),
	    cacheIndexOf = __webpack_require__(687),
	    createCache = __webpack_require__(688);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.difference` which accepts a single array
	 * of values to exclude.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values) {
	  var length = array ? array.length : 0,
	      result = [];

	  if (!length) {
	    return result;
	  }
	  var index = -1,
	      indexOf = baseIndexOf,
	      isCommon = true,
	      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	      valuesLength = values.length;

	  if (cache) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	    values = cache;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index];

	    if (isCommon && value === value) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === value) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (indexOf(values, value, 0) < 0) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(686);

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 686 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(601);

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;


/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(689),
	    getNative = __webpack_require__(607);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(690),
	    getNative = __webpack_require__(607);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(601);

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;


/***/ },
/* 691 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = isRequiredForA11y;

	function isRequiredForA11y(propType) {
	  return function validate(props, propName, componentName) {
	    if (props[propName] == null) {
	      return new Error("The prop '" + propName + "' is required to make '" + componentName + "' accessible" + " for users using assistive technologies such as screen readers");
	    }

	    return propType(props, propName, componentName);
	  };
	}

	module.exports = exports["default"];

/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createUncontrollable = __webpack_require__(693);

	var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var mixin = {
	  shouldComponentUpdate: function shouldComponentUpdate() {
	    //let the forceUpdate trigger the update
	    return !this._notifying;
	  }
	};

	function set(component, propName, handler, value, args) {
	  if (handler) {
	    component._notifying = true;
	    handler.call.apply(handler, [component, value].concat(args));
	    component._notifying = false;
	  }

	  component._values[propName] = value;

	  if (component.isMounted()) component.forceUpdate();
	}

	exports.default = (0, _createUncontrollable2.default)([mixin], set);
	module.exports = exports['default'];

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createUncontrollable;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(536);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _utils = __webpack_require__(694);

	var utils = _interopRequireWildcard(_utils);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function createUncontrollable(mixins, set) {

	  return uncontrollable;

	  function uncontrollable(Component, controlledValues) {
	    var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

	    var displayName = Component.displayName || Component.name || 'Component',
	        basePropTypes = utils.getType(Component).propTypes,
	        isCompositeComponent = utils.isReactComponent(Component),
	        propTypes;

	    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

	    (0, _invariant2.default)(isCompositeComponent || !methods.length, '[uncontrollable] stateless function components cannot pass through methods ' + 'becasue they have no associated instances. Check component: ' + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '));
	    methods = utils.transform(methods, function (obj, method) {
	      obj[method] = function () {
	        var _refs$inner;

	        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
	      };
	    }, {});

	    var component = _react2.default.createClass(_extends({

	      displayName: 'Uncontrolled(' + displayName + ')',

	      mixins: mixins,

	      propTypes: propTypes

	    }, methods, {
	      componentWillMount: function componentWillMount() {
	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        this._values = utils.transform(keys, function (values, key) {
	          values[key] = props[utils.defaultKey(key)];
	        }, {});
	      },


	      /**
	       * If a prop switches from controlled to Uncontrolled
	       * reset its value to the defaultValue
	       */
	      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        var _this = this;

	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        keys.forEach(function (key) {
	          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
	            _this._values[key] = nextProps[utils.defaultKey(key)];
	          }
	        });
	      },
	      render: function render() {
	        var _this2 = this;

	        var newProps = {};
	        var _props = this.props;
	        var valueLink = _props.valueLink;
	        var checkedLink = _props.checkedLink;

	        var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

	        utils.each(controlledValues, function (handle, propName) {
	          var linkPropName = utils.getLinkName(propName),
	              prop = _this2.props[propName];

	          if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
	            prop = _this2.props[linkPropName].value;
	          }

	          newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

	          newProps[handle] = setAndNotify.bind(_this2, propName);
	        });

	        newProps = _extends({}, props, newProps, {
	          ref: isCompositeComponent ? 'inner' : null
	        });

	        return _react2.default.createElement(Component, newProps);
	      }
	    }));

	    component.ControlledComponent = Component;

	    /**
	     * useful when wrapping a Component and you want to control
	     * everything
	     */
	    component.deferControlTo = function (newComponent) {
	      var additions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	      var nextMethods = arguments[2];

	      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
	    };

	    return component;

	    function setAndNotify(propName, value) {
	      var linkName = utils.getLinkName(propName),
	          handler = this.props[controlledValues[propName]];

	      if (linkName && isProp(this.props, linkName) && !handler) {
	        handler = this.props[linkName].requestChange;
	      }

	      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	        args[_key - 2] = arguments[_key];
	      }

	      set(this, propName, handler, value, args);
	    }

	    function isProp(props, prop) {
	      return props[prop] !== undefined;
	    }
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.version = undefined;
	exports.customPropType = customPropType;
	exports.uncontrolledPropTypes = uncontrolledPropTypes;
	exports.getType = getType;
	exports.getValue = getValue;
	exports.getLinkName = getLinkName;
	exports.defaultKey = defaultKey;
	exports.chain = chain;
	exports.transform = transform;
	exports.each = each;
	exports.isReactComponent = isReactComponent;
	exports.has = has;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(536);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function customPropType(handler, propType, name) {

	  return function (props, propName) {

	    if (props[propName] !== undefined) {
	      if (!props[handler]) {
	        return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
	      }

	      return propType && propType(props, propName, name);
	    }
	  };
	}

	function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
	  var propTypes = {};

	  if (process.env.NODE_ENV !== 'production' && basePropTypes) {
	    transform(controlledValues, function (obj, handler, prop) {
	      var type = basePropTypes[prop];

	      (0, _invariant2.default)(typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

	      obj[prop] = customPropType(handler, type, displayName);

	      if (type !== undefined) obj[defaultKey(prop)] = type;
	    }, propTypes);
	  }

	  return propTypes;
	}

	var version = exports.version = _react2.default.version.split('.').map(parseFloat);

	function getType(component) {
	  if (version[0] >= 15 || version[0] === 0 && version[1] >= 13) return component;

	  return component.type;
	}

	function getValue(props, name) {
	  var linkPropName = getLinkName(name);

	  if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

	  return props[name];
	}

	function isProp(props, prop) {
	  return props[prop] !== undefined;
	}

	function getLinkName(name) {
	  return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
	}

	function defaultKey(key) {
	  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
	}

	function chain(thisArg, a, b) {
	  return function chainedFunction() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    a && a.call.apply(a, [thisArg].concat(args));
	    b && b.call.apply(b, [thisArg].concat(args));
	  };
	}

	function transform(obj, cb, seed) {
	  each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
	  return seed;
	}

	function each(obj, cb, thisArg) {
	  if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

	  for (var key in obj) {
	    if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
	  }
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	function isReactComponent(component) {
	  return !!(component && component.prototype && component.prototype.isReactComponent);
	}

	function has(o, k) {
	  return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _keycode = __webpack_require__(650);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactOverlaysLibRootCloseWrapper = __webpack_require__(696);

	var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var DropdownMenu = (function (_React$Component) {
	  _inherits(DropdownMenu, _React$Component);

	  function DropdownMenu(props) {
	    _classCallCheck(this, DropdownMenu);

	    _React$Component.call(this, props);

	    this.focusNext = this.focusNext.bind(this);
	    this.focusPrevious = this.focusPrevious.bind(this);
	    this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
	    this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

	    this.handleKeyDown = this.handleKeyDown.bind(this);
	  }

	  DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {
	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        this.focusNext();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.up:
	        this.focusPrevious();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.props.onClose(event);
	        break;
	      default:
	    }
	  };

	  DropdownMenu.prototype.focusNext = function focusNext() {
	    var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex.items;
	    var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

	    if (items.length === 0) {
	      return;
	    }

	    if (activeItemIndex === items.length - 1) {
	      items[0].focus();
	      return;
	    }

	    items[activeItemIndex + 1].focus();
	  };

	  DropdownMenu.prototype.focusPrevious = function focusPrevious() {
	    var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex2.items;
	    var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

	    if (activeItemIndex === 0) {
	      items[items.length - 1].focus();
	      return;
	    }

	    items[activeItemIndex - 1].focus();
	  };

	  DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
	    var items = this.getFocusableMenuItems();
	    var activeElement = document.activeElement;
	    var activeItemIndex = items.indexOf(activeElement);

	    return { items: items, activeItemIndex: activeItemIndex };
	  };

	  DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
	    var menuNode = _reactDom2['default'].findDOMNode(this);

	    if (menuNode === undefined) {
	      return [];
	    }

	    return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
	  };

	  DropdownMenu.prototype.render = function render() {
	    var _classes,
	        _this = this;

	    var _props = this.props;
	    var children = _props.children;
	    var onSelect = _props.onSelect;
	    var pullRight = _props.pullRight;
	    var className = _props.className;
	    var labelledBy = _props.labelledBy;
	    var open = _props.open;
	    var onClose = _props.onClose;

	    var props = _objectWithoutProperties(_props, ['children', 'onSelect', 'pullRight', 'className', 'labelledBy', 'open', 'onClose']);

	    var items = _utilsValidComponentChildren2['default'].map(children, function (child) {
	      var childProps = child.props || {};

	      return _react2['default'].cloneElement(child, {
	        onKeyDown: _utilsCreateChainedFunction2['default'](childProps.onKeyDown, _this.handleKeyDown),
	        onSelect: _utilsCreateChainedFunction2['default'](childProps.onSelect, onSelect)
	      }, childProps.children);
	    });

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu')] = true, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu-right')] = pullRight, _classes);

	    var list = _react2['default'].createElement(
	      'ul',
	      _extends({
	        className: _classnames2['default'](className, classes),
	        role: 'menu',
	        'aria-labelledby': labelledBy
	      }, props),
	      items
	    );

	    if (open) {
	      list = _react2['default'].createElement(
	        _reactOverlaysLibRootCloseWrapper2['default'],
	        { noWrap: true, onRootClose: onClose },
	        list
	      );
	    }

	    return list;
	  };

	  return DropdownMenu;
	})(_react2['default'].Component);

	DropdownMenu.defaultProps = {
	  bsRole: 'menu',
	  bsClass: 'dropdown',
	  pullRight: false
	};

	DropdownMenu.propTypes = {
	  open: _react2['default'].PropTypes.bool,
	  pullRight: _react2['default'].PropTypes.bool,
	  onClose: _react2['default'].PropTypes.func,
	  labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  onSelect: _react2['default'].PropTypes.func
	};

	exports['default'] = DropdownMenu;
	module.exports = exports['default'];

/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsAddEventListener = __webpack_require__(590);

	var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

	var _utilsCreateChainedFunction = __webpack_require__(697);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsOwnerDocument = __webpack_require__(572);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	// TODO: Consider using an ES6 symbol here, once we use babel-runtime.
	var CLICK_WAS_INSIDE = '__click_was_inside';

	var counter = 0;

	function getSuppressRootClose() {
	  var id = CLICK_WAS_INSIDE + '_' + counter++;
	  return {
	    id: id,
	    suppressRootClose: function suppressRootClose(event) {
	      // Tag the native event to prevent the root close logic on document click.
	      // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
	      // which is only supported in IE >= 9.
	      event.nativeEvent[id] = true;
	    }
	  };
	}

	var RootCloseWrapper = (function (_React$Component) {
	  function RootCloseWrapper(props) {
	    _classCallCheck(this, RootCloseWrapper);

	    _React$Component.call(this, props);

	    this.handleDocumentClick = this.handleDocumentClick.bind(this);
	    this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);

	    var _getSuppressRootClose = getSuppressRootClose();

	    var id = _getSuppressRootClose.id;
	    var suppressRootClose = _getSuppressRootClose.suppressRootClose;

	    this._suppressRootId = id;

	    this._suppressRootCloseHandler = suppressRootClose;
	  }

	  _inherits(RootCloseWrapper, _React$Component);

	  RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
	    var doc = _utilsOwnerDocument2['default'](this);

	    this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

	    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
	  };

	  RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
	    // This is now the native event.
	    if (e[this._suppressRootId]) {
	      return;
	    }

	    this.props.onRootClose();
	  };

	  RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
	    if (e.keyCode === 27) {
	      this.props.onRootClose();
	    }
	  };

	  RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	    }

	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	    }
	  };

	  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
	    this.bindRootCloseHandlers();
	  };

	  RootCloseWrapper.prototype.render = function render() {
	    var _props = this.props;
	    var noWrap = _props.noWrap;
	    var children = _props.children;

	    var child = _react2['default'].Children.only(children);

	    if (noWrap) {
	      return _react2['default'].cloneElement(child, {
	        onClick: _utilsCreateChainedFunction2['default'](this._suppressRootCloseHandler, child.props.onClick)
	      });
	    }

	    // Wrap the child in a new element, so the child won't have to handle
	    // potentially combining multiple onClick listeners.
	    return _react2['default'].createElement(
	      'div',
	      { onClick: this._suppressRootCloseHandler },
	      child
	    );
	  };

	  RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
	    // We can't use a ref to identify the wrapped child, since we might be
	    // stealing the ref from the owner, but we know exactly the DOM structure
	    // that will be rendered, so we can just do this to get the child's DOM
	    // node for doing size calculations in OverlayMixin.
	    var node = _reactDom2['default'].findDOMNode(this);
	    return this.props.noWrap ? node : node.firstChild;
	  };

	  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  };

	  return RootCloseWrapper;
	})(_react2['default'].Component);

	exports['default'] = RootCloseWrapper;

	RootCloseWrapper.displayName = 'RootCloseWrapper';

	RootCloseWrapper.propTypes = {
	  onRootClose: _react2['default'].PropTypes.func.isRequired,

	  /**
	   * Passes the suppress click handler directly to the child component instead
	   * of placing it on a wrapping div. Only use when you can be sure the child
	   * properly handle the click event.
	   */
	  noWrap: _react2['default'].PropTypes.bool
	};
	module.exports = exports['default'];

/***/ },
/* 697 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var CARET = _react2['default'].createElement(
	  'span',
	  null,
	  ' ',
	  _react2['default'].createElement('span', { className: 'caret' })
	);

	var DropdownToggle = (function (_React$Component) {
	  _inherits(DropdownToggle, _React$Component);

	  function DropdownToggle() {
	    _classCallCheck(this, DropdownToggle);

	    _React$Component.apply(this, arguments);
	  }

	  DropdownToggle.prototype.render = function render() {
	    var caret = this.props.noCaret ? null : CARET;

	    var classes = {
	      'dropdown-toggle': true
	    };

	    var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        className: _classnames2['default'](classes, this.props.className),
	        type: 'button',
	        'aria-haspopup': true,
	        'aria-expanded': this.props.open }),
	      this.props.children || this.props.title,
	      caret
	    );
	  };

	  return DropdownToggle;
	})(_react2['default'].Component);

	exports['default'] = DropdownToggle;

	DropdownToggle.defaultProps = {
	  open: false,
	  useAnchor: false,
	  bsRole: 'toggle'
	};

	DropdownToggle.propTypes = {
	  bsRole: _react2['default'].PropTypes.string,
	  noCaret: _react2['default'].PropTypes.bool,
	  open: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.string,
	  useAnchor: _react2['default'].PropTypes.bool
	};

	DropdownToggle.isToggle = true;
	DropdownToggle.titleProp = 'title';
	DropdownToggle.onClickProp = 'onClick';
	module.exports = exports['default'];

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _reactPropTypesLibCommon = __webpack_require__(548);

	var _childrenToArray = __webpack_require__(700);

	var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

	exports['default'] = {

	  requiredRoles: function requiredRoles() {
	    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
	      roles[_key] = arguments[_key];
	    }

	    return _reactPropTypesLibCommon.createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
	      var missing = undefined;
	      var children = _childrenToArray2['default'](props.children);

	      var inRole = function inRole(role, child) {
	        return role === child.props.bsRole;
	      };

	      roles.every(function (role) {
	        if (!children.some(function (child) {
	          return inRole(role, child);
	        })) {
	          missing = role;
	          return false;
	        }
	        return true;
	      });

	      if (missing) {
	        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  },

	  exclusiveRoles: function exclusiveRoles() {
	    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      roles[_key2] = arguments[_key2];
	    }

	    return _reactPropTypesLibCommon.createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
	      var children = _childrenToArray2['default'](props.children);
	      var duplicate = undefined;

	      roles.every(function (role) {
	        var childrenWithRole = children.filter(function (child) {
	          return child.props.bsRole === role;
	        });

	        if (childrenWithRole.length > 1) {
	          duplicate = role;
	          return false;
	        }
	        return true;
	      });

	      if (duplicate) {
	        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;
	exports['default'] = childrenAsArray;

	var _ValidComponentChildren = __webpack_require__(627);

	var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

	function childrenAsArray(children) {
	  var result = [];

	  if (children === undefined) {
	    return result;
	  }

	  _ValidComponentChildren2['default'].forEach(children, function (child) {
	    result.push(child);
	  });

	  return result;
	}

	module.exports = exports['default'];

/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Dropdown = __webpack_require__(649);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _lodashCompatObjectOmit = __webpack_require__(682);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _lodashCompatObjectPick = __webpack_require__(593);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var DropdownButton = (function (_React$Component) {
	  _inherits(DropdownButton, _React$Component);

	  function DropdownButton() {
	    _classCallCheck(this, DropdownButton);

	    _React$Component.apply(this, arguments);
	  }

	  DropdownButton.prototype.render = function render() {
	    var _props = this.props;
	    var bsStyle = _props.bsStyle;
	    var bsSize = _props.bsSize;
	    var disabled = _props.disabled;
	    var _props2 = this.props;
	    var title = _props2.title;
	    var children = _props2.children;

	    var props = _objectWithoutProperties(_props2, ['title', 'children']);

	    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
	    var toggleProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      _extends({}, dropdownProps, {
	        bsSize: bsSize,
	        bsStyle: bsStyle
	      }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        _extends({}, toggleProps, {
	          disabled: disabled
	        }),
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return DropdownButton;
	})(_react2['default'].Component);

	DropdownButton.propTypes = _extends({
	  disabled: _react2['default'].PropTypes.bool,
	  bsStyle: _Button2['default'].propTypes.bsStyle,
	  bsSize: _Button2['default'].propTypes.bsSize,

	  /**
	   * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
	   */
	  noCaret: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.node.isRequired

	}, _Dropdown2['default'].propTypes);

	DropdownButton.defaultProps = {
	  disabled: false,
	  pullRight: false,
	  dropup: false,
	  navItem: false,
	  noCaret: false
	};

	exports['default'] = DropdownButton;
	module.exports = exports['default'];

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Grid = _react2['default'].createClass({
	  displayName: 'Grid',

	  propTypes: {
	    /**
	     * Turn any fixed-width grid layout into a full-width layout by this property.
	     *
	     * Adds `container-fluid` class.
	     */
	    fluid: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div',
	      fluid: false
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;
	    var className = this.props.fluid ? 'container-fluid' : 'container';

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, className) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Grid;
	module.exports = exports['default'];

/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Image = _react2['default'].createClass({
	  displayName: 'Image',

	  propTypes: {

	    /**
	     * Sets image as responsive image
	     */
	    responsive: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as rounded
	     */
	    rounded: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as circle
	     */
	    circle: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as thumbnail
	     */
	    thumbnail: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      responsive: false,
	      rounded: false,
	      circle: false,
	      thumbnail: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'img-responsive': this.props.responsive,
	      'img-rounded': this.props.rounded,
	      'img-circle': this.props.circle,
	      'img-thumbnail': this.props.thumbnail
	    };

	    return _react2['default'].createElement('img', _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }));
	  }
	});

	exports['default'] = Image;
	module.exports = exports['default'];

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	var _interopRequireWildcard = __webpack_require__(624)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _InputBase2 = __webpack_require__(639);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _FormControls = __webpack_require__(705);

	var FormControls = _interopRequireWildcard(_FormControls);

	var _utilsDeprecationWarning = __webpack_require__(648);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var Input = (function (_InputBase) {
	  _inherits(Input, _InputBase);

	  function Input() {
	    _classCallCheck(this, Input);

	    _InputBase.apply(this, arguments);
	  }

	  Input.prototype.render = function render() {
	    if (this.props.type === 'static') {
	      _utilsDeprecationWarning2['default']('Input type=static', 'FormControls.Static');
	      return _react2['default'].createElement(FormControls.Static, this.props);
	    }

	    return _InputBase.prototype.render.call(this);
	  };

	  return Input;
	})(_InputBase3['default']);

	Input.propTypes = {
	  type: _react2['default'].PropTypes.string
	};

	exports['default'] = Input;
	module.exports = exports['default'];

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _Static2 = __webpack_require__(706);

	var _Static3 = _interopRequireDefault(_Static2);

	exports.Static = _Static3['default'];

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _InputBase2 = __webpack_require__(639);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(625);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var Static = (function (_InputBase) {
	  _inherits(Static, _InputBase);

	  function Static() {
	    _classCallCheck(this, Static);

	    _InputBase.apply(this, arguments);
	  }

	  Static.prototype.getValue = function getValue() {
	    var _props = this.props;
	    var children = _props.children;
	    var value = _props.value;

	    return children ? children : value;
	  };

	  Static.prototype.renderInput = function renderInput() {
	    return _react2['default'].createElement(
	      'p',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	      this.getValue()
	    );
	  };

	  return Static;
	})(_InputBase3['default']);

	Static.propTypes = {
	  value: _utilsChildrenValueInputValidation2['default'],
	  children: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = Static;
	module.exports = exports['default'];

/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	// https://www.npmjs.org/package/react-interpolate-component
	// TODO: Drop this in favor of es6 string interpolation

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var REGEXP = /\%\((.+?)\)s/;

	var Interpolate = _react2['default'].createClass({
	  displayName: 'Interpolate',

	  propTypes: {
	    component: _react2['default'].PropTypes.node,
	    format: _react2['default'].PropTypes.string,
	    unsafe: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      component: 'span',
	      unsafe: false
	    };
	  },

	  render: function render() {
	    var format = _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || typeof this.props.children === 'string' ? this.props.children : this.props.format;
	    var parent = this.props.component;
	    var unsafe = this.props.unsafe === true;
	    var props = _extends({}, this.props);

	    delete props.children;
	    delete props.format;
	    delete props.component;
	    delete props.unsafe;

	    if (unsafe) {
	      var content = format.split(REGEXP).reduce(function (memo, match, index) {
	        var html = undefined;

	        if (index % 2 === 0) {
	          html = match;
	        } else {
	          html = props[match];
	          delete props[match];
	        }

	        if (_react2['default'].isValidElement(html)) {
	          throw new Error('cannot interpolate a React component into unsafe text');
	        }

	        memo += html;

	        return memo;
	      }, '');

	      props.dangerouslySetInnerHTML = { __html: content };

	      return _react2['default'].createElement(parent, props);
	    }
	    var kids = format.split(REGEXP).reduce(function (memo, match, index) {
	      var child = undefined;

	      if (index % 2 === 0) {
	        if (match.length === 0) {
	          return memo;
	        }

	        child = match;
	      } else {
	        child = props[match];
	        delete props[match];
	      }

	      memo.push(child);

	      return memo;
	    }, []);

	    return _react2['default'].createElement(parent, props, kids);
	  }
	});

	exports['default'] = Interpolate;
	module.exports = exports['default'];

/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Jumbotron = _react2['default'].createClass({
	  displayName: 'Jumbotron',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return { componentClass: 'div' };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Jumbotron;
	module.exports = exports['default'];

/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var Label = (function (_React$Component) {
	  _inherits(Label, _React$Component);

	  function Label() {
	    _classCallCheck(this, _Label);

	    _React$Component.apply(this, arguments);
	  }

	  Label.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  };

	  var _Label = Label;
	  Label = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY), _styleMaps.DEFAULT)(Label) || Label;
	  Label = _utilsBootstrapUtils.bsClass('label')(Label) || Label;
	  return Label;
	})(_react2['default'].Component);

	exports['default'] = Label;
	module.exports = exports['default'];

/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _ListGroupItem = __webpack_require__(711);

	var _ListGroupItem2 = _interopRequireDefault(_ListGroupItem);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var ListGroup = (function (_React$Component) {
	  _inherits(ListGroup, _React$Component);

	  function ListGroup() {
	    _classCallCheck(this, ListGroup);

	    _React$Component.apply(this, arguments);
	  }

	  ListGroup.prototype.render = function render() {
	    var _this = this;

	    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
	      return _react.cloneElement(item, { key: item.key ? item.key : index });
	    });

	    if (this.areCustomChildren(items)) {
	      var Component = this.props.componentClass;
	      return _react2['default'].createElement(
	        Component,
	        _extends({}, this.props, {
	          className: _classnames2['default'](this.props.className, 'list-group') }),
	        items
	      );
	    }

	    var shouldRenderDiv = false;

	    if (!this.props.children) {
	      shouldRenderDiv = true;
	    } else {
	      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child) {
	        if (_this.isAnchorOrButton(child.props)) {
	          shouldRenderDiv = true;
	        }
	      });
	    }

	    return shouldRenderDiv ? this.renderDiv(items) : this.renderUL(items);
	  };

	  ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
	    return props.href || props.onClick;
	  };

	  ListGroup.prototype.areCustomChildren = function areCustomChildren(children) {
	    var customChildren = false;

	    _utilsValidComponentChildren2['default'].forEach(children, function (child) {
	      if (child.type !== _ListGroupItem2['default']) {
	        customChildren = true;
	      }
	    }, this);

	    return customChildren;
	  };

	  ListGroup.prototype.renderUL = function renderUL(items) {
	    var listItems = _utilsValidComponentChildren2['default'].map(items, function (item) {
	      return _react.cloneElement(item, { listItem: true });
	    });

	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      listItems
	    );
	  };

	  ListGroup.prototype.renderDiv = function renderDiv(items) {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      items
	    );
	  };

	  return ListGroup;
	})(_react2['default'].Component);

	ListGroup.defaultProps = {
	  componentClass: 'div'
	};

	ListGroup.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  /**
	   * The element for ListGroup if children are
	   * user-defined custom components.
	   * @type {("ul"|"div")}
	   */
	  componentClass: _react2['default'].PropTypes.oneOf(['ul', 'div']),
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	exports['default'] = ListGroup;
	module.exports = exports['default'];

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ListGroupItem = (function (_React$Component) {
	  _inherits(ListGroupItem, _React$Component);

	  function ListGroupItem() {
	    _classCallCheck(this, ListGroupItem);

	    _React$Component.apply(this, arguments);
	  }

	  ListGroupItem.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes.active = this.props.active;
	    classes.disabled = this.props.disabled;

	    if (this.props.href) {
	      return this.renderAnchor(classes);
	    } else if (this.props.onClick) {
	      return this.renderButton(classes);
	    } else if (this.props.listItem) {
	      return this.renderLi(classes);
	    }

	    return this.renderSpan(classes);
	  };

	  ListGroupItem.prototype.renderLi = function renderLi(classes) {
	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderAnchor = function renderAnchor(classes) {
	    return _react2['default'].createElement(
	      'a',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderButton = function renderButton(classes) {
	    return _react2['default'].createElement(
	      'button',
	      _extends({
	        type: 'button'
	      }, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderSpan = function renderSpan(classes) {
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderStructuredContent = function renderStructuredContent() {
	    var header = undefined;
	    var headingClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'heading');

	    if (_react2['default'].isValidElement(this.props.header)) {
	      header = _react.cloneElement(this.props.header, {
	        key: 'header',
	        className: _classnames2['default'](this.props.header.props.className, headingClass)
	      });
	    } else {
	      header = _react2['default'].createElement(
	        'h4',
	        { key: 'header', className: headingClass },
	        this.props.header
	      );
	    }

	    var content = _react2['default'].createElement(
	      'p',
	      { key: 'content', className: _utilsBootstrapUtils2['default'].prefix(this.props, 'text') },
	      this.props.children
	    );

	    return [header, content];
	  };

	  return ListGroupItem;
	})(_react2['default'].Component);

	ListGroupItem.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  active: _react2['default'].PropTypes.any,
	  disabled: _react2['default'].PropTypes.any,
	  header: _react2['default'].PropTypes.node,
	  listItem: _react2['default'].PropTypes.bool,
	  onClick: _react2['default'].PropTypes.func,
	  eventKey: _react2['default'].PropTypes.any,
	  href: _react2['default'].PropTypes.string,
	  target: _react2['default'].PropTypes.string
	};

	ListGroupItem.defaultTypes = {
	  listItem: false
	};

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('list-group-item', ListGroupItem));
	module.exports = exports['default'];

/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibAll = __webpack_require__(636);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var MenuItem = (function (_React$Component) {
	  _inherits(MenuItem, _React$Component);

	  function MenuItem(props) {
	    _classCallCheck(this, MenuItem);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  MenuItem.prototype.handleClick = function handleClick(event) {
	    if (!this.props.href || this.props.disabled) {
	      event.preventDefault();
	    }

	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      this.props.onSelect(event, this.props.eventKey);
	    }
	  };

	  MenuItem.prototype.render = function render() {
	    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

	    if (this.props.divider) {
	      return _react2['default'].createElement('li', { role: 'separator', className: 'divider' });
	    }

	    if (this.props.header) {
	      return _react2['default'].createElement(
	        'li',
	        { role: 'heading', className: headerClass },
	        this.props.children
	      );
	    }

	    var _props = this.props;
	    var className = _props.className;
	    var style = _props.style;
	    var onClick = _props.onClick;

	    var props = _objectWithoutProperties(_props, ['className', 'style', 'onClick']);

	    var classes = {
	      disabled: this.props.disabled,
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { role: 'presentation',
	        className: _classnames2['default'](className, classes),
	        style: style
	      },
	      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
	        role: 'menuitem',
	        tabIndex: '-1',
	        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
	      }))
	    );
	  };

	  return MenuItem;
	})(_react2['default'].Component);

	MenuItem.propTypes = {
	  active: _react2['default'].PropTypes.bool,
	  disabled: _react2['default'].PropTypes.bool,
	  divider: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
	    if (props.divider && props.children) {
	      return new Error('Children will not be rendered for dividers');
	    }
	  }),
	  eventKey: _react2['default'].PropTypes.any,
	  header: _react2['default'].PropTypes.bool,
	  href: _react2['default'].PropTypes.string,
	  target: _react2['default'].PropTypes.string,
	  title: _react2['default'].PropTypes.string,
	  onClick: _react2['default'].PropTypes.func,
	  onKeyDown: _react2['default'].PropTypes.func,
	  onSelect: _react2['default'].PropTypes.func,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	MenuItem.defaultProps = {
	  divider: false,
	  disabled: false,
	  header: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('dropdown', MenuItem);
	module.exports = exports['default'];

/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibAll = __webpack_require__(636);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _reactPropTypesLibDeprecated = __webpack_require__(560);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _Collapse = __webpack_require__(647);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var Nav = (function (_React$Component) {
	  _inherits(Nav, _React$Component);

	  function Nav() {
	    _classCallCheck(this, Nav);

	    _React$Component.apply(this, arguments);
	  }

	  Nav.prototype.render = function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var ulClassName = _props.ulClassName;
	    var id = _props.id;
	    var ulId = _props.ulId;

	    var isNavbar = this.props.navbar != null ? this.props.navbar : this.context.$bs_navbar;
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'stacked')] = this.props.stacked;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

	    if (isNavbar) {
	      var bsClass = this.context.$bs_navbar_bsClass || 'navbar';
	      var navbarRight = this.props.right != null ? this.props.right : this.props.pullRight;

	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'nav')] = true;
	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = navbarRight;
	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = this.props.pullLeft;
	    } else {
	      classes['pull-right'] = this.props.pullRight;
	      classes['pull-left'] = this.props.pullLeft;
	    }

	    var list = _react2['default'].createElement(
	      'ul',
	      _extends({ ref: 'ul'
	      }, this.props, {
	        id: ulId || id,
	        role: this.props.bsStyle === 'tabs' ? 'tablist' : null,
	        className: _classnames2['default'](className, ulClassName, classes)
	      }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem, this)
	    );

	    // TODO remove in 0.29
	    if (this.context.$bs_deprecated_navbar && this.props.collapsible) {
	      list = _react2['default'].createElement(
	        _Collapse2['default'],
	        {
	          'in': this.props.expanded,
	          className: isNavbar ? 'navbar-collapse' : void 0
	        },
	        _react2['default'].createElement(
	          'div',
	          null,
	          list
	        )
	      );
	    }

	    return list;
	  };

	  Nav.prototype.getChildActiveProp = function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  };

	  Nav.prototype.renderNavItem = function renderNavItem(child, index) {
	    return _react.cloneElement(child, {
	      role: this.props.bsStyle === 'tabs' ? 'tab' : null,
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index,
	      navItem: true
	    });
	  };

	  return Nav;
	})(_react2['default'].Component);

	Nav.propTypes = {
	  activeHref: _react2['default'].PropTypes.string,
	  activeKey: _react2['default'].PropTypes.any,

	  stacked: _react2['default'].PropTypes.bool,
	  justified: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (_ref) {
	    var justified = _ref.justified;
	    var navbar = _ref.navbar;
	    return justified && navbar ? Error('justified navbar `Nav`s are not supported') : null;
	  }),
	  onSelect: _react2['default'].PropTypes.func,

	  /**
	   * CSS classes for the wrapper `nav` element
	   */
	  className: _react2['default'].PropTypes.string,
	  /**
	   * HTML id for the wrapper `nav` element
	   */
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  /**
	   * CSS classes for the inner `ul` element
	   *
	   * @deprecated
	   */
	  ulClassName: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `className` now'),
	  /**
	   * HTML id for the inner `ul` element
	   *
	   * @deprecated
	   */

	  ulId: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `id` now'),

	  /**
	   * Apply styling an alignment for use in a Navbar. This prop will be set
	   * automatically when the Nav is used inside a Navbar.
	   */
	  navbar: _react2['default'].PropTypes.bool,
	  eventKey: _react2['default'].PropTypes.any,
	  pullRight: _react2['default'].PropTypes.bool,
	  pullLeft: _react2['default'].PropTypes.bool,

	  right: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use the `pullRight` prop instead'),

	  /**
	   * @private
	   */
	  expanded: _react2['default'].PropTypes.bool,

	  /**
	   * @private
	   */
	  collapsible: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `Navbar.Collapse` instead, to create collapsible Navbars')
	};

	Nav.contextTypes = {
	  $bs_navbar: _react2['default'].PropTypes.bool,
	  $bs_navbar_bsClass: _react2['default'].PropTypes.string,

	  $bs_deprecated_navbar: _react2['default'].PropTypes.bool
	};

	Nav.defaultProps = {
	  justified: false,
	  pullRight: false,
	  pullLeft: false,
	  stacked: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('nav', _utilsBootstrapUtils.bsStyles(['tabs', 'pills'], Nav));
	module.exports = exports['default'];

/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint react/no-multi-comp: 0 */
	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _uncontrollable = __webpack_require__(692);

	var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _reactPropTypesLibDeprecated = __webpack_require__(560);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsDeprecationWarning = __webpack_require__(648);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _Grid = __webpack_require__(702);

	var _Grid2 = _interopRequireDefault(_Grid);

	var _deprecatedNavbar = __webpack_require__(715);

	var _deprecatedNavbar2 = _interopRequireDefault(_deprecatedNavbar);

	var _NavbarBrand = __webpack_require__(717);

	var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

	var _NavbarHeader = __webpack_require__(718);

	var _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);

	var _NavbarToggle = __webpack_require__(719);

	var _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);

	var _NavbarCollapse = __webpack_require__(720);

	var _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var has = function has(obj, key) {
	  return obj && ({}).hasOwnProperty.call(obj, key);
	};

	function shouldRenderOldNavbar(component) {
	  var props = component.props;
	  return has(props, 'brand') || has(props, 'toggleButton') || has(props, 'toggleNavKey') || has(props, 'navExpanded') || has(props, 'defaultNavExpanded') ||
	  // this should be safe b/c the new version requires wrapping in a Header
	  _utilsValidComponentChildren2['default'].findValidComponents(props.children, function (child) {
	    return child.props.bsRole === 'brand';
	  }).length > 0;
	}

	var Navbar = _react2['default'].createClass({
	  displayName: 'Navbar',

	  propTypes: {
	    /**
	     * Create a fixed navbar along the top of the screen, that scrolls with the page
	     */
	    fixedTop: _react2['default'].PropTypes.bool,
	    /**
	     * Create a fixed navbar along the bottom of the screen, that scrolls with the page
	     */
	    fixedBottom: _react2['default'].PropTypes.bool,
	    /**
	     * Create a full-width navbar that scrolls away with the page
	     */
	    staticTop: _react2['default'].PropTypes.bool,
	    /**
	     * An alternative dark visual style for the Navbar
	     */
	    inverse: _react2['default'].PropTypes.bool,
	    /**
	     * Allow the Navbar to fluidly adjust to the page or container width, instead of at the
	     * predefined screen breakpoints
	     */
	    fluid: _react2['default'].PropTypes.bool,

	    /**
	     * Set a custom element for this component.
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    /**
	     * A callback fired when the `<Navbar>` body collapses or expands.
	     * Fired when a `<Navbar.Toggle>` is clicked and called with the new `navExpanded` boolean value.
	     *
	     * @controllable navExpanded
	     */
	    onToggle: _react2['default'].PropTypes.func,

	    /**
	     * Explicitly set the visiblity of the navbar body
	     *
	     * @controllable onToggle
	     */
	    expanded: _react2['default'].PropTypes.bool,

	    /**
	     * @deprecated
	     */
	    navExpanded: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `expanded` and `defaultExpanded` instead.')
	  },

	  childContextTypes: {
	    $bs_navbar: _react.PropTypes.bool,
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_onToggle: _react.PropTypes.func,
	    $bs_navbar_expanded: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'nav',
	      fixedTop: false,
	      fixedBottom: false,
	      staticTop: false,
	      inverse: false,
	      fluid: false
	    };
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_navbar: true,
	      $bs_navbar_bsClass: this.props.bsClass,
	      $bs_navbar_onToggle: this.handleToggle,
	      $bs_navbar_expanded: this.props.expanded
	    };
	  },

	  handleToggle: function handleToggle() {
	    this.props.onToggle(!this.props.expanded);
	  },

	  isNavExpanded: function isNavExpanded() {
	    return !!this.props.expanded;
	  },

	  render: function render() {
	    if (shouldRenderOldNavbar(this)) {
	      _utilsDeprecationWarning2['default']({ message: 'Rendering a deprecated version of the Navbar due to the use of deprecated ' + 'props. Please use the new Navbar api, and remove `toggleButton`, ' + '`toggleNavKey`, `brand`, `navExpanded`, `defaultNavExpanded` props or the ' + 'use of the `<NavBrand>` component outside of a `<Navbar.Header>`. \n\n' + 'for more details see: http://react-bootstrap.github.io/components.html#navbars'
	      });

	      return _react2['default'].createElement(_deprecatedNavbar2['default'], this.props);
	    }

	    var _props = this.props;
	    var fixedTop = _props.fixedTop;
	    var fixedBottom = _props.fixedBottom;
	    var staticTop = _props.staticTop;
	    var inverse = _props.inverse;
	    var ComponentClass = _props.componentClass;
	    var fluid = _props.fluid;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

	    // will result in some false positives but that seems better
	    // than false negatives. strict `undefined` check allows explicit
	    // "nulling" of the role if the user really doesn't want one
	    if (props.role === undefined && ComponentClass !== 'nav') {
	      props.role = 'navigation';
	    }

	    if (inverse) {
	      props.bsStyle = _styleMaps.INVERSE;
	    }

	    var classes = _utilsBootstrapUtils2['default'].getClassSet(props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = fixedTop;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = fixedBottom;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = staticTop;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, props, { className: _classnames2['default'](className, classes) }),
	      _react2['default'].createElement(
	        _Grid2['default'],
	        { fluid: fluid },
	        children
	      )
	    );
	  }
	});

	var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

	Navbar = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', _uncontrollable2['default'](Navbar, { expanded: 'onToggle' })));

	function createSimpleWrapper(tag, suffix, displayName) {
	  var wrapper = function wrapper(_ref, _ref2) {
	    var Tag = _ref.componentClass;
	    var className = _ref.className;

	    var props = _objectWithoutProperties(_ref, ['componentClass', 'className']);

	    var _classNames;

	    var _ref2$$bs_navbar_bsClass = _ref2.$bs_navbar_bsClass;
	    var bsClass = _ref2$$bs_navbar_bsClass === undefined ? 'navbar' : _ref2$$bs_navbar_bsClass;
	    return _react2['default'].createElement(Tag, _extends({}, props, {
	      className: _classnames2['default'](className, _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, suffix), (_classNames = {}, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = props.pullRight, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = props.pullLeft, _classNames))
	    }));
	  };

	  wrapper.displayName = displayName;

	  wrapper.propTypes = {
	    componentClass: _reactPropTypesLibElementType2['default'],
	    pullRight: _react2['default'].PropTypes.bool,
	    pullLeft: _react2['default'].PropTypes.bool
	  };
	  wrapper.defaultProps = {
	    componentClass: tag,
	    pullRight: false,
	    pullLeft: false
	  };

	  wrapper.contextTypes = {
	    $bs_navbar_bsClass: _react.PropTypes.string
	  };

	  return wrapper;
	}

	Navbar.Brand = _NavbarBrand2['default'];
	Navbar.Header = _NavbarHeader2['default'];
	Navbar.Toggle = _NavbarToggle2['default'];
	Navbar.Collapse = _NavbarCollapse2['default'];

	Navbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');
	Navbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');
	Navbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink');

	exports['default'] = Navbar;
	module.exports = exports['default'];

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibDeprecated = __webpack_require__(560);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Grid = __webpack_require__(702);

	var _Grid2 = _interopRequireDefault(_Grid);

	var _NavBrand = __webpack_require__(716);

	var _NavBrand2 = _interopRequireDefault(_NavBrand);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var Navbar = _react2['default'].createClass({
	  displayName: 'Navbar',

	  propTypes: {
	    fixedTop: _react2['default'].PropTypes.bool,
	    fixedBottom: _react2['default'].PropTypes.bool,
	    staticTop: _react2['default'].PropTypes.bool,
	    inverse: _react2['default'].PropTypes.bool,
	    fluid: _react2['default'].PropTypes.bool,
	    role: _react2['default'].PropTypes.string,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    brand: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.node, 'Use the `NavBrand` component.'),
	    toggleButton: _react2['default'].PropTypes.node,
	    toggleNavKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onToggle: _react2['default'].PropTypes.func,
	    navExpanded: _react2['default'].PropTypes.bool,
	    defaultNavExpanded: _react2['default'].PropTypes.bool
	  },

	  // TODO Remove in 0.29
	  childContextTypes: {
	    $bs_deprecated_navbar: _react2['default'].PropTypes.bool
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_deprecated_navbar: true
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      role: 'navigation',
	      componentClass: 'nav',
	      fixedTop: false,
	      fixedBottom: false,
	      staticTop: false,
	      inverse: false,
	      fluid: false,
	      defaultNavExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      navExpanded: this.props.defaultNavExpanded
	    };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleToggle: function handleToggle() {
	    if (this.props.onToggle) {
	      this._isChanging = true;
	      this.props.onToggle();
	      this._isChanging = false;
	    }

	    this.setState({
	      navExpanded: !this.state.navExpanded
	    });
	  },

	  isNavExpanded: function isNavExpanded() {
	    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
	  },

	  hasNavBrandChild: function hasNavBrandChild() {
	    return _utilsValidComponentChildren2['default'].findValidComponents(this.props.children, function (child) {
	      return child.props.bsRole === 'brand';
	    }).length > 0;
	  },

	  render: function render() {
	    var _props = this.props;
	    var brand = _props.brand;
	    var toggleButton = _props.toggleButton;
	    var toggleNavKey = _props.toggleNavKey;
	    var fixedTop = _props.fixedTop;
	    var fixedBottom = _props.fixedBottom;
	    var staticTop = _props.staticTop;
	    var inverse = _props.inverse;
	    var ComponentClass = _props.componentClass;
	    var fluid = _props.fluid;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['brand', 'toggleButton', 'toggleNavKey', 'fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

	    // will result in some false positives but that seems better
	    // than false negatives. strict `undefined` check allows explicit
	    // "nulling" of the role if the user really doesn't want one
	    if (props.role === undefined && ComponentClass !== 'nav') {
	      props.role = 'navigation';
	    }

	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = this.props.fixedTop;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = this.props.fixedBottom;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = this.props.staticTop;

	    // handle built-in styles manually to provide the convenience `inverse` prop
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.INVERSE)] = this.props.inverse;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.DEFAULT)] = !this.props.inverse;

	    var showHeader = (brand || toggleButton || toggleNavKey != null) && !this.hasNavBrandChild();

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, props, { className: _classnames2['default'](className, classes) }),
	      _react2['default'].createElement(
	        _Grid2['default'],
	        { fluid: fluid },
	        showHeader ? this.renderBrandHeader() : null,
	        _utilsValidComponentChildren2['default'].map(children, this.renderChild)
	      )
	    );
	  },

	  renderBrandHeader: function renderBrandHeader() {
	    var brand = this.props.brand;

	    if (brand) {
	      brand = _react2['default'].createElement(
	        _NavBrand2['default'],
	        null,
	        brand
	      );
	    }

	    return this.renderHeader(brand);
	  },

	  renderHeader: function renderHeader(brand) {
	    var hasToggle = this.props.toggleButton || this.props.toggleNavKey != null;
	    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

	    return _react2['default'].createElement(
	      'div',
	      { className: headerClass },
	      brand,
	      hasToggle ? this.renderToggleButton() : null
	    );
	  },

	  renderChild: function renderChild(child, index) {
	    var key = child.key != null ? child.key : index;

	    if (child.props.bsRole === 'brand') {
	      return _react2['default'].cloneElement(this.renderHeader(child), { key: key });
	    }

	    var toggleNavKey = this.props.toggleNavKey;

	    var collapsible = toggleNavKey != null && toggleNavKey === child.props.eventKey;

	    return _react2['default'].cloneElement(child, {
	      navbar: true,
	      collapsible: collapsible,
	      expanded: collapsible && this.isNavExpanded(),
	      key: key
	    });
	  },

	  renderToggleButton: function renderToggleButton() {
	    var toggleButton = this.props.toggleButton;

	    var toggleClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'toggle');

	    if (_react2['default'].isValidElement(toggleButton)) {
	      return _react2['default'].cloneElement(toggleButton, {
	        className: _classnames2['default'](toggleButton.props.className, toggleClass),
	        onClick: _utilsCreateChainedFunction2['default'](this.handleToggle, toggleButton.props.onClick)
	      });
	    }

	    var children = undefined;
	    if (toggleButton != null) {
	      children = toggleButton;
	    } else {
	      children = [_react2['default'].createElement(
	        'span',
	        { className: 'sr-only', key: 0 },
	        'Toggle navigation'
	      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })];
	    }

	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        onClick: this.handleToggle,
	        className: toggleClass
	      },
	      children
	    );
	  }

	});

	var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

	exports['default'] = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', Navbar));
	module.exports = exports['default'];

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _NavbarBrand = __webpack_require__(717);

	var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

	var _utilsDeprecationWarning = __webpack_require__(648);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_NavbarBrand2['default'], {
	  message: 'The `NavBrand` component has been renamed to: `NavbarBrand`. ' + 'Please use that component instead; this alias will be removed in an upcoming release'
	});
	module.exports = exports['default'];

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarBrand = (function (_React$Component) {
	  _inherits(NavbarBrand, _React$Component);

	  function NavbarBrand() {
	    _classCallCheck(this, NavbarBrand);

	    _React$Component.apply(this, arguments);
	  }

	  NavbarBrand.prototype.render = function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['className', 'children']);

	    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

	    var brandClasses = _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'brand');

	    if (_react2['default'].isValidElement(children)) {
	      return _react2['default'].cloneElement(children, {
	        className: _classnames2['default'](children.props.className, className, brandClasses)
	      });
	    }

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, props, { className: _classnames2['default'](className, brandClasses) }),
	      children
	    );
	  };

	  return NavbarBrand;
	})(_react2['default'].Component);

	NavbarBrand.contextTypes = {
	  $bs_navbar_bsClass: _react2['default'].PropTypes.string
	};

	exports['default'] = NavbarBrand;
	module.exports = exports['default'];

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarHeader = _react2['default'].createClass({
	  displayName: 'NavbarHeader',

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'header') },
	      children
	    );
	  }
	});

	exports['default'] = NavbarHeader;
	module.exports = exports['default'];

/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarToggle = _react2['default'].createClass({
	  displayName: 'NavbarToggle',

	  propTypes: {
	    /**
	     * The toggle content, if left empty it will render the default toggle (seen above).
	     */
	    children: _react.PropTypes.node
	  },

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_onToggle: _react.PropTypes.func
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context = this.context;
	    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
	    var onToggle = _context.$bs_navbar_onToggle;

	    return _react2['default'].createElement(
	      'button',
	      { type: 'button',
	        onClick: onToggle,
	        className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'toggle')
	      },
	      children || [_react2['default'].createElement(
	        'span',
	        { className: 'sr-only', key: 0 },
	        'Toggle navigation'
	      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })]
	    );
	  }
	});

	exports['default'] = NavbarToggle;
	module.exports = exports['default'];

/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Collapse = __webpack_require__(647);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var NavbarCollapse = _react2['default'].createClass({
	  displayName: 'NavbarCollapse',

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_expanded: _react.PropTypes.bool
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context = this.context;
	    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
	    var expanded = _context.$bs_navbar_expanded;

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      _extends({ 'in': expanded }, props),
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'collapse') },
	        children
	      )
	    );
	  }
	});

	exports['default'] = NavbarCollapse;
	module.exports = exports['default'];

/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Dropdown = __webpack_require__(649);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var NavDropdown = (function (_React$Component) {
	  _inherits(NavDropdown, _React$Component);

	  function NavDropdown() {
	    _classCallCheck(this, NavDropdown);

	    _React$Component.apply(this, arguments);
	  }

	  NavDropdown.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var noCaret = _props.noCaret;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      _extends({}, props, { componentClass: 'li' }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        {
	          useAnchor: true,
	          disabled: props.disabled,
	          noCaret: noCaret
	        },
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return NavDropdown;
	})(_react2['default'].Component);

	NavDropdown.propTypes = _extends({
	  noCaret: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.node.isRequired
	}, _Dropdown2['default'].propTypes);

	exports['default'] = NavDropdown;
	module.exports = exports['default'];

/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var NavItem = _react2['default'].createClass({
	  displayName: 'NavItem',

	  propTypes: {
	    linkId: _react2['default'].PropTypes.string,
	    onSelect: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    href: _react2['default'].PropTypes.string,
	    onClick: _react2['default'].PropTypes.func,
	    role: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.node,
	    eventKey: _react2['default'].PropTypes.any,
	    target: _react2['default'].PropTypes.string,
	    'aria-controls': _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var role = _props.role;
	    var linkId = _props.linkId;
	    var disabled = _props.disabled;
	    var active = _props.active;
	    var href = _props.href;
	    var onClick = _props.onClick;
	    var title = _props.title;
	    var target = _props.target;
	    var children = _props.children;
	    var tabIndex = _props.tabIndex;
	    var ariaControls = _props['aria-controls'];

	    var props = _objectWithoutProperties(_props, ['role', 'linkId', 'disabled', 'active', 'href', 'onClick', 'title', 'target', 'children', 'tabIndex', 'aria-controls']);

	    var classes = {
	      active: active,
	      disabled: disabled
	    };
	    var linkProps = {
	      role: role,
	      href: href,
	      onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick),
	      title: title,
	      target: target,
	      tabIndex: tabIndex,
	      id: linkId
	    };

	    if (!role && href === '#') {
	      linkProps.role = 'button';
	    } else if (role === 'tab') {
	      linkProps['aria-selected'] = active;
	    }

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, props, { role: 'presentation', className: _classnames2['default'](props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, linkProps, { 'aria-controls': ariaControls }),
	        children
	      )
	    );
	  },

	  handleClick: function handleClick(e) {
	    if (this.props.onSelect) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = NavItem;
	module.exports = exports['default'];
	//eslint-disable-line

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
	/* These properties are validated in 'Portal' and 'Position' components */

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactOverlaysLibOverlay = __webpack_require__(724);

	var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Fade = __webpack_require__(549);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Overlay = (function (_React$Component) {
	  _inherits(Overlay, _React$Component);

	  function Overlay() {
	    _classCallCheck(this, Overlay);

	    _React$Component.apply(this, arguments);
	  }

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var child = _props.children;
	    var transition = _props.animation;

	    var props = _objectWithoutProperties(_props, ['children', 'animation']);

	    if (transition === true) {
	      transition = _Fade2['default'];
	    }

	    if (transition === false) {
	      transition = null;
	    }

	    if (!transition) {
	      child = _react.cloneElement(child, {
	        className: _classnames2['default']('in', child.props.className)
	      });
	    }

	    return _react2['default'].createElement(
	      _reactOverlaysLibOverlay2['default'],
	      _extends({}, props, {
	        transition: transition
	      }),
	      child
	    );
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A callback invoked by the overlay when it wishes to be hidden. Required if
	   * `rootClose` is specified.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * Use animation
	   */
	  animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _reactPropTypesLibElementType2['default']]),

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	Overlay.defaultProps = {
	  animation: _Fade2['default'],
	  rootClose: false,
	  show: false
	};

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Portal = __webpack_require__(571);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _Position = __webpack_require__(725);

	var _Position2 = _interopRequireDefault(_Position);

	var _RootCloseWrapper = __webpack_require__(696);

	var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

	var _reactPropTypesLibElementType = __webpack_require__(570);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	/**
	 * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
	 */

	var Overlay = (function (_React$Component) {
	  function Overlay(props, context) {
	    _classCallCheck(this, Overlay);

	    _React$Component.call(this, props, context);

	    this.state = { exited: !props.show };
	    this.onHiddenListener = this.handleHidden.bind(this);
	  }

	  _inherits(Overlay, _React$Component);

	  Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var container = _props.container;
	    var containerPadding = _props.containerPadding;
	    var target = _props.target;
	    var placement = _props.placement;
	    var rootClose = _props.rootClose;
	    var children = _props.children;
	    var Transition = _props.transition;

	    var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'rootClose', 'children', 'transition']);

	    // Don't un-render the overlay while it's transitioning out.
	    var mountOverlay = props.show || Transition && !this.state.exited;
	    if (!mountOverlay) {
	      // Don't bother showing anything if we don't have to.
	      return null;
	    }

	    var child = children;

	    // Position is be inner-most because it adds inline styles into the child,
	    // which the other wrappers don't forward correctly.
	    child = _react2['default'].createElement(
	      _Position2['default'],
	      { container: container, containerPadding: containerPadding, target: target, placement: placement },
	      child
	    );

	    if (Transition) {
	      var onExit = props.onExit;
	      var onExiting = props.onExiting;
	      var onEnter = props.onEnter;
	      var onEntering = props.onEntering;
	      var onEntered = props.onEntered;

	      // This animates the child node by injecting props, so it must precede
	      // anything that adds a wrapping div.
	      child = _react2['default'].createElement(
	        Transition,
	        {
	          'in': props.show,
	          transitionAppear: true,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.onHiddenListener,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        child
	      );
	    }

	    // This goes after everything else because it adds a wrapping div.
	    if (rootClose) {
	      child = _react2['default'].createElement(
	        _RootCloseWrapper2['default'],
	        { onRootClose: props.onHide },
	        child
	      );
	    }

	    return _react2['default'].createElement(
	      _Portal2['default'],
	      { container: container },
	      child
	    );
	  };

	  Overlay.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });

	    if (this.props.onExited) {
	      var _props2;

	      (_props2 = this.props).onExited.apply(_props2, arguments);
	    }
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {
	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A Callback fired by the Overlay when it wishes to be hidden.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * A `<Transition/>` component used to animate the overlay changes visibility.
	   */
	  transition: _reactPropTypesLibElementType2['default'],

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsOwnerDocument = __webpack_require__(572);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(573);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	var _utilsOverlayPositionUtils = __webpack_require__(726);

	var _reactPropTypesLibMountable = __webpack_require__(568);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	/**
	 * The Position component calulates the corrdinates for its child, to
	 * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
	 * the Position component injects a `style` props with `left` and `top` values for positioning your component.
	 *
	 * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
	 * a sense of directionality.
	 */

	var Position = (function (_React$Component) {
	  function Position(props, context) {
	    _classCallCheck(this, Position);

	    _React$Component.call(this, props, context);

	    this.state = {
	      positionLeft: null,
	      positionTop: null,
	      arrowOffsetLeft: null,
	      arrowOffsetTop: null
	    };

	    this._needsFlush = false;
	    this._lastTarget = null;
	  }

	  _inherits(Position, _React$Component);

	  Position.prototype.componentDidMount = function componentDidMount() {
	    this.updatePosition();
	  };

	  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
	    this._needsFlush = true;
	  };

	  Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this._needsFlush) {
	      this._needsFlush = false;
	      this.updatePosition(prevProps.placement !== this.props.placement);
	    }
	  };

	  Position.prototype.componentWillUnmount = function componentWillUnmount() {
	    // Probably not necessary, but just in case holding a reference to the
	    // target causes problems somewhere.
	    this._lastTarget = null;
	  };

	  Position.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['children', 'className']);

	    var _state = this.state;
	    var positionLeft = _state.positionLeft;
	    var positionTop = _state.positionTop;

	    var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

	    var child = _react2['default'].Children.only(children);
	    return _react.cloneElement(child, _extends({}, props, arrowPosition, {
	      //do we need to also forward positionLeft and positionTop if they are set to style?
	      positionLeft: positionLeft,
	      positionTop: positionTop,
	      className: _classnames2['default'](className, child.props.className),
	      style: _extends({}, child.props.style, {
	        left: positionLeft,
	        top: positionTop
	      })
	    }));
	  };

	  Position.prototype.getTargetSafe = function getTargetSafe() {
	    if (!this.props.target) {
	      return null;
	    }

	    var target = this.props.target(this.props);
	    if (!target) {
	      // This is so we can just use === check below on all falsy targets.
	      return null;
	    }

	    return target;
	  };

	  Position.prototype.updatePosition = function updatePosition(placementChanged) {
	    var target = this.getTargetSafe();

	    if (target === this._lastTarget && !placementChanged) {
	      return;
	    }

	    this._lastTarget = target;

	    if (!target) {
	      this.setState({
	        positionLeft: null,
	        positionTop: null,
	        arrowOffsetLeft: null,
	        arrowOffsetTop: null
	      });

	      return;
	    }

	    var overlay = _reactDom2['default'].findDOMNode(this);
	    var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

	    this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
	  };

	  return Position;
	})(_react2['default'].Component);

	Position.propTypes = {
	  /**
	   * Function mapping props to a DOM node the component is positioned next to
	   */
	  target: _react2['default'].PropTypes.func,
	  /**
	   * "offsetParent" of the component
	   */
	  container: _reactPropTypesLibMountable2['default'],
	  /**
	   * Minimum spacing in pixels between container border and component border
	   */
	  containerPadding: _react2['default'].PropTypes.number,
	  /**
	   * How to position the component relative to the target
	   */
	  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left'])
	};

	Position.displayName = 'Position';

	Position.defaultProps = {
	  containerPadding: 0,
	  placement: 'right'
	};

	exports['default'] = Position;
	module.exports = exports['default'];

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ownerDocument = __webpack_require__(572);

	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

	var _domHelpersQueryOffset = __webpack_require__(727);

	var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

	var _domHelpersQueryPosition = __webpack_require__(728);

	var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

	var _domHelpersQueryScrollTop = __webpack_require__(730);

	var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

	var utils = {

	  getContainerDimensions: function getContainerDimensions(containerNode) {
	    var width = undefined,
	        height = undefined,
	        scroll = undefined;

	    if (containerNode.tagName === 'BODY') {
	      width = window.innerWidth;
	      height = window.innerHeight;

	      scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
	    } else {
	      var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

	      width = _getOffset.width;
	      height = _getOffset.height;

	      scroll = _domHelpersQueryScrollTop2['default'](containerNode);
	    }

	    return { width: width, height: height, scroll: scroll };
	  },

	  getPosition: function getPosition(target, container) {
	    var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

	    return offset;
	  },

	  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
	    var childOffset = utils.getPosition(target, container);

	    var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

	    var overlayHeight = _getOffset2.height;
	    var overlayWidth = _getOffset2.width;

	    var positionLeft = undefined,
	        positionTop = undefined,
	        arrowOffsetLeft = undefined,
	        arrowOffsetTop = undefined;

	    if (placement === 'left' || placement === 'right') {
	      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

	      if (placement === 'left') {
	        positionLeft = childOffset.left - overlayWidth;
	      } else {
	        positionLeft = childOffset.left + childOffset.width;
	      }

	      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

	      positionTop += topDelta;
	      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
	      arrowOffsetLeft = void 0;
	    } else if (placement === 'top' || placement === 'bottom') {
	      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

	      if (placement === 'top') {
	        positionTop = childOffset.top - overlayHeight;
	      } else {
	        positionTop = childOffset.top + childOffset.height;
	      }

	      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
	      positionLeft += leftDelta;
	      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
	      arrowOffsetTop = void 0;
	    } else {
	      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
	    }

	    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
	  }
	};

	function getTopDelta(top, overlayHeight, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerScroll = containerDimensions.scroll;
	  var containerHeight = containerDimensions.height;

	  var topEdgeOffset = top - padding - containerScroll;
	  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

	  if (topEdgeOffset < 0) {
	    return -topEdgeOffset;
	  } else if (bottomEdgeOffset > containerHeight) {
	    return containerHeight - bottomEdgeOffset;
	  } else {
	    return 0;
	  }
	}

	function getLeftDelta(left, overlayWidth, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerWidth = containerDimensions.width;

	  var leftEdgeOffset = left - padding;
	  var rightEdgeOffset = left + padding + overlayWidth;

	  if (leftEdgeOffset < 0) {
	    return -leftEdgeOffset;
	  } else if (rightEdgeOffset > containerWidth) {
	    return containerWidth - rightEdgeOffset;
	  } else {
	    return 0;
	  }
	}
	exports['default'] = utils;
	module.exports = exports['default'];

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var contains = __webpack_require__(545),
	    getWindow = __webpack_require__(588),
	    ownerDocument = __webpack_require__(540);

	module.exports = function offset(node) {
	  var doc = ownerDocument(node),
	      win = getWindow(doc),
	      docElem = doc && doc.documentElement,
	      box = { top: 0, left: 0, height: 0, width: 0 };

	  if (!doc) return;

	  // Make sure it's not a disconnected DOM node
	  if (!contains(docElem, node)) return box;

	  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

	  if (box.width || box.height) {

	    box = {
	      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
	      width: (box.width == null ? node.offsetWidth : box.width) || 0,
	      height: (box.height == null ? node.offsetHeight : box.height) || 0
	    };
	  }

	  return box;
	};

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(581);

	exports.__esModule = true;
	exports['default'] = position;

	var _offset = __webpack_require__(727);

	var _offset2 = babelHelpers.interopRequireDefault(_offset);

	var _offsetParent = __webpack_require__(729);

	var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

	var _scrollTop = __webpack_require__(730);

	var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

	var _scrollLeft = __webpack_require__(731);

	var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

	var _style = __webpack_require__(575);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function position(node, offsetParent) {
	  var parentOffset = { top: 0, left: 0 },
	      offset;

	  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
	  // because it is its only offset parent
	  if ((0, _style2['default'])(node, 'position') === 'fixed') {
	    offset = node.getBoundingClientRect();
	  } else {
	    offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
	    offset = (0, _offset2['default'])(node);

	    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

	    parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
	    parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
	  }

	  // Subtract parent offsets and node margins
	  return babelHelpers._extends({}, offset, {
	    top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
	    left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
	  });
	}

	module.exports = exports['default'];

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(581);

	exports.__esModule = true;
	exports['default'] = offsetParent;

	var _ownerDocument = __webpack_require__(540);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	var _style = __webpack_require__(575);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function offsetParent(node) {
	  var doc = (0, _ownerDocument2['default'])(node),
	      offsetParent = node && node.offsetParent;

	  while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
	    offsetParent = offsetParent.offsetParent;
	  }

	  return offsetParent || doc.documentElement;
	}

	module.exports = exports['default'];

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(588);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

	  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
	};

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(588);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

	  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
	};

/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable react/prop-types */

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _domHelpersQueryContains = __webpack_require__(545);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _lodashCompatObjectPick = __webpack_require__(593);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	var _Overlay = __webpack_require__(723);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	/**
	 * Check if value one is inside or equal to the of value
	 *
	 * @param {string} one
	 * @param {string|array} of
	 * @returns {boolean}
	 */
	function isOneOf(one, of) {
	  if (Array.isArray(of)) {
	    return of.indexOf(one) >= 0;
	  }
	  return one === of;
	}

	var OverlayTrigger = _react2['default'].createClass({
	  displayName: 'OverlayTrigger',

	  propTypes: _extends({}, _Overlay2['default'].propTypes, {

	    /**
	    * Specify which action or actions trigger Overlay visibility
	    */
	    trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

	    /**
	     * A millisecond delay amount to show and hide the Overlay once triggered
	     */
	    delay: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before showing the Overlay once triggered.
	     */
	    delayShow: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before hiding the Overlay once triggered.
	     */
	    delayHide: _react2['default'].PropTypes.number,

	    /**
	     * The initial visibility state of the Overlay, for more nuanced visibility controll consider
	     * using the Overlay component directly.
	     */
	    defaultOverlayShown: _react2['default'].PropTypes.bool,

	    /**
	     * An element or text to overlay next to the target.
	     */
	    overlay: _react2['default'].PropTypes.node.isRequired,

	    /**
	     * @private
	     */
	    onBlur: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onClick: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onFocus: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseEnter: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseLeave: _react2['default'].PropTypes.func,

	    // override specific overlay props
	    /**
	     * @private
	     */
	    target: function target() {},
	    /**
	    * @private
	    */
	    onHide: function onHide() {},
	    /**
	     * @private
	     */
	    show: function show() {}
	  }),

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultOverlayShown: false,
	      trigger: ['hover', 'focus']
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isOverlayShown: this.props.defaultOverlayShown
	    };
	  },

	  show: function show() {
	    this.setState({
	      isOverlayShown: true
	    });
	  },

	  hide: function hide() {
	    this.setState({
	      isOverlayShown: false
	    });
	  },

	  toggle: function toggle() {
	    if (this.state.isOverlayShown) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    this.handleMouseOver = this.handleMouseOverOut.bind(null, this.handleDelayedShow);
	    this.handleMouseOut = this.handleMouseOverOut.bind(null, this.handleDelayedHide);
	  },

	  componentDidMount: function componentDidMount() {
	    this._mountNode = document.createElement('div');
	    this.renderOverlay();
	  },

	  renderOverlay: function renderOverlay() {
	    _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    _reactDom2['default'].unmountComponentAtNode(this._mountNode);
	    this._mountNode = null;
	    clearTimeout(this._hoverShowDelay);
	    clearTimeout(this._hoverHideDelay);
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this._mountNode) {
	      this.renderOverlay();
	    }
	  },

	  getOverlayTarget: function getOverlayTarget() {
	    return _reactDom2['default'].findDOMNode(this);
	  },

	  getOverlay: function getOverlay() {
	    var overlayProps = _extends({}, _lodashCompatObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
	      show: this.state.isOverlayShown,
	      onHide: this.hide,
	      target: this.getOverlayTarget,
	      onExit: this.props.onExit,
	      onExiting: this.props.onExiting,
	      onExited: this.props.onExited,
	      onEnter: this.props.onEnter,
	      onEntering: this.props.onEntering,
	      onEntered: this.props.onEntered
	    });

	    var overlay = _react.cloneElement(this.props.overlay, {
	      placement: overlayProps.placement,
	      container: overlayProps.container
	    });

	    return _react2['default'].createElement(
	      _Overlay2['default'],
	      overlayProps,
	      overlay
	    );
	  },

	  render: function render() {
	    var trigger = _react2['default'].Children.only(this.props.children);
	    var triggerProps = trigger.props;

	    var props = {
	      'aria-describedby': this.props.overlay.props.id
	    };

	    // create in render otherwise owner is lost...
	    this._overlay = this.getOverlay();

	    props.onClick = _utilsCreateChainedFunction2['default'](triggerProps.onClick, this.props.onClick);

	    if (isOneOf('click', this.props.trigger)) {
	      props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
	    }

	    if (isOneOf('hover', this.props.trigger)) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : undefined;

	      props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleMouseOver, this.props.onMouseOver, triggerProps.onMouseOver);
	      props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleMouseOut, this.props.onMouseOut, triggerProps.onMouseOut);
	    }

	    if (isOneOf('focus', this.props.trigger)) {
	      props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus, triggerProps.onFocus);
	      props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur, triggerProps.onBlur);
	    }

	    return _react.cloneElement(trigger, props);
	  },

	  handleDelayedShow: function handleDelayedShow() {
	    var _this = this;

	    if (this._hoverHideDelay != null) {
	      clearTimeout(this._hoverHideDelay);
	      this._hoverHideDelay = null;
	      return;
	    }

	    if (this.state.isOverlayShown || this._hoverShowDelay != null) {
	      return;
	    }

	    var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

	    if (!delay) {
	      this.show();
	      return;
	    }

	    this._hoverShowDelay = setTimeout(function () {
	      _this._hoverShowDelay = null;
	      _this.show();
	    }, delay);
	  },

	  handleDelayedHide: function handleDelayedHide() {
	    var _this2 = this;

	    if (this._hoverShowDelay != null) {
	      clearTimeout(this._hoverShowDelay);
	      this._hoverShowDelay = null;
	      return;
	    }

	    if (!this.state.isOverlayShown || this._hoverHideDelay != null) {
	      return;
	    }

	    var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

	    if (!delay) {
	      this.hide();
	      return;
	    }

	    this._hoverHideDelay = setTimeout(function () {
	      _this2._hoverHideDelay = null;
	      _this2.hide();
	    }, delay);
	  },

	  // Simple implementation of mouseEnter and mouseLeave.
	  // React's built version is broken: https://github.com/facebook/react/issues/4251
	  // for cases when the trigger is disabled and mouseOut/Over can cause flicker moving
	  // from one child element to another.
	  handleMouseOverOut: function handleMouseOverOut(handler, e) {
	    var target = e.currentTarget;
	    var related = e.relatedTarget || e.nativeEvent.toElement;

	    if (!related || related !== target && !_domHelpersQueryContains2['default'](target, related)) {
	      handler(e);
	    }
	  }

	});

	exports['default'] = OverlayTrigger;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var PageHeader = _react2['default'].createClass({
	  displayName: 'PageHeader',

	  render: function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
	      _react2['default'].createElement(
	        'h1',
	        null,
	        this.props.children
	      )
	    );
	  }
	});

	exports['default'] = PageHeader;
	module.exports = exports['default'];

/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var PageItem = _react2['default'].createClass({
	  displayName: 'PageItem',

	  propTypes: {
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.string,
	    disabled: _react2['default'].PropTypes.bool,
	    previous: _react2['default'].PropTypes.bool,
	    next: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: false,
	      previous: false,
	      next: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'disabled': this.props.disabled,
	      'previous': this.props.previous,
	      'next': this.props.next
	    };

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        {
	          href: this.props.href,
	          title: this.props.title,
	          target: this.props.target,
	          onClick: this.handleSelect },
	        this.props.children
	      )
	    );
	  },

	  handleSelect: function handleSelect(e) {
	    if (this.props.onSelect || this.props.disabled) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = PageItem;
	module.exports = exports['default'];

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var Pager = _react2['default'].createClass({
	  displayName: 'Pager',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'pager') }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
	    );
	  },

	  renderPageItem: function renderPageItem(child, index) {
	    return _react.cloneElement(child, {
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index
	    });
	  }
	});

	exports['default'] = Pager;
	module.exports = exports['default'];

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _PaginationButton = __webpack_require__(737);

	var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var Pagination = _react2['default'].createClass({
	  displayName: 'Pagination',

	  propTypes: {
	    activePage: _react2['default'].PropTypes.number,
	    items: _react2['default'].PropTypes.number,
	    maxButtons: _react2['default'].PropTypes.number,
	    /**
	     * When `true`, will display the default node value ('...').
	     * Otherwise, will display provided node (when specified).
	     */
	    ellipsis: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&laquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    first: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&raquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    last: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&lsaquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    prev: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&rsaquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    next: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    onSelect: _react2['default'].PropTypes.func,
	    /**
	     * You can use a custom element for the buttons
	     */
	    buttonComponentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      activePage: 1,
	      items: 1,
	      maxButtons: 0,
	      first: false,
	      last: false,
	      prev: false,
	      next: false,
	      ellipsis: true,
	      buttonComponentClass: _SafeAnchor2['default'],
	      bsClass: 'pagination'
	    };
	  },

	  renderPageButtons: function renderPageButtons() {
	    var pageButtons = [];
	    var startPage = undefined,
	        endPage = undefined,
	        hasHiddenPagesAfter = undefined;
	    var _props = this.props;
	    var maxButtons = _props.maxButtons;
	    var activePage = _props.activePage;
	    var items = _props.items;
	    var onSelect = _props.onSelect;
	    var ellipsis = _props.ellipsis;
	    var buttonComponentClass = _props.buttonComponentClass;

	    if (maxButtons) {
	      var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
	      startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
	      hasHiddenPagesAfter = startPage + maxButtons <= items;

	      if (!hasHiddenPagesAfter) {
	        endPage = items;
	        startPage = items - maxButtons + 1;
	        if (startPage < 1) {
	          startPage = 1;
	        }
	      } else {
	        endPage = startPage + maxButtons - 1;
	      }
	    } else {
	      startPage = 1;
	      endPage = items;
	    }

	    for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: pagenumber,
	          eventKey: pagenumber,
	          active: pagenumber === activePage,
	          onSelect: onSelect,
	          buttonComponentClass: buttonComponentClass },
	        pagenumber
	      ));
	    }

	    if (maxButtons && hasHiddenPagesAfter && ellipsis) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: 'ellipsis',
	          disabled: true,
	          buttonComponentClass: buttonComponentClass },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-label': 'More' },
	          this.props.ellipsis === true ? '...' : this.props.ellipsis
	        )
	      ));
	    }

	    return pageButtons;
	  },

	  renderPrev: function renderPrev() {
	    if (!this.props.prev) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'prev',
	        eventKey: this.props.activePage - 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Previous' },
	        this.props.prev === true ? '‹' : this.props.prev
	      )
	    );
	  },

	  renderNext: function renderNext() {
	    if (!this.props.next) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'next',
	        eventKey: this.props.activePage + 1,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Next' },
	        this.props.next === true ? '›' : this.props.next
	      )
	    );
	  },

	  renderFirst: function renderFirst() {
	    if (!this.props.first) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'first',
	        eventKey: 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'First' },
	        this.props.first === true ? '«' : this.props.first
	      )
	    );
	  },

	  renderLast: function renderLast() {
	    if (!this.props.last) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'last',
	        eventKey: this.props.items,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Last' },
	        this.props.last === true ? '»' : this.props.last
	      )
	    );
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)) }),
	      this.renderFirst(),
	      this.renderPrev(),
	      this.renderPageButtons(),
	      this.renderNext(),
	      this.renderLast()
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('pagination', Pagination);
	module.exports = exports['default'];

/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCreateSelectedEvent = __webpack_require__(738);

	var _utilsCreateSelectedEvent2 = _interopRequireDefault(_utilsCreateSelectedEvent);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var PaginationButton = _react2['default'].createClass({
	  displayName: 'PaginationButton',

	  propTypes: {
	    className: _react2['default'].PropTypes.string,
	    eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    active: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    buttonComponentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  handleClick: function handleClick(event) {
	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      var selectedEvent = _utilsCreateSelectedEvent2['default'](this.props.eventKey);
	      this.props.onSelect(event, selectedEvent);
	    }
	  },

	  render: function render() {
	    var classes = {
	      active: this.props.active,
	      disabled: this.props.disabled
	    };

	    var _props = this.props;
	    var className = _props.className;

	    var anchorProps = _objectWithoutProperties(_props, ['className']);

	    var ButtonComponentClass = this.props.buttonComponentClass;

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](className, classes) },
	      _react2['default'].createElement(ButtonComponentClass, _extends({}, anchorProps, {
	        onClick: this.handleClick }))
	    );
	  }
	});

	exports['default'] = PaginationButton;
	module.exports = exports['default'];

/***/ },
/* 738 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = createSelectedEvent;

	function createSelectedEvent(eventKey) {
	  var selectionPrevented = false;

	  return {
	    eventKey: eventKey,

	    preventSelection: function preventSelection() {
	      selectionPrevented = true;
	    },

	    isSelectionPrevented: function isSelectionPrevented() {
	      return selectionPrevented;
	    }
	  };
	}

	module.exports = exports["default"];

/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var _Collapse = __webpack_require__(647);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var Panel = _react2['default'].createClass({
	  displayName: 'Panel',

	  propTypes: {
	    collapsible: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    header: _react2['default'].PropTypes.node,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    footer: _react2['default'].PropTypes.node,
	    defaultExpanded: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any,
	    headerRole: _react2['default'].PropTypes.string,
	    panelRole: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      expanded: this.props.defaultExpanded
	    };
	  },

	  handleSelect: function handleSelect(e) {
	    e.selected = true;

	    if (this.props.onSelect) {
	      this.props.onSelect(e, this.props.eventKey);
	    } else {
	      e.preventDefault();
	    }

	    if (e.selected) {
	      this.handleToggle();
	    }
	  },

	  handleToggle: function handleToggle() {
	    this.setState({ expanded: !this.state.expanded });
	  },

	  isExpanded: function isExpanded() {
	    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
	  },

	  render: function render() {
	    var _props = this.props;
	    var headerRole = _props.headerRole;
	    var panelRole = _props.panelRole;

	    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)),
	        id: this.props.collapsible ? null : this.props.id, onSelect: null }),
	      this.renderHeading(headerRole),
	      this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
	      this.renderFooter()
	    );
	  },

	  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
	    var props = {
	      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'collapse'),
	      id: this.props.id,
	      ref: 'panel',
	      'aria-hidden': !this.isExpanded()
	    };
	    if (panelRole) {
	      props.role = panelRole;
	    }

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      { 'in': this.isExpanded() },
	      _react2['default'].createElement(
	        'div',
	        props,
	        this.renderBody()
	      )
	    );
	  },

	  renderBody: function renderBody() {
	    var _this = this;

	    var allChildren = this.props.children;
	    var bodyElements = [];
	    var panelBodyChildren = [];
	    var bodyClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'body');

	    function getProps() {
	      return { key: bodyElements.length };
	    }

	    function addPanelChild(child) {
	      bodyElements.push(_react.cloneElement(child, getProps()));
	    }

	    function addPanelBody(children) {
	      bodyElements.push(_react2['default'].createElement(
	        'div',
	        _extends({ className: bodyClass }, getProps()),
	        children
	      ));
	    }

	    function maybeRenderPanelBody() {
	      if (panelBodyChildren.length === 0) {
	        return;
	      }

	      addPanelBody(panelBodyChildren);
	      panelBodyChildren = [];
	    }

	    // Handle edge cases where we should not iterate through children.
	    if (!Array.isArray(allChildren) || allChildren.length === 0) {
	      if (this.shouldRenderFill(allChildren)) {
	        addPanelChild(allChildren);
	      } else {
	        addPanelBody(allChildren);
	      }
	    } else {
	      allChildren.forEach(function (child) {
	        if (_this.shouldRenderFill(child)) {
	          maybeRenderPanelBody();

	          // Separately add the filled element.
	          addPanelChild(child);
	        } else {
	          panelBodyChildren.push(child);
	        }
	      });

	      maybeRenderPanelBody();
	    }

	    return bodyElements;
	  },

	  shouldRenderFill: function shouldRenderFill(child) {
	    return _react2['default'].isValidElement(child) && child.props.fill != null;
	  },

	  renderHeading: function renderHeading(headerRole) {
	    var header = this.props.header;

	    if (!header) {
	      return null;
	    }

	    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
	      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
	    } else {
	      var className = _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(this.props, 'title'), header.props.className);

	      if (this.props.collapsible) {
	        header = _react.cloneElement(header, {
	          className: className,
	          children: this.renderAnchor(header.props.children, headerRole)
	        });
	      } else {
	        header = _react.cloneElement(header, { className: className });
	      }
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'heading') },
	      header
	    );
	  },

	  renderAnchor: function renderAnchor(header, headerRole) {
	    return _react2['default'].createElement(
	      'a',
	      {
	        href: '#' + (this.props.id || ''),
	        'aria-controls': this.props.collapsible ? this.props.id : null,
	        className: this.isExpanded() ? null : 'collapsed',
	        'aria-expanded': this.isExpanded(),
	        'aria-selected': this.isExpanded(),
	        onClick: this.handleSelect,
	        role: headerRole },
	      header
	    );
	  },

	  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
	    return _react2['default'].createElement(
	      'h4',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title'), role: 'presentation' },
	      this.renderAnchor(header, headerRole)
	    );
	  },

	  renderFooter: function renderFooter() {
	    if (!this.props.footer) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'footer') },
	      this.props.footer
	    );
	  }
	});

	var PANEL_STATES = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY);

	exports['default'] = _utilsBootstrapUtils.bsStyles(PANEL_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('panel', Panel));
	module.exports = exports['default'];

/***/ },
/* 740 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(691);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var Popover = _react2['default'].createClass({
	  displayName: 'Popover',

	  propTypes: {

	    /**
	     * An html id attribute, necessary for accessibility
	     * @type {string}
	     * @required
	     */
	    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	    /**
	     * Sets the direction the Popover is positioned towards.
	     */
	    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	    /**
	     * The "left" position value for the Popover.
	     */
	    positionLeft: _react2['default'].PropTypes.number,
	    /**
	     * The "top" position value for the Popover.
	     */
	    positionTop: _react2['default'].PropTypes.number,
	    /**
	     * The "left" position value for the Popover arrow.
	     */
	    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * The "top" position value for the Popover arrow.
	     */
	    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * Title text
	     */
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      placement: 'right',
	      bsClass: 'popover'
	    };
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

	    var style = _extends({
	      'left': this.props.positionLeft,
	      'top': this.props.positionTop,
	      'display': 'block'
	    }, this.props.style);

	    // eslint-disable-line react/prop-types
	    var arrowStyle = {
	      'left': this.props.arrowOffsetLeft,
	      'top': this.props.arrowOffsetTop
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style, title: null }),
	      _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
	      this.props.title ? this.renderTitle() : null,
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content') },
	        this.props.children
	      )
	    );
	  },

	  renderTitle: function renderTitle() {
	    return _react2['default'].createElement(
	      'h3',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title') },
	      this.props.title
	    );
	  }
	});

	exports['default'] = Popover;
	module.exports = exports['default'];
	// we don't want to expose the `style` property

/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Interpolate = __webpack_require__(707);

	var _Interpolate2 = _interopRequireDefault(_Interpolate);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	/**
	 * Custom propTypes checker
	 */
	function onlyProgressBar(props, propName, componentName) {
	  if (props[propName]) {
	    var _ret = (function () {
	      var error = undefined,
	          childIdentifier = undefined;

	      _react2['default'].Children.forEach(props[propName], function (child) {
	        if (child.type !== ProgressBar) {
	          //eslint-disable-line
	          childIdentifier = child.type.displayName ? child.type.displayName : child.type;
	          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
	        }
	      });

	      return {
	        v: error
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  }
	}

	var ProgressBar = (function (_React$Component) {
	  _inherits(ProgressBar, _React$Component);

	  function ProgressBar() {
	    _classCallCheck(this, ProgressBar);

	    _React$Component.apply(this, arguments);
	  }

	  ProgressBar.prototype.getPercentage = function getPercentage(now, min, max) {
	    var roundPrecision = 1000;
	    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
	  };

	  ProgressBar.prototype.render = function render() {
	    if (this.props.isChild) {
	      return this.renderProgressBar();
	    }

	    var content = undefined;

	    if (this.props.children) {
	      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
	    } else {
	      content = this.renderProgressBar();
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'progress'),
	        min: null,
	        max: null,
	        label: null,
	        'aria-valuetext': null
	      }),
	      content
	    );
	  };

	  ProgressBar.prototype.renderChildBar = function renderChildBar(child, index) {
	    return _react.cloneElement(child, {
	      isChild: true,
	      key: child.key ? child.key : index
	    });
	  };

	  ProgressBar.prototype.renderProgressBar = function renderProgressBar() {
	    var _classNames;

	    var _props = this.props;
	    var className = _props.className;
	    var label = _props.label;
	    var now = _props.now;
	    var min = _props.min;
	    var max = _props.max;

	    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max']);

	    var percentage = this.getPercentage(now, min, max);

	    if (typeof label === 'string') {
	      label = this.renderLabel(percentage);
	    }

	    if (this.props.srOnly) {
	      label = _react2['default'].createElement(
	        'span',
	        { className: 'sr-only' },
	        label
	      );
	    }

	    var classes = _classnames2['default'](className, _utilsBootstrapUtils2['default'].getClassSet(this.props), (_classNames = {
	      active: this.props.active
	    }, _classNames[_utilsBootstrapUtils2['default'].prefix(this.props, 'striped')] = this.props.active || this.props.striped, _classNames));

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: classes,
	        role: 'progressbar',
	        style: { width: percentage + '%' },
	        'aria-valuenow': this.props.now,
	        'aria-valuemin': this.props.min,
	        'aria-valuemax': this.props.max }),
	      label
	    );
	  };

	  ProgressBar.prototype.renderLabel = function renderLabel(percentage) {
	    var InterpolateClass = this.props.interpolateClass || _Interpolate2['default'];

	    return _react2['default'].createElement(
	      InterpolateClass,
	      {
	        now: this.props.now,
	        min: this.props.min,
	        max: this.props.max,
	        percent: percentage,
	        bsStyle: this.props.bsStyle },
	      this.props.label
	    );
	  };

	  return ProgressBar;
	})(_react2['default'].Component);

	ProgressBar.propTypes = _extends({}, ProgressBar.propTypes, {
	  min: _react.PropTypes.number,
	  now: _react.PropTypes.number,
	  max: _react.PropTypes.number,
	  label: _react.PropTypes.node,
	  srOnly: _react.PropTypes.bool,
	  striped: _react.PropTypes.bool,
	  active: _react.PropTypes.bool,
	  children: onlyProgressBar,
	  className: _react2['default'].PropTypes.string,
	  interpolateClass: _react.PropTypes.node,
	  /**
	   * @private
	   */
	  isChild: _react.PropTypes.bool
	});

	ProgressBar.defaultProps = _extends({}, ProgressBar.defaultProps, {
	  min: 0,
	  max: 100,
	  active: false,
	  isChild: false,
	  srOnly: false,
	  striped: false
	});

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('progress-bar', ProgressBar));
	module.exports = exports['default'];

/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(537);

	var _warning2 = _interopRequireDefault(_warning);

	var ResponsiveEmbed = (function (_React$Component) {
	  _inherits(ResponsiveEmbed, _React$Component);

	  function ResponsiveEmbed() {
	    _classCallCheck(this, ResponsiveEmbed);

	    _React$Component.apply(this, arguments);
	  }

	  ResponsiveEmbed.prototype.render = function render() {
	    var _props = this.props;
	    var bsClass = _props.bsClass;
	    var className = _props.className;
	    var a16by9 = _props.a16by9;
	    var a4by3 = _props.a4by3;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['bsClass', 'className', 'a16by9', 'a4by3', 'children']);

	    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(!a16by9 && !a4by3), '`a16by9` or `a4by3` attribute must be set.') : undefined;
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(a16by9 && a4by3), 'Either `a16by9` or `a4by3` attribute can be set. Not both.') : undefined;

	    var aspectRatio = {
	      'embed-responsive-16by9': a16by9,
	      'embed-responsive-4by3': a4by3
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](bsClass, aspectRatio) },
	      _react.cloneElement(children, _extends({}, props, {
	        className: _classnames2['default'](className, 'embed-responsive-item')
	      }))
	    );
	  };

	  return ResponsiveEmbed;
	})(_react2['default'].Component);

	ResponsiveEmbed.defaultProps = {
	  bsClass: 'embed-responsive',
	  a16by9: false,
	  a4by3: false
	};

	ResponsiveEmbed.propTypes = {
	  /**
	   * bootstrap className
	   * @private
	   */
	  bsClass: _react.PropTypes.string,
	  /**
	   * This component accepts only one child element
	   */
	  children: _react.PropTypes.element.isRequired,
	  /**
	   * 16by9 aspect ratio
	   */
	  a16by9: _react.PropTypes.bool,
	  /**
	   * 4by3 aspect ratio
	   */
	  a4by3: _react.PropTypes.bool
	};

	exports['default'] = ResponsiveEmbed;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193)))

/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(547);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Row = _react2['default'].createClass({
	  displayName: 'Row',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Row;
	module.exports = exports['default'];

/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(622);

	var _Button2 = _interopRequireDefault(_Button);

	var _Dropdown = __webpack_require__(649);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _SplitToggle = __webpack_require__(745);

	var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

	var _lodashCompatObjectOmit = __webpack_require__(682);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _lodashCompatObjectPick = __webpack_require__(593);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var SplitButton = (function (_React$Component) {
	  _inherits(SplitButton, _React$Component);

	  function SplitButton() {
	    _classCallCheck(this, SplitButton);

	    _React$Component.apply(this, arguments);
	  }

	  SplitButton.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var onClick = _props.onClick;
	    var target = _props.target;
	    var href = _props.href;
	    var bsSize = _props.bsSize;
	    var bsStyle = _props.bsStyle;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'bsSize', 'bsStyle']);

	    var disabled = props.disabled;

	    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
	    var buttonProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      dropdownProps,
	      _react2['default'].createElement(
	        _Button2['default'],
	        _extends({}, buttonProps, {
	          onClick: onClick,
	          bsStyle: bsStyle,
	          bsSize: bsSize,
	          disabled: disabled,
	          target: target,
	          href: href
	        }),
	        title
	      ),
	      _react2['default'].createElement(_SplitToggle2['default'], {
	        'aria-label': title,
	        bsStyle: bsStyle,
	        bsSize: bsSize,
	        disabled: disabled
	      }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return SplitButton;
	})(_react2['default'].Component);

	SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, {
	  bsStyle: _Button2['default'].propTypes.bsStyle,

	  /**
	   * @private
	   */
	  onClick: function onClick() {},
	  target: _react2['default'].PropTypes.string,
	  href: _react2['default'].PropTypes.string,
	  /**
	   * The content of the split button.
	   */
	  title: _react2['default'].PropTypes.node.isRequired
	});

	SplitButton.defaultProps = {
	  disabled: false,
	  dropup: false,
	  pullRight: false
	};

	SplitButton.Toggle = _SplitToggle2['default'];

	exports['default'] = SplitButton;
	module.exports = exports['default'];

/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _DropdownToggle = __webpack_require__(698);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var SplitToggle = (function (_React$Component) {
	  _inherits(SplitToggle, _React$Component);

	  function SplitToggle() {
	    _classCallCheck(this, SplitToggle);

	    _React$Component.apply(this, arguments);
	  }

	  SplitToggle.prototype.render = function render() {
	    return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
	      useAnchor: false,
	      noCaret: false
	    }));
	  };

	  return SplitToggle;
	})(_react2['default'].Component);

	exports['default'] = SplitToggle;

	SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
	module.exports = exports['default'];

/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsTransitionEvents = __webpack_require__(644);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var Tab = _react2['default'].createClass({
	  displayName: 'Tab',

	  propTypes: {
	    /**
	     * @private
	     */
	    active: _react2['default'].PropTypes.bool,
	    animation: _react2['default'].PropTypes.bool,
	    /**
	     * It is used by 'Tabs' - parent component
	     * @private
	     */
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    title: _react2['default'].PropTypes.node,
	    /**
	     * tabClassName is used as className for the associated NavItem
	     */
	    tabClassName: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tab',
	      animation: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.animation) {
	      if (!this.state.animateIn && nextProps.active && !this.props.active) {
	        this.setState({
	          animateIn: true
	        });
	      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
	        this.setState({
	          animateOut: true
	        });
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.state.animateIn) {
	      setTimeout(this.startAnimateIn, 0);
	    }
	    if (this.state.animateOut) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.stopAnimateOut);
	    }
	  },

	  startAnimateIn: function startAnimateIn() {
	    if (this.isMounted()) {
	      this.setState({
	        animateIn: false
	      });
	    }
	  },

	  stopAnimateOut: function stopAnimateOut() {
	    if (this.isMounted()) {
	      this.setState({
	        animateOut: false
	      });

	      if (this.props.onAnimateOutEnd) {
	        this.props.onAnimateOutEnd();
	      }
	    }
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'pane')] = true, _classes['fade'] = true, _classes['active'] = this.props.active || this.state.animateOut, _classes['in'] = this.props.active && !this.state.animateIn, _classes);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: undefined,
	        role: 'tabpanel',
	        'aria-hidden': !this.props.active,
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Tab;
	module.exports = exports['default'];

/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Table = _react2['default'].createClass({
	  displayName: 'Table',

	  propTypes: {
	    striped: _react2['default'].PropTypes.bool,
	    bordered: _react2['default'].PropTypes.bool,
	    condensed: _react2['default'].PropTypes.bool,
	    hover: _react2['default'].PropTypes.bool,
	    responsive: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bordered: false,
	      condensed: false,
	      hover: false,
	      responsive: false,
	      striped: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'table': true,
	      'table-striped': this.props.striped,
	      'table-bordered': this.props.bordered,
	      'table-condensed': this.props.condensed,
	      'table-hover': this.props.hover
	    };
	    var table = _react2['default'].createElement(
	      'table',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );

	    return this.props.responsive ? _react2['default'].createElement(
	      'div',
	      { className: 'table-responsive' },
	      table
	    ) : table;
	  }
	});

	exports['default'] = Table;
	module.exports = exports['default'];

/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _objectWithoutProperties = __webpack_require__(525)['default'];

	var _Object$keys = __webpack_require__(526)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(503);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Col = __webpack_require__(645);

	var _Col2 = _interopRequireDefault(_Col);

	var _Nav = __webpack_require__(713);

	var _Nav2 = _interopRequireDefault(_Nav);

	var _NavItem = __webpack_require__(722);

	var _NavItem2 = _interopRequireDefault(_NavItem);

	var _styleMaps = __webpack_require__(533);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _keycode = __webpack_require__(650);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _utilsCreateChainedFunction = __webpack_require__(564);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(627);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var paneId = function paneId(props, child) {
	  return child.props.id ? child.props.id : props.id && props.id + '___pane___' + child.props.eventKey;
	};
	var tabId = function tabId(props, child) {
	  return child.props.id ? child.props.id + '___tab' : props.id && props.id + '___tab___' + child.props.eventKey;
	};

	var findChild = _utilsValidComponentChildren2['default'].find;

	function getDefaultActiveKeyFromChildren(children) {
	  var defaultActiveKey = undefined;

	  _utilsValidComponentChildren2['default'].forEach(children, function (child) {
	    if (defaultActiveKey == null) {
	      defaultActiveKey = child.props.eventKey;
	    }
	  });

	  return defaultActiveKey;
	}

	function move(children, currentKey, keys, moveNext) {
	  var lastIdx = keys.length - 1;
	  var stopAt = keys[moveNext ? Math.max(lastIdx, 0) : 0];
	  var nextKey = currentKey;

	  function getNext() {
	    var idx = keys.indexOf(nextKey);
	    nextKey = moveNext ? keys[Math.min(lastIdx, idx + 1)] : keys[Math.max(0, idx - 1)];

	    return findChild(children, function (_child) {
	      return _child.props.eventKey === nextKey;
	    });
	  }

	  var next = getNext();

	  while (next.props.eventKey !== stopAt && next.props.disabled) {
	    next = getNext();
	  }

	  return next.props.disabled ? currentKey : next.props.eventKey;
	}

	var Tabs = _react2['default'].createClass({
	  displayName: 'Tabs',

	  propTypes: {
	    activeKey: _react2['default'].PropTypes.any,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    /**
	     * Navigation style for tabs
	     *
	     * If not specified, it will be treated as `'tabs'` when vertically
	     * positioned and `'pills'` when horizontally positioned.
	     */
	    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
	    animation: _react2['default'].PropTypes.bool,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),
	    /**
	     * Number of grid columns for the tabs if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width.
	     */
	    tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Number of grid columns for the panes if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width. If not
	     * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
	     * `tabWidth`.
	     */
	    paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Render without clearfix if horizontally positioned
	     */
	    standalone: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tab',
	      animation: true,
	      tabWidth: 2,
	      position: 'top',
	      standalone: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey != null ? this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

	    return {
	      activeKey: defaultActiveKey,
	      previousActiveKey: null
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this = this;

	    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
	      (function () {
	        // check if the 'previousActiveKey' child still exists
	        var previousActiveKey = _this.props.activeKey;
	        _react2['default'].Children.forEach(nextProps.children, function (child) {
	          if (_react2['default'].isValidElement(child)) {
	            if (child.props.eventKey === previousActiveKey) {
	              _this.setState({
	                previousActiveKey: previousActiveKey
	              });
	              return;
	            }
	          }
	        });
	      })();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var tabs = this._tabs;
	    var tabIdx = this._eventKeys().indexOf(this.getActiveKey());

	    if (this._needsRefocus) {
	      this._needsRefocus = false;
	      if (tabs && tabIdx !== -1) {
	        var tabNode = _reactDom2['default'].findDOMNode(tabs[tabIdx]);

	        if (tabNode) {
	          tabNode.firstChild.focus();
	        }
	      }
	    }
	  },

	  handlePaneAnimateOutEnd: function handlePaneAnimateOutEnd() {
	    this.setState({
	      previousActiveKey: null
	    });
	  },

	  render: function render() {
	    var _props = this.props;
	    var id = _props.id;
	    var className = _props.className;
	    var style = _props.style;
	    var position = _props.position;
	    var bsStyle = _props.bsStyle;
	    var tabWidth = _props.tabWidth;
	    var paneWidth = _props.paneWidth;
	    var standalone = _props.standalone;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'standalone', 'children']);

	    var isHorizontal = position === 'left' || position === 'right';

	    if (bsStyle == null) {
	      bsStyle = isHorizontal ? 'pills' : 'tabs';
	    }

	    var containerProps = { id: id, className: className, style: style };

	    var tabsProps = _extends({}, props, {
	      bsStyle: bsStyle,
	      bsClass: undefined,
	      stacked: isHorizontal,
	      activeKey: this.getActiveKey(),
	      onSelect: this.handleSelect,
	      ref: 'tabs',
	      role: 'tablist'
	    });
	    var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

	    var panesProps = {
	      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'),
	      ref: 'panes'
	    };
	    var childPanes = _utilsValidComponentChildren2['default'].map(children, this.renderPane);

	    if (isHorizontal) {
	      if (!standalone) {
	        containerProps.className = _classnames2['default'](containerProps.className, 'clearfix');
	      }

	      var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

	      var tabsColProps = _getColProps.tabsColProps;
	      var panesColProps = _getColProps.panesColProps;

	      var tabs = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
	        childTabs
	      );
	      var panes = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({}, panesProps, panesColProps),
	        childPanes
	      );

	      if (position === 'left') {
	        return _react2['default'].createElement(
	          'div',
	          containerProps,
	          tabs,
	          panes
	        );
	      }

	      return _react2['default'].createElement(
	        'div',
	        containerProps,
	        panes,
	        tabs
	      );
	    }

	    return _react2['default'].createElement(
	      'div',
	      containerProps,
	      _react2['default'].createElement(
	        _Nav2['default'],
	        tabsProps,
	        childTabs
	      ),
	      _react2['default'].createElement(
	        'div',
	        panesProps,
	        childPanes
	      )
	    );
	  },

	  getActiveKey: function getActiveKey() {
	    return this.props.activeKey !== undefined ? this.props.activeKey : this.state.activeKey;
	  },

	  renderPane: function renderPane(child, index) {
	    var previousActiveKey = this.state.previousActiveKey;

	    var shouldPaneBeSetActive = child.props.eventKey === this.getActiveKey();
	    var thereIsNoActivePane = previousActiveKey == null;

	    var paneIsAlreadyActive = previousActiveKey != null && child.props.eventKey === previousActiveKey;

	    return _react.cloneElement(child, {
	      active: shouldPaneBeSetActive && (thereIsNoActivePane || !this.props.animation),
	      id: paneId(this.props, child),
	      'aria-labelledby': tabId(this.props, child),
	      key: child.key ? child.key : index,
	      animation: this.props.animation,
	      onAnimateOutEnd: paneIsAlreadyActive ? this.handlePaneAnimateOutEnd : null
	    });
	  },

	  renderTab: function renderTab(child, index) {
	    var _this2 = this;

	    if (child.props.title == null) {
	      return null;
	    }

	    var _child$props = child.props;
	    var eventKey = _child$props.eventKey;
	    var title = _child$props.title;
	    var disabled = _child$props.disabled;
	    var onKeyDown = _child$props.onKeyDown;
	    var tabClassName = _child$props.tabClassName;
	    var _child$props$tabIndex = _child$props.tabIndex;
	    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;

	    var isActive = this.getActiveKey() === eventKey;

	    return _react2['default'].createElement(
	      _NavItem2['default'],
	      {
	        linkId: tabId(this.props, child),
	        ref: function (ref) {
	          return (_this2._tabs || (_this2._tabs = []))[index] = ref;
	        },
	        'aria-controls': paneId(this.props, child),
	        onKeyDown: _utilsCreateChainedFunction2['default'](this.handleKeyDown, onKeyDown),
	        eventKey: eventKey,
	        tabIndex: isActive ? tabIndex : -1,
	        disabled: disabled,
	        className: tabClassName },
	      title
	    );
	  },

	  getColProps: function getColProps(_ref) {
	    var tabWidth = _ref.tabWidth;
	    var paneWidth = _ref.paneWidth;

	    var tabsColProps = undefined;
	    if (tabWidth instanceof Object) {
	      tabsColProps = tabWidth;
	    } else {
	      tabsColProps = { xs: tabWidth };
	    }

	    var panesColProps = undefined;
	    if (paneWidth == null) {
	      panesColProps = {};
	      _Object$keys(tabsColProps).forEach(function (size) {
	        panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
	      });
	    } else if (paneWidth instanceof Object) {
	      panesColProps = paneWidth;
	    } else {
	      panesColProps = { xs: paneWidth };
	    }

	    return { tabsColProps: tabsColProps, panesColProps: panesColProps };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(selectedKey) {
	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(selectedKey);
	      this._isChanging = false;
	      return;
	    }

	    // if there is no external handler, then use embedded one
	    var previousActiveKey = this.getActiveKey();
	    if (selectedKey !== previousActiveKey) {
	      this.setState({
	        activeKey: selectedKey,
	        previousActiveKey: previousActiveKey
	      });
	    }
	  },

	  handleKeyDown: function handleKeyDown(event) {
	    var keys = this._eventKeys();
	    var currentKey = this.getActiveKey() || keys[0];
	    var next = undefined;

	    switch (event.keyCode) {

	      case _keycode2['default'].codes.left:
	      case _keycode2['default'].codes.up:
	        next = move(this.props.children, currentKey, keys, false);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      case _keycode2['default'].codes.right:
	      case _keycode2['default'].codes.down:
	        next = move(this.props.children, currentKey, keys, true);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      default:
	    }
	  },

	  _eventKeys: function _eventKeys() {
	    var keys = [];

	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref2) {
	      var eventKey = _ref2.props.eventKey;
	      return keys.push(eventKey);
	    });

	    return keys;
	  }
	});

	exports['default'] = Tabs;
	module.exports = exports['default'];

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(634);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Thumbnail = _react2['default'].createClass({
	  displayName: 'Thumbnail',

	  propTypes: {
	    alt: _react2['default'].PropTypes.string,
	    href: _react2['default'].PropTypes.string,
	    src: _react2['default'].PropTypes.string
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    if (this.props.href) {
	      return _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
	        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	      );
	    }

	    if (this.props.children) {
	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'caption' },
	          this.props.children
	        )
	      );
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('thumbnail', Thumbnail);
	module.exports = exports['default'];

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(691);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var Tooltip = _react2['default'].createClass({
	  displayName: 'Tooltip',

	  propTypes: {
	    /**
	     * An html id attribute, necessary for accessibility
	     * @type {string}
	     * @required
	     */
	    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	    /**
	     * Sets the direction the Tooltip is positioned towards.
	     */
	    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	    /**
	     * The "left" position value for the Tooltip.
	     */
	    positionLeft: _react2['default'].PropTypes.number,
	    /**
	     * The "top" position value for the Tooltip.
	     */
	    positionTop: _react2['default'].PropTypes.number,
	    /**
	     * The "left" position value for the Tooltip arrow.
	     */
	    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * The "top" position value for the Tooltip arrow.
	     */
	    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * Title text
	     */
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tooltip',
	      placement: 'right'
	    };
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

	    var style = _extends({
	      'left': this.props.positionLeft,
	      'top': this.props.positionTop
	    }, this.props.style);

	    var arrowStyle = {
	      'left': this.props.arrowOffsetLeft,
	      'top': this.props.arrowOffsetTop
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style }),
	      _react2['default'].createElement('div', { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'arrow'), style: arrowStyle }),
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner') },
	        this.props.children
	      )
	    );
	  }
	});

	exports['default'] = Tooltip;
	module.exports = exports['default'];

/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(550)['default'];

	var _classCallCheck = __webpack_require__(557)['default'];

	var _extends = __webpack_require__(509)['default'];

	var _interopRequireDefault = __webpack_require__(530)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(347);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(531);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(532);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(533);

	var Well = (function (_React$Component) {
	  _inherits(Well, _React$Component);

	  function Well() {
	    _classCallCheck(this, _Well);

	    _React$Component.apply(this, arguments);
	  }

	  Well.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  };

	  var _Well = Well;
	  Well = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL])(Well) || Well;
	  Well = _utilsBootstrapUtils.bsClass('well')(Well) || Well;
	  return Well;
	})(_react2['default'].Component);

	exports['default'] = Well;
	module.exports = exports['default'];

/***/ },
/* 752 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	var ImportData = React.createClass({
	    displayName: 'ImportData',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({
	            showModal: false
	        });
	    },
	    open: function open() {
	        this.setState({
	            showModal: true
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'a',
	                { title: 'Import', onClick: this.open },
	                React.createElement('img', { src: 'src/img/import.png' }),
	                ' Import ',
	                React.createElement(
	                    'span',
	                    { className: 'small-span' },
	                    'from JSON, MongoDB'
	                )
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Import Data into Appbase ',
	                        React.createElement(
	                            'span',
	                            { className: 'small-span' },
	                            'from JSON, MongoDB'
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'p',
	                        null,
	                        'Use appbase.io\'s ',
	                        React.createElement(
	                            'a',
	                            { href: 'https://github.com/appbaseio/transporter', target: '_new' },
	                            'transporter ',
	                            React.createElement('span', { className: 'fa fa-external-link' })
	                        ),
	                        ' fork to import data from MongoDB, any JSON structure, or text file in three simple steps:'
	                    ),
	                    React.createElement(
	                        'ol',
	                        null,
	                        React.createElement(
	                            'li',
	                            null,
	                            'Get the latest release for your system from',
	                            React.createElement(
	                                'a',
	                                { href: 'https://github.com/appbaseio/transporter/releases/tag/v0.1.2-appbase', target: '_new' },
	                                ' here ',
	                                React.createElement('span', { className: 'fa fa-external-link' })
	                            ),
	                            '.'
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            'Set the source and sink configurations as mentioned in the file here, and save it in the same folder as config.yml.'
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            'Run the transporter using ./transporter run --config <config_file> <transform_file>'
	                        )
	                    ),
	                    React.createElement(
	                        'p',
	                        null,
	                        'Or shoot us at info@appbase.io or intercom if you want us to help with importing data.'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = ImportData;

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	var ExportData = React.createClass({
	    displayName: 'ExportData',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false,
	            validate: {
	                touch: false,
	                type: false,
	                body: false
	            }
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        //apply select2 for auto complete
	        if (!this.state.validate.type) this.applySelect();
	    },
	    applySelect: function applySelect() {
	        var $this = this;
	        var $eventSelect = $(".tags-select_export");
	        var typeList = this.getType();
	        $eventSelect.select2({
	            //tags: true,
	            data: typeList
	        });
	        $eventSelect.on("change", function (e) {
	            var validateClass = $this.state.validate;
	            validateClass.type = true;
	            $this.setState({
	                validate: validateClass
	            });
	        });
	    },
	    close: function close() {
	        this.setState({
	            showModal: false,
	            validate: {
	                touch: false,
	                type: false,
	                body: false
	            }
	        });
	    },

	    open: function open() {
	        this.setState({
	            showModal: true
	        });
	    },
	    getType: function getType() {
	        var typeList = this.props.types.map(function (type) {
	            return {
	                id: type,
	                text: type
	            };
	        });
	        return typeList;
	    },
	    validateInput: function validateInput() {
	        var validateClass = this.state.validate;
	        validateClass.touch = true;
	        validateClass.type = document.getElementById('setType_export').value == '' ? false : true;
	        validateClass.body = this.IsJsonString(document.getElementById('setBody_export').value);
	        this.setState({
	            validate: validateClass
	        });
	        if (validateClass.type && validateClass.body) this.props.ExportData();
	    },
	    IsJsonString: function IsJsonString(str) {
	        if (str != '') {
	            try {
	                JSON.parse(str);
	            } catch (e) {
	                return false;
	            }
	        }
	        return true;
	    },
	    render: function render() {
	        var typeList = this.props.types.map(function (type) {
	            return React.createElement(
	                'option',
	                { value: type },
	                type
	            );
	        });
	        if (this.state.validate.touch) {
	            var validateClass = {};
	            validateClass.body = this.state.validate.body ? 'form-group' : 'form-group has-error';
	            validateClass.type = this.state.validate.type ? 'form-group' : 'form-group has-error';
	        } else {
	            var validateClass = {
	                type: 'form-group',
	                body: 'form-group'
	            };
	        }
	        var querySample = '{"query":{"match_all":{}}}';
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'a',
	                { title: 'Export', onClick: this.open },
	                React.createElement('img', { src: 'src/img/export.png', alt: '' }),
	                ' Export Data as JSON'
	            ),
	            React.createElement(
	                Modal,
	                { className: 'modal-info', show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Export Appbase Data'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'form',
	                        { className: 'form-horizontal', id: 'addObjectForm_export' },
	                        React.createElement(
	                            'div',
	                            { className: validateClass.type },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputEmail3', className: 'col-sm-2 control-label' },
	                                'Type'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-10' },
	                                React.createElement('select', { id: 'setType_export', className: 'tags-select_export form-control', multiple: 'multiple', name: 'type' }),
	                                React.createElement(
	                                    'span',
	                                    { className: 'help-block' },
	                                    'Type is required.'
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: validateClass.body },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputPassword3', className: 'col-sm-2 control-label' },
	                                'Query'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-10' },
	                                React.createElement('textarea', { id: 'setBody_export', className: 'form-control', rows: '10', name: 'body', defaultValue: querySample }),
	                                React.createElement(
	                                    'span',
	                                    { className: 'help-block' },
	                                    'Query should be valid JSON.'
	                                )
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { className: 'info', id: 'exportBtn', className: 'loadingBtn', onClick: this.validateInput },
	                        React.createElement(
	                            'span',
	                            { className: 'submitText' },
	                            'Export'
	                        ),
	                        React.createElement('i', { className: 'fa fa-spinner fa-spin' })
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = ExportData;

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	// Prettify the json body i.e. embed that into
	// a code block so that highlightjs recognises it.
	var Pretty = React.createClass({
	    displayName: 'Pretty',

	    componentDidMount: function componentDidMount() {
	        var current = React.findDOMNode(this);
	        hljs.highlightBlock(current);
	    },
	    selectText: function selectText() {
	        var range = document.createRange();
	        var selection = window.getSelection();
	        var ele = document.getElementById('for-copy');
	        range.selectNodeContents(ele);
	        selection.removeAllRanges();
	        selection.addRange(range);
	    },
	    render: function render() {

	        return React.createElement(
	            'pre',
	            { className: 'custom-json-body', onClick: this.selectText },
	            React.createElement(
	                'code',
	                { className: 'json' },
	                React.createElement(
	                    'div',
	                    { id: 'for-copy' },
	                    JSON.stringify(this.props.json, null, 1)
	                )
	            )
	        );
	    }
	});

	module.exports = Pretty;

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	//Signal to indicate stream
	var SignalCircle = React.createClass({
	    displayName: 'SignalCircle',

	    componentDidMount: function componentDidMount() {},
	    render: function render() {
	        var signalColor = "signal-circle " + this.props.signalColor;
	        var signalActive = "spinner " + this.props.signalActive;
	        var OverlayTrigger = ReactBootstrap.OverlayTrigger;
	        var Popover = ReactBootstrap.Popover;
	        return React.createElement(
	            OverlayTrigger,
	            { trigger: 'focus', placement: 'right', overlay: React.createElement(
	                    Popover,
	                    { id: 'signal-pop' },
	                    this.props.signalText
	                ) },
	            React.createElement(
	                'a',
	                { className: signalColor },
	                React.createElement('span', { className: signalActive })
	            )
	        );
	    }
	});

	module.exports = SignalCircle;

/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	//Remove filter
	var RemoveFilterButton = React.createClass({
	    displayName: 'RemoveFilterButton',

	    componentDidMount: function componentDidMount() {},
	    render: function render() {
	        var filterInfoText = JSON.stringify(this.props.filterInfo);
	        var OverlayTrigger = ReactBootstrap.OverlayTrigger;
	        var Popover = ReactBootstrap.Popover;
	        var removeclass = this.props.filterInfo.active ? "removeFilterbtn" : "hide";
	        return React.createElement(
	            OverlayTrigger,
	            { trigger: 'focus', placement: 'right', overlay: React.createElement(
	                    Popover,
	                    { id: 'remove-pop' },
	                    filterInfoText
	                ) },
	            React.createElement(
	                'a',
	                { className: removeclass, onClick: this.props.removeFilter },
	                React.createElement('i', { className: 'fa fa-times' })
	            )
	        );
	    }
	});

	module.exports = RemoveFilterButton;

/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	//Update Document
	var UpdateDocument = React.createClass({
	    displayName: 'UpdateDocument',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false,
	            validate: {
	                touch: false,
	                type: false,
	                body: false
	            }
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({
	            showModal: false,
	            validate: {
	                touch: false,
	                body: false
	            },
	            selectClass: ''
	        });
	    },
	    open: function open() {
	        this.setState({
	            showModal: true
	        });
	        setTimeout((function () {
	            var options = {
	                lineNumbers: true,
	                mode: "javascript",
	                autoCloseBrackets: true,
	                matchBrackets: true,
	                showCursorWhenSelecting: true,
	                tabSize: 2,
	                extraKeys: {
	                    "Ctrl-Q": function CtrlQ(cm) {
	                        cm.foldCode(cm.getCursor());
	                    }
	                },
	                foldGutter: true,
	                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
	            };
	            this.editorref = CodeMirror.fromTextArea(document.getElementById('setBodyUpdate'), options);
	        }).bind(this), 300);
	        this.props.actionOnRecord.getUpdateObj();
	    },
	    validateInput: function validateInput() {
	        var validateClass = this.state.validate;
	        validateClass.touch = true;
	        validateClass.body = this.IsJsonString(this.editorref.getValue());
	        this.setState({
	            validate: validateClass
	        });
	        if (validateClass.body) {
	            var updateJson = this.editorref.getValue();
	            this.props.actionOnRecord.updateRecord(updateJson);
	        }
	    },
	    IsJsonString: function IsJsonString(str) {
	        try {
	            JSON.parse(str);
	        } catch (e) {
	            return false;
	        }
	        return true;
	    },
	    render: function render() {
	        var typeList = '';
	        var actionOnRecord = this.props.actionOnRecord;
	        if (this.state.validate.touch) {
	            var validateClass = {};
	            validateClass.body = this.state.validate.body ? 'form-group' : 'form-group has-error';
	        } else {
	            var validateClass = {
	                type: 'form-group',
	                body: 'form-group'
	            };
	        }

	        return React.createElement(
	            'div',
	            { className: 'inlineBlock pd-r10 pull-left' },
	            React.createElement(
	                'a',
	                { href: 'javascript:void(0);', className: 'btn btn-default themeBtn', title: 'Update', onClick: this.open },
	                React.createElement('i', { className: 'fa fa-pencil greyBtn' }),
	                '  Update'
	            ),
	            React.createElement(
	                Modal,
	                { className: 'modal-warning', show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Update Data'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'form',
	                        { className: 'form-horizontal', id: 'updateObjectForm' },
	                        React.createElement(
	                            'div',
	                            { className: 'form-group' },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputEmail3', className: 'col-sm-3 control-label' },
	                                'Type ',
	                                React.createElement(
	                                    'span',
	                                    { className: 'small-span' },
	                                    '(aka Table)'
	                                )
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('input', { type: 'text', className: 'form-control', id: 'type', name: 'type', value: actionOnRecord.type, readOnly: true })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'form-group' },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputPassword3', className: 'col-sm-3 control-label' },
	                                'Document Id'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('input', { type: 'text', className: 'form-control', id: 'setId',
	                                    value: actionOnRecord.id, readOnly: true, placeholder: 'set Id', name: 'id' })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: validateClass.body },
	                            React.createElement(
	                                'label',
	                                { 'for': 'inputPassword3', className: 'col-sm-3 control-label' },
	                                'JSON ',
	                                React.createElement(
	                                    'span',
	                                    { className: 'small-span' },
	                                    '(partial object)'
	                                )
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'col-sm-9' },
	                                React.createElement('textarea', { id: 'setBodyUpdate', className: 'form-control', rows: '10', name: 'body', defaultValue: actionOnRecord.row }),
	                                React.createElement(
	                                    'span',
	                                    { className: 'help-block' },
	                                    'Body is required and should be valid JSON.'
	                                )
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'warning', onClick: this.validateInput },
	                        'Update'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = UpdateDocument;

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	var DeleteDocument = React.createClass({
	    displayName: 'DeleteDocument',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({
	            showModal: false
	        });
	    },
	    open: function open() {
	        this.setState({
	            showModal: true
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'inlineBlock pd-r10 pull-left ' },
	            React.createElement(
	                'a',
	                { title: 'Delete', onClick: this.open, className: 'btn btn-default themeBtn' },
	                React.createElement('i', { className: 'fa fa-trash greyBtn' }),
	                '  Delete'
	            ),
	            React.createElement(
	                Modal,
	                { className: 'modal-danger', show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Delete Data'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'p',
	                        null,
	                        'You are about to ',
	                        React.createElement(
	                            'b',
	                            null,
	                            'permanently'
	                        ),
	                        ' delete the selected data.'
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'danger', id: 'deleteBtn', className: 'loadingBtn',
	                            onClick: this.props.actionOnRecord.deleteRecord },
	                        React.createElement(
	                            'span',
	                            { className: 'submitText' },
	                            'Confirm Deletion'
	                        ),
	                        React.createElement('i', { className: 'fa fa-spinner fa-spin' })
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = DeleteDocument;

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var ReactBootstrap = __webpack_require__(623);

	var ErrorModal = React.createClass({
	    displayName: 'ErrorModal',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.props.closeErrorModal();
	    },
	    render: function render() {
	        var errorShow = this.props.errorShow;
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Modal,
	                { className: 'modal-danger', show: errorShow, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Authentication Error'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'p',
	                        null,
	                        'It looks like your app name, username, password combination doesn\'t match. Check your url and appname and then connect it again.'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = ErrorModal;

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var React = __webpack_require__(347);
	var Modal = __webpack_require__(508);
	var Button = __webpack_require__(622);
	var ReactBootstrap = __webpack_require__(623);

	var ImportData = React.createClass({
	    displayName: 'ImportData',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({
	            showModal: false
	        });
	    },
	    open: function open() {
	        this.setState({
	            showModal: true
	        });
	        this.props.exportJsonData();
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'pull-left' },
	            React.createElement(
	                'a',
	                { title: 'export', className: 'btn btn-default themeBtn m-r5 export-json-btn pull-left', onClick: this.open },
	                React.createElement('i', { className: 'fa fa-cloud-download' })
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Export data ',
	                        React.createElement(
	                            'span',
	                            { className: 'small-span' },
	                            'in json'
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'p',
	                        { className: 'json-spinner' },
	                        React.createElement('i', { className: 'fa fa-spinner fa-spin' }),
	                        React.createElement(
	                            'span',
	                            null,
	                            ' Please wait, while we are loading'
	                        )
	                    ),
	                    React.createElement(
	                        'a',
	                        { href: '#', id: 'jsonlink',
	                            target: '_blank',
	                            download: 'data.json',
	                            className: 'btn btn-success hide' },
	                        'Download json'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = ImportData;

/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var FeatureComponent = __webpack_require__(506);
	var PageLoading = __webpack_require__(762);
	var Info = __webpack_require__(763);
	var Column = __webpack_require__(766);
	var Cell = __webpack_require__(769);
	var Table = __webpack_require__(770);

	// row/column manipulation functions.
	// We decided to roll our own as existing
	// libs with React.JS were missing critical
	// features.

	// This has the main properties that define the main data table
	// i.e. the right side.
	var DataTable = React.createClass({
	  displayName: 'DataTable',

	  render: function render() {
	    var $this = this;
	    var data = this.props._data;
	    var columns;
	    //If render from sort, dont change the order of columns
	    if (!$this.props.sortInfo.active) {
	      if ($this.props.infoObj.showing != 0) {
	        window.fixed = ['json'];
	        columns = ['json'];
	        var initial_final_cols = [{ column: 'json', type: '' }];
	      } else {
	        window.fixed = [];
	        var columns = [];
	        var initial_final_cols = [];
	      }

	      var fullColumns = {
	        type: '',
	        columns: columns,
	        final_cols: initial_final_cols
	      };
	      for (var each in data) {
	        fullColumns.type = data[each]['_type'];
	        for (var column in data[each]) {
	          if (fixed.indexOf(column) <= -1 && column != '_id' && column != '_type' && column != '_checked') {
	            if (fullColumns.columns.indexOf(column) <= -1) {
	              fullColumns.columns.push(column);
	              var obj = {
	                type: data[each]['_type'],
	                column: column
	              };
	              fullColumns.final_cols.push(obj);
	            }
	          }
	        }
	      }
	    }
	    var rows = [];
	    var visibleColumns = [];
	    var renderColumns = [];

	    for (var row in data) {
	      var newRow = {};
	      newRow['json'] = data[row]['json'];
	      // newRow['_type'] = data[row]['_type'];
	      // newRow['_id'] = data[row]['_id'];
	      for (var each in columns) {
	        // We check if every column of the new document
	        // is present already, if not we appen to the
	        // right.
	        if (window.fixed.indexOf(columns[each]) <= -1) {
	          if (data[row].hasOwnProperty([columns[each]])) {
	            var cell = data[row][columns[each]];
	            newRow[columns[each]] = cell;
	          } else {
	            // Just to make sure it doesn't display
	            // a null.
	            newRow[columns[each]] = '';
	          }
	        }
	      }
	      var renderRow = [];
	      for (var each in newRow) {
	        var _key = keyGen(data[row], each);
	        var elem = document.getElementById(each);
	        var visibility = '';

	        // We see if the column is already closed of open
	        // using the html key attribute and render their
	        // visibility correspondingly.
	        if (elem) {
	          visibility = elem.style.display;
	        }
	        renderRow.push(React.createElement(Cell, {
	          item: newRow[each],
	          unique: _key,
	          key: _key,
	          columnName: each,
	          _id: data[row]['_id'],
	          _type: data[row]['_type'],
	          visibility: visibility,
	          row: newRow,
	          actionOnRecord: $this.props.actionOnRecord }));
	      }
	      rows.push({
	        '_key': String(data[row]['_id']) + String(data[row]['_type']),
	        'row': renderRow
	      });
	    }
	    var renderColumns = fullColumns.final_cols.map(function (item) {
	      return React.createElement(Column, { _item: item.column, key: item.column,
	        _type: item.type,
	        _sortInfo: $this.props.sortInfo,
	        handleSort: $this.props.handleSort,
	        mappingObj: $this.props.mappingObj,
	        filterInfo: $this.props.filterInfo });
	    });
	    var visibleColumns = this.props.visibleColumns;

	    var renderRows1 = [];

	    // //If render from sort, dont render the coumns
	    var renderRows = rows.map(function (item, key) {
	      var _key = item['_key'];
	      var row = item['row'];
	      return React.createElement(
	        'tr',
	        { id: _key, key: _key },
	        row
	      );
	    });

	    //Extra add btn
	    var extraAddBtn = '';
	    //Show only when total records are less than 5
	    if (this.props.infoObj.availableTotal <= 5) {
	      extraAddBtn = React.createElement(
	        'div',
	        { className: 'AddExtraBtn' },
	        React.createElement(FeatureComponent.AddDocument, {
	          types: this.props.Types,
	          addRecord: this.props.addRecord,
	          getTypeDoc: this.props.getTypeDoc,
	          userTouchAdd: this.props.infoObj.userTouchAdd,
	          link: 'true',
	          text: '  Add new data',
	          selectClass: 'tags-select-big' })
	      );
	    }

	    //Page loading - show while paging
	    var pageLoadingComponent = this.props.pageLoading ? React.createElement(PageLoading, {
	      key: '123',
	      visibleColumns: visibleColumns,
	      pageLoading: this.props.pageLoading }) : '';

	    return React.createElement(
	      'div',
	      { className: 'dejavu-table' },
	      React.createElement(Info, { infoObj: this.props.infoObj,
	        totalRecord: this.props.totalRecord,
	        filterInfo: this.props.filterInfo,
	        removeFilter: this.props.removeFilter,
	        removeSort: this.props.removeSort,
	        removeHidden: this.props.removeHidden,
	        types: this.props.Types,
	        addRecord: this.props.addRecord,
	        getTypeDoc: this.props.getTypeDoc,
	        sortInfo: this.props.sortInfo,
	        columns: columns,
	        visibleColumns: visibleColumns,
	        hiddenColumns: this.props.hiddenColumns,
	        columnToggle: this.props.columnToggle,
	        actionOnRecord: this.props.actionOnRecord,
	        reloadData: this.props.reloadData,
	        exportJsonData: this.props.exportJsonData,
	        selectedTypes: this.props.selectedTypes }),
	      extraAddBtn,
	      React.createElement(
	        'div',
	        { className: 'outsideTable' },
	        React.createElement(Table, {
	          renderColumns: renderColumns,
	          visibleColumns: visibleColumns,
	          renderRows: renderRows,
	          scrollFunction: this.props.scrollFunction,
	          selectedTypes: this.props.selectedTypes,
	          filterInfo: this.props.filterInfo })
	      ),
	      pageLoadingComponent,
	      React.createElement('input', { id: 'copyId', className: 'hide' })
	    );
	  }
	});

	module.exports = DataTable;

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);

	var PageLoading = React.createClass({
	    displayName: 'PageLoading',

	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'pageLoading' },
	            React.createElement('div', { className: 'loadingBar' }),
	            React.createElement('div', { className: 'vertical1' })
	        );
	    }
	});

	module.exports = PageLoading;

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var FeatureComponent = __webpack_require__(506);
	var Dropdown = __webpack_require__(764);

	var Info = React.createClass({
	    displayName: 'Info',

	    getInitialState: function getInitialState() {
	        return {
	            selectToggle: false
	        };
	    },
	    selectToggleChange: function selectToggleChange() {
	        var checkFlag;
	        if (this.state.selectToggle) {
	            this.setState({
	                selectToggle: false
	            });
	            checkbox = false;
	        } else {
	            this.setState({
	                selectToggle: true
	            });
	            checkbox = true;
	        }
	        this.props.actionOnRecord.selectToggleChange(checkbox);
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        var checkFlag = this.props.actionOnRecord.selectToggle;
	        if (this.state.selectToggle !== checkFlag) {
	            this.setState({
	                selectToggle: checkFlag
	            });
	        }
	    },
	    render: function render() {
	        var selectedTypes = this.props.selectedTypes;
	        var infoObj = this.props.infoObj;
	        var totalRecord = this.props.totalRecord;
	        var filterInfo = this.props.filterInfo;
	        var sortInfo = this.props.sortInfo;
	        var actionOnRecord = this.props.actionOnRecord;
	        var hiddenColumns = this.props.hiddenColumns;
	        var filterClass = filterInfo.active ? 'pull-right text-right pd-r10' : 'hide';
	        var sortClass = sortInfo.active ? 'pull-right text-right pd-r10' : 'hide';
	        var hiddenClass = hiddenColumns.length ? 'pull-right text-right pd-r10' : 'hide';
	        var infoObjClass = !selectedTypes.length ? "hide" : "pull-left text-left pd-l0 recordTotalRow";
	        var sortAscClass = sortInfo.active && sortInfo.reverse ? 'fa fa-sort-alpha-desc' : 'fa fa-sort-alpha-asc';
	        var totalClass = actionOnRecord.active ? 'hide' : 'col-xs-12 pd-l0';
	        var selectionClass = actionOnRecord.active ? 'col-xs-12 pd-l0' : 'hide';

	        var UpdateDocument = actionOnRecord.selectedRows.length == 1 ? React.createElement(FeatureComponent.UpdateDocument, { actionOnRecord: actionOnRecord }) : '';

	        return React.createElement(
	            'div',
	            { className: 'infoRow container' },
	            React.createElement(
	                'div',
	                { className: ' row' },
	                React.createElement(
	                    'div',
	                    { className: infoObjClass },
	                    React.createElement(
	                        'div',
	                        { className: totalClass },
	                        React.createElement(
	                            'a',
	                            {
	                                href: 'javascript:void(0);',
	                                className: 'btn btn-default themeBtn m-r10',
	                                onClick: this.props.reloadData },
	                            React.createElement('i', { className: 'fa fa-refresh' }),
	                            ' Reload'
	                        ),
	                        React.createElement(
	                            'span',
	                            { className: 'info_single' },
	                            React.createElement(
	                                'label',
	                                null,
	                                'Showing',
	                                React.createElement(
	                                    'strong',
	                                    null,
	                                    ' ',
	                                    infoObj.showing
	                                ),
	                                ' of total',
	                                React.createElement(
	                                    'strong',
	                                    null,
	                                    ' ',
	                                    totalRecord
	                                )
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: selectionClass },
	                        React.createElement(
	                            'span',
	                            { className: 'theme-element checkbox pull-left pd-r10 mt-5' },
	                            React.createElement('input', {
	                                id: 'selectToggle',
	                                type: 'checkbox',
	                                key: '1',
	                                checked: this.state.selectToggle,
	                                onChange: this.selectToggleChange,
	                                readOnly: false }),
	                            React.createElement('label', { htmlFor: 'selectToggle' })
	                        ),
	                        React.createElement(
	                            'span',
	                            { className: 'pull-left pd-r10 info_single' },
	                            React.createElement(
	                                'strong',
	                                null,
	                                actionOnRecord.selectedRows.length
	                            ),
	                            ' selected of total',
	                            React.createElement(
	                                'strong',
	                                null,
	                                ' ',
	                                totalRecord
	                            )
	                        ),
	                        React.createElement(
	                            'span',
	                            { className: 'pull-left' },
	                            UpdateDocument,
	                            React.createElement(FeatureComponent.DeleteDocument, {
	                                actionOnRecord: actionOnRecord }),
	                            React.createElement(
	                                'a',
	                                { href: 'javascript:void(0);', className: 'info_single', onClick: actionOnRecord.removeSelection },
	                                'Remove Selection'
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'pull-right pd-r0' },
	                    React.createElement(Dropdown, {
	                        visibleColumns: this.props.visibleColumns,
	                        columnToggle: this.props.columnToggle,
	                        cols: this.props.columns }),
	                    React.createElement(FeatureComponent.AddDocument, {
	                        types: this.props.types,
	                        addRecord: this.props.addRecord,
	                        getTypeDoc: this.props.getTypeDoc,
	                        userTouchAdd: this.props.infoObj.userTouchAdd,
	                        selectClass: 'tags-select-small' }),
	                    React.createElement(
	                        'div',
	                        { className: filterClass },
	                        React.createElement(
	                            'a',
	                            { href: 'javascript:void(0)', className: 'removeFilter' },
	                            React.createElement(
	                                'span',
	                                { className: 'inside-info' },
	                                filterInfo.method,
	                                ': ',
	                                filterInfo.columnName
	                            ),
	                            React.createElement(
	                                'span',
	                                { className: 'close-btn', onClick: this.props.removeFilter },
	                                React.createElement('i', { className: 'fa fa-times' })
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: sortClass },
	                        React.createElement(
	                            'a',
	                            { href: 'javascript:void(0)', className: 'removeFilter' },
	                            React.createElement(
	                                'span',
	                                { className: 'inside-info' },
	                                React.createElement('i', { className: sortAscClass }),
	                                ' ',
	                                sortInfo.column
	                            ),
	                            React.createElement(
	                                'span',
	                                { className: 'close-btn', onClick: this.props.removeSort },
	                                React.createElement('i', { className: 'fa fa-times' })
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: hiddenClass },
	                        React.createElement(
	                            'a',
	                            { href: 'javascript:void(0)', className: 'removeFilter' },
	                            React.createElement(
	                                'span',
	                                { className: 'inside-info' },
	                                React.createElement('i', { className: 'fa fa-eye-slash' }),
	                                ' hide: ',
	                                hiddenColumns.length
	                            ),
	                            React.createElement(
	                                'span',
	                                { className: 'close-btn', onClick: this.props.removeHidden },
	                                React.createElement('i', { className: 'fa fa-times' })
	                            )
	                        )
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = Info;

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);
	var FieldCheckbox = __webpack_require__(765);
	/*
	 * This file contains the utility components, mainly the dropdown menu for
	 * selecting which fields to apphear in the table, also the checkboxes component
	 * for selecting and deselecting the columns(rendered inside the dropdown).
	 */

	var Dropdown = React.createClass({
	    displayName: 'Dropdown',

	    render: function render() {
	        var $this = this;
	        var Dropdown = ReactBootstrap.Dropdown;
	        var columns = this.props.cols;
	        var MenuItem = ReactBootstrap.MenuItem;
	        // We'll get the dropdown menu items i.e. checkboxes
	        // as a list of react components i.e FieldCheckbox.
	        var ColumnsCheckbox = columns.map(function (item, i) {
	            var key = dropdownKeyGen(item);
	            if (item != 'json') return React.createElement(FieldCheckbox, { columnToggle: $this.props.columnToggle, key: i, _type: item, _key: key });
	        });
	        return React.createElement(
	            Dropdown,
	            {
	                className: 'dejavu-dropdown pull-right ',
	                pullRight: true,
	                noCaret: true,
	                id: 'ab-dropdown' },
	            React.createElement(Dropdown.Toggle, { className: 'fa fa-cog', noCaret: true }),
	            React.createElement(
	                Dropdown.Menu,
	                null,
	                React.createElement(
	                    MenuItem,
	                    { header: true, className: 'centered-text' },
	                    'Displayed Attributes'
	                ),
	                React.createElement(MenuItem, { divider: true }),
	                ColumnsCheckbox
	            )
	        );
	    }
	});

	module.exports = Dropdown;

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);

	// The problem with checkboxes in bootstrap and react-bootstrap while using
	// them in react is that if you keep the fields checked by default, the don't
	// uncheck like I mean forever. This is an issue in the react-bootstrap.
	var FieldCheckbox = React.createClass({
	    displayName: 'FieldCheckbox',

	    getInitialState: function getInitialState() {
	        var elemID = this.props._type;
	        var checked = true;
	        var elem = document.getElementById(elemID);
	        // the elem here is the column header i.e the type.
	        // If its not visible, keep the checkbox by default
	        // unckecked. This is useful when you want to preserve
	        // your state even after refresh.
	        if (!elem) return {
	            isChecked: checked
	        };
	        if (elem.style.display === "none") {
	            checked = false;
	        }
	        return {
	            isChecked: checked
	        };
	    },
	    // This is the on-click handler for the checkboxes
	    // when we check/uncheck a checkbox, all the elements
	    // which belong to that column should be visible/invisible
	    // we do this by assigning specific keys to them. check KeyGen.
	    check: function check(elementId, event) {
	        var checked = true;
	        if (elementId == 'type / id') elementId = 'json';
	        //获取列的id
	        var eid = "columnId-" + elementId;
	        if (document.getElementById(eid).style.display === "none") {
	            document.getElementById(eid).style.display = "";
	            checked = true;

	            // we iterate through all the cells in that column via
	            // their id and then change their visibility.
	            for (var each in sdata) {
	                var key = keyGen(sdata[each], elementId);
	                document.getElementById(key).style.display = "";
	            }
	        } else {
	            document.getElementById(eid).style.display = "none";
	            checked = false;

	            for (var each in sdata) {
	                var key = keyGen(sdata[each], elementId);
	                document.getElementById(key).style.display = "none";
	            }
	        }
	        this.setState({
	            isChecked: checked
	        });
	        this.props.columnToggle().toggleIt(elementId, checked);
	    },
	    render: function render() {
	        var Input = ReactBootstrap.Input;
	        var key = dropdownKeyGen(this.props._type);
	        return React.createElement(
	            'div',
	            { className: 'ab-menu-item' },
	            React.createElement(
	                'div',
	                { className: 'checkbox theme-element' },
	                React.createElement('input', {
	                    id: key,
	                    type: 'checkbox', key: key,
	                    defaultChecked: this.state.isChecked,
	                    onChange: this.check.bind(null, this.props._type), readOnly: false }),
	                React.createElement(
	                    'label',
	                    { htmlFor: key },
	                    ' ',
	                    this.props._type,
	                    ' '
	                )
	            )
	        );
	    }
	});

	module.exports = FieldCheckbox;

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);
	var FilterDropdown = __webpack_require__(767);

	var cellWidth = '250px';
	var OverlayTrigger = ReactBootstrap.OverlayTrigger;
	var Popover = ReactBootstrap.Popover;

	var Column = React.createClass({
	  displayName: 'Column',

	  getInitialState: function getInitialState() {
	    return {
	      type: null
	    };
	  },
	  sortingInit: function sortingInit() {
	    this.props.handleSort(this.props._item, this.props._type, this);
	  },
	  componentDidMount: function componentDidMount() {
	    this.setState({
	      type: this.props._type
	    });
	  },
	  render: function render() {

	    var item = this.props._item;
	    var type = this.state.type == null ? this.props._type : this.state.type;
	    var sortInfo = this.props._sortInfo;
	    var filterInfo = this.props.filterInfo;

	    var filterClass = filterInfo.active && filterInfo.columnName == item ? 'filterActive' : '';
	    var extraClass = sortInfo.column == item ? 'sortActive ' + sortInfo.reverse : '';
	    var fixedHead = 'table-fixed-head column_width ' + extraClass + ' ' + filterClass;
	    var filterId = 'filter-' + item;
	    var datatype = null;
	    var analyzed = true;
	    var prettyData = " Clicking on {...} displays the JSON data. ";
	    var itemText = item == 'json' ? React.createElement(
	      'span',
	      null,
	      React.createElement(
	        OverlayTrigger,
	        { trigger: 'click', rootClose: true, placement: 'left',
	          overlay: React.createElement(
	            Popover,
	            { id: 'ab1', className: 'nestedJson jsonTitle' },
	            prettyData
	          ) },
	        React.createElement('a', { href: 'javascript:void(0);', className: 'bracketIcon' })
	      ),
	      React.createElement(
	        'span',
	        null,
	        '  type / id'
	      )
	    ) : React.createElement(
	      'span',
	      { onClick: this.sortingInit },
	      item
	    );
	    var thtextShow = item == 'json' ? 'leftGap thtextShow' : 'thtextShow';

	    //get the datatype if field is not json & type mapping has properties field
	    try {
	      if (item != 'json' && this.props.mappingObj[type].hasOwnProperty('properties') && typeof this.props.mappingObj[type] != 'undefined' && typeof this.props.mappingObj[type]['properties'][item] != 'undefined') {
	        datatype = this.props.mappingObj[type]['properties'][item].type;
	        analyzed = this.props.mappingObj[type]['properties'][item].index == 'not_analyzed' ? false : true;
	      }
	    } catch (err) {
	      console.log(err);
	    }

	    //Allow sorting if item is not the first column
	    //here first column is  json = type/id
	    var sortIcon = item == 'json' ? React.createElement('span', null) : React.createElement(
	      'span',
	      { className: 'sortIcon', onClick: this.sortingInit },
	      React.createElement('i', { className: 'fa fa-chevron-up asc-icon' }),
	      React.createElement('i', { className: 'fa fa-chevron-down desc-icon' })
	    );
	    //console.log(datatype, item);
	    //var handleSort = this.sortingInit;
	    //设置列的id
	    var columnId = "columnId-" + item;
	    return React.createElement(
	      'th',
	      { id: columnId, width: cellWidth, className: 'tableHead' },
	      React.createElement(
	        'div',
	        { className: fixedHead },
	        React.createElement(
	          'div',
	          { className: 'headText' },
	          React.createElement(
	            'div',
	            { className: thtextShow },
	            itemText
	          ),
	          React.createElement(
	            'div',
	            { className: 'iconList' },
	            sortIcon,
	            React.createElement(
	              'span',
	              { className: 'filterIcon' },
	              React.createElement(FilterDropdown, { columnField: item, type: type, datatype: datatype, analyzed: analyzed, filterInfo: this.props.filterInfo })
	            )
	          )
	        )
	      )
	    );
	  }
	});

	module.exports = Column;

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);
	var SingleMenuItem = __webpack_require__(768);

	//Filter dropdown for each column header
	var FilterDropdown = React.createClass({
	    displayName: 'FilterDropdown',

	    getInitialState: function getInitialState() {
	        return {
	            filterField: null,
	            filterValue: null
	        };
	    },
	    changeFilter: function changeFilter(field, value) {
	        this.setState({
	            filterField: field,
	            filterValue: value
	        });
	    },
	    boolFilter: function boolFilter(value) {
	        this.setState({
	            filterField: 'term',
	            filterValue: value
	        });
	    },
	    getFilterVal: function getFilterVal(val) {
	        this.setState({
	            filterValue: val
	        });
	    },
	    applyFilter: function applyFilter() {
	        if (this.state.filterField != null && this.state.filterValue != null && this.state.filterValue != '') this.props.filterInfo.applyFilter(this.props.type, this.props.columnField, this.state.filterField, this.state.filterValue, this.props.analyzed);
	    },
	    render: function render() {
	        var ButtonToolbar = ReactBootstrap.ButtonToolbar;
	        var DropdownButton = ReactBootstrap.DropdownButton;
	        var MenuItem = ReactBootstrap.MenuItem;
	        var Dropdown = ReactBootstrap.Dropdown;
	        var datatype = this.props.datatype;
	        var applyBtn = this.state.filterValue == '' ? 'true' : 'false';
	        var stringFilter = React.createElement(
	            Dropdown.Menu,
	            { className: 'menuItems pull-right pd-0' },
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, getFilterVal: this.getFilterVal, val: 'search' }),
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, getFilterVal: this.getFilterVal, val: 'has' }),
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, getFilterVal: this.getFilterVal, val: 'has not' }),
	            React.createElement(
	                'div',
	                { className: 'singleItem' },
	                React.createElement(
	                    'button',
	                    { className: 'btn btn-info col-xs-12', onClick: this.applyFilter },
	                    'Apply'
	                )
	            )
	        );

	        var numberFilter = React.createElement(
	            Dropdown.Menu,
	            { className: 'menuItems pull-right' },
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, getFilterVal: this.getFilterVal, val: 'greater than' }),
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, getFilterVal: this.getFilterVal, val: 'less than' }),
	            React.createElement(
	                'div',
	                { className: 'singleItem' },
	                React.createElement(
	                    'button',
	                    { className: 'btn btn-info col-xs-12', onClick: this.applyFilter },
	                    'Apply'
	                )
	            )
	        );

	        var dateFilter = React.createElement(
	            Dropdown.Menu,
	            { className: 'menuItems pull-right' },
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, datatype: datatype, getFilterVal: this.getFilterVal, val: 'greater than' }),
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, datatype: datatype, getFilterVal: this.getFilterVal, val: 'less than' }),
	            React.createElement(SingleMenuItem, { columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, datatype: datatype, getFilterVal: this.getFilterVal, val: 'range' }),
	            React.createElement(
	                'div',
	                { className: 'singleItem' },
	                React.createElement(
	                    'button',
	                    { className: 'btn btn-info col-xs-12', onClick: this.applyFilter },
	                    'Apply'
	                )
	            )
	        );

	        var booleanFilter = React.createElement(
	            Dropdown.Menu,
	            { className: 'menuItems pull-right' },
	            React.createElement(SingleMenuItem, { boolFilter: this.boolFilter, columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, datatype: datatype, getFilterVal: this.getFilterVal, val: 'true' }),
	            React.createElement(SingleMenuItem, { boolFilter: this.boolFilter, columnField: this.props.columnField, filterField: this.state.filterField, changeFilter: this.changeFilter, datatype: datatype, getFilterVal: this.getFilterVal, val: 'false' }),
	            React.createElement(
	                'div',
	                { className: 'singleItem' },
	                React.createElement(
	                    'button',
	                    { className: 'btn btn-info col-xs-12', onClick: this.applyFilter },
	                    'Apply'
	                )
	            )
	        );

	        var FilterMenuItems = '';

	        switch (datatype) {
	            case 'string':
	                FilterMenuItems = stringFilter;
	                break;
	            case 'long':
	            case 'integer':
	            case 'short':
	            case 'byte':
	            case 'double':
	            case 'float':
	                FilterMenuItems = numberFilter;
	                break;
	            case 'date':
	                FilterMenuItems = dateFilter;
	                break;
	            case 'boolean':
	                FilterMenuItems = booleanFilter;
	                break;
	            default:
	                datatype = null;
	                break;
	        }

	        if (datatype == null) {
	            return React.createElement('span', null);
	        } else {
	            return React.createElement(
	                'div',
	                { className: 'filterDropdown' },
	                React.createElement(
	                    ButtonToolbar,
	                    null,
	                    React.createElement(
	                        Dropdown,
	                        { id: 'ab', className: 'filterDropdownContainer' },
	                        React.createElement(
	                            Dropdown.Toggle,
	                            { className: 'filterBtn' },
	                            React.createElement('i', { className: 'fa fa-filter' })
	                        ),
	                        FilterMenuItems
	                    )
	                )
	            );
	        }
	    }
	});

	module.exports = FilterDropdown;

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);

	//Radio button with appropriate search input field
	var SingleMenuItem = React.createClass({
	    displayName: 'SingleMenuItem',

	    getInitialState: function getInitialState() {
	        return {
	            filterField: '',
	            filterValue: ''
	        };
	    },
	    changeFilter: function changeFilter(e) {
	        if (this.props.val != 'true' && this.props.val != 'false') {
	            var filterField = e.currentTarget.value;
	            this.props.changeFilter(filterField, this.state.filterValue);
	            var key = filterKeyGen(this.props.columnField, this.props.val);
	            var keyInput = key + '-input';
	            setTimeout(function () {
	                $('#' + keyInput).focus();
	            }, 300);
	        } else {
	            this.props.changeFilter('term', e.currentTarget.value);
	        }
	    },
	    valChange: function valChange(e) {
	        var filterValue = e.currentTarget.value;
	        this.setState({
	            filterValue: filterValue
	        });
	        this.props.getFilterVal(filterValue);
	    },
	    rangeChange: function rangeChange(key) {
	        var keyInput = key + '-input';
	        var keyInputRange = key + '-inputRange';
	        var startDate = $('#' + keyInput).val();
	        var endDate = $('#' + keyInputRange).val();
	        if (startDate != '' && endDate != '') {
	            var filterValue = startDate + '@' + endDate;
	            this.setState({
	                filterValue: filterValue
	            });
	            this.props.getFilterVal(filterValue);
	        }
	    },
	    render: function render() {
	        var singleItemClass = this.props.filterField == this.props.val ? 'singleItem active' : 'singleItem';
	        var placeholder = this.props.val == 'has' || this.props.val == 'has not' ? 'Type , for multiple' : 'Type here...';
	        var key = filterKeyGen(this.props.columnField, this.props.val);
	        var keyInput = key + '-input';
	        var keyInputRange = key + '-inputRange';

	        var searchElement = React.createElement(
	            'div',
	            { className: 'searchElement' },
	            React.createElement('input', { id: keyInput, className: 'form-control', type: 'text', placeholder: placeholder, onKeyUp: this.valChange })
	        );

	        if (this.props.val == 'range') {
	            searchElement = React.createElement(
	                'div',
	                { className: 'searchElement' },
	                React.createElement('input', { id: keyInput,
	                    className: 'form-control',
	                    type: 'text',
	                    placeholder: 'starting date',
	                    onKeyUp: this.rangeChange.bind(null, key) }),
	                React.createElement('input', { id: keyInputRange,
	                    className: 'form-control mt-5',
	                    type: 'text',
	                    placeholder: 'ending date',
	                    onKeyUp: this.rangeChange.bind(null, key) })
	            );
	        } else if (this.props.val == 'true' || this.props.val == 'false') {
	            searchElement = React.createElement('span', null);
	        }

	        return React.createElement(
	            'div',
	            { className: singleItemClass },
	            React.createElement(
	                'div',
	                { className: 'theme-element radio' },
	                React.createElement('input', { onChange: this.changeFilter, type: 'radio', name: 'optionsRadios',
	                    value: this.props.val, id: key }),
	                React.createElement(
	                    'label',
	                    { htmlFor: key },
	                    React.createElement(
	                        'span',
	                        { className: 'lableText' },
	                        this.props.val
	                    )
	                )
	            ),
	            searchElement
	        );
	    }
	});

	module.exports = SingleMenuItem;

/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);
	var FeatureComponent = __webpack_require__(506);
	var Info = __webpack_require__(763);
	var Pretty = FeatureComponent.Pretty;
	// row/column manipulation functions.
	// We decided to roll our own as existing
	// libs with React.JS were missing critical
	// features.
	var cellWidth = '250px';

	// **Cell** defines the properties of each cell in the
	// data table.
	var Cell = React.createClass({
	  displayName: 'Cell',

	  getInitialState: function getInitialState() {
	    return {
	      checked: false
	    };
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      appIdClass: "appId"
	    };
	  },
	  copyId: function copyId() {
	    var range = document.createRange();
	    var selection = window.getSelection();
	    range.selectNodeContents(document.getElementById(this.props.unique));
	    selection.removeAllRanges();
	    selection.addRange(range);
	    $('#copyId').val(this.props._type + '/' + this.props._id).select();
	    document.execCommand("copy");
	  },
	  selectRecord: function selectRecord(ele) {
	    var checkFlag;
	    if (this.state.checked) {
	      this.setState({
	        checked: false
	      });
	      checkbox = false;
	    } else {
	      this.setState({
	        checked: true
	      });
	      checkbox = true;
	    }
	    _id = this.props._id;
	    _type = this.props._type;
	    row = this.props.row;
	    this.props.actionOnRecord.selectRecord(_id, _type, row, checkFlag);
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    var self = this;
	    var _id = this.props._id;
	    var checkFlag = false;
	    if (this.props.actionOnRecord.selectedRows.length) {
	      this.props.actionOnRecord.selectedRows.forEach(function (v) {
	        if (v._id == _id) checkFlag = true;
	      });
	    } else checkFlag = false;
	    if (this.state.checked !== checkFlag) {
	      this.setState({
	        checked: checkFlag
	      });
	    }
	  },
	  render: function render() {
	    var self = this;
	    var OverlayTrigger = ReactBootstrap.OverlayTrigger;
	    var Popover = ReactBootstrap.Popover;
	    var actionOnRecord = this.props.actionOnRecord;
	    var row = JSON.stringify(this.props.row);
	    // exposing visibility property allows us to show / hide
	    // individual cells
	    var vb = this.props.visibility;
	    var style = {
	      display: vb
	    };
	    var data = this.props.item;
	    // The id of the html element is generated
	    // in keys.js.
	    var _id = this.props._id;
	    var _type = this.props._type;
	    var to_display = data;
	    var tdClass = 'column_width columnAdjust';

	    var columnName = this.props.columnName;
	    var radioId = this.props.unique + 'radio';
	    // cell-data of format ``string`` and ``number`` is rendered inline.
	    // If a field is a JSON object instead, it's displayed as a modal pop-up.
	    // <a href="#"
	    //                         onClick={showJSON.bind(null, data, _type, _id)}>
	    //                         <i className="fa fa-external-link" />
	    //                     </a>;
	    var appIdClass = 'appId';
	    if (this.state.checked) {
	      appIdClass += " showRow";
	    }
	    if (columnName == 'json') {
	      var prettyData = React.createElement(Pretty, { json: data });
	      to_display = React.createElement(
	        'div',
	        { className: appIdClass },
	        React.createElement(
	          'span',
	          { className: 'theme-element selectrow checkbox' },
	          React.createElement('input', { onChange: this.selectRecord, className: 'rowSelectionCheckbox', type: 'checkbox', name: 'selectRecord',
	            value: _id, 'data-type': _type, 'data-row': row, id: radioId, checked: this.state.checked }),
	          React.createElement('label', { htmlFor: radioId })
	        ),
	        React.createElement(
	          OverlayTrigger,
	          { trigger: 'click', rootClose: true, placement: 'left', overlay: React.createElement(
	              Popover,
	              { id: 'ab1', className: 'nestedJson' },
	              prettyData
	            ) },
	          React.createElement('a', { href: 'javascript:void(0);', className: 'appId_icon bracketIcon' })
	        ),
	        React.createElement(
	          'span',
	          { className: 'appId_name', onClick: this.copyId },
	          React.createElement(
	            'span',
	            { className: 'appId_appname', title: _type },
	            _type,
	            ' / '
	          ),
	          React.createElement(
	            'span',
	            { className: 'appId_id', title: _id },
	            _id
	          )
	        )
	      );
	      tdClass = 'column_width';
	    } else {
	      if (typeof data !== 'string' && typeof data !== 'number' && typeof data !== 'boolean') {
	        var prettyData = React.createElement(Pretty, { json: data });
	        to_display = React.createElement(
	          OverlayTrigger,
	          { trigger: 'click', rootClose: true, placement: 'left', overlay: React.createElement(
	              Popover,
	              { id: 'ab1', className: 'nestedJson' },
	              prettyData
	            ) },
	          React.createElement('a', { href: 'javascript:void(0);', className: 'bracketIcon' })
	        );
	        tdClass = 'column_width';
	      }
	      if (typeof data === 'boolean') {
	        to_display = to_display + '';
	      }
	    }
	    return React.createElement(
	      'td',
	      {
	        width: cellWidth,
	        id: this.props.unique,
	        key: this.props.unique,
	        style: style,
	        className: tdClass },
	      to_display
	    );
	  }
	});

	module.exports = Cell;

/***/ },
/* 770 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var FeatureComponent = __webpack_require__(506);
	var Info = __webpack_require__(763);
	// row/column manipulation functions.
	// We decided to roll our own as existing
	// libs with React.JS were missing critical
	// features.

	// **Cell** defines the properties of each cell in the
	// data table.

	// This is another wrapper around the data table to implement
	// pagination, throbbers, styling etc.
	var Table = React.createClass({
	    displayName: 'Table',

	    componentDidMount: function componentDidMount() {
	        var elem = document.getElementById('table-scroller');
	        // WE are listning for scroll even so we get notified
	        // when the scroll hits the bottom. For pagination.
	        elem.addEventListener('scroll', this.props.scrollFunction);
	    },
	    render: function render() {
	        var column_width = 250;
	        var elem = document.getElementById('table-scroller');
	        if (elem != null) {
	            elem.style.width = this.props.visibleColumns.length * column_width + 'px';
	        }
	        return React.createElement(
	            'div',
	            { id: 'table-container', className: 'table-container' },
	            React.createElement(
	                'div',
	                { id: 'table-scroller', className: 'table-scroller' },
	                React.createElement(
	                    'table',
	                    { id: 'data-table',
	                        className: 'table table-fixedheader table-bordered' },
	                    React.createElement(
	                        'thead',
	                        { id: 'columns' },
	                        React.createElement(
	                            'tr',
	                            null,
	                            this.props.renderColumns
	                        )
	                    ),
	                    React.createElement(
	                        'tbody',
	                        { className: 'exp-scrollable' },
	                        this.props.renderRows
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = Table;

/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(347);
	var ReactBootstrap = __webpack_require__(623);
	var OverlayTrigger = ReactBootstrap.OverlayTrigger;
	var Popover = ReactBootstrap.Popover;

	var ShareLink = React.createClass({
	  displayName: 'ShareLink',

	  getInitialState: function getInitialState() {
	    return {
	      url: '',
	      copied: ''
	    };
	  },
	  selectText: function selectText() {
	    var url = convertToUrl();
	    this.setState({ url: url, copied: '' });
	    setTimeout((function () {
	      var ele = document.getElementById('for-share');
	      var succeed = this.copyToClipboard(ele);
	      if (succeed) {
	        this.setState({ copied: 'Link is copied to clipboard!' });
	      }
	    }).bind(this), 500);
	  },
	  copyToClipboard: function copyToClipboard(elem) {
	    // create hidden text element, if it doesn't already exist
	    var targetId = "_hiddenCopyText_";
	    var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
	    var origSelectionStart, origSelectionEnd;
	    if (isInput) {
	      // can just use the original source element for the selection and copy
	      target = elem;
	      origSelectionStart = elem.selectionStart;
	      origSelectionEnd = elem.selectionEnd;
	    } else {
	      // must use a temporary form element for the selection and copy
	      target = document.getElementById(targetId);
	      if (!target) {
	        var target = document.createElement("textarea");
	        target.style.position = "absolute";
	        target.style.left = "-9999px";
	        target.style.top = "0";
	        target.id = targetId;
	        document.body.appendChild(target);
	      }
	      target.textContent = elem.textContent;
	    }
	    // select the content
	    var currentFocus = document.activeElement;
	    target.focus();
	    target.setSelectionRange(0, target.value.length);

	    // copy the selection
	    var succeed;
	    try {
	      succeed = document.execCommand("copy");
	    } catch (e) {
	      succeed = false;
	    }
	    // restore original focus
	    if (currentFocus && typeof currentFocus.focus === "function") {
	      currentFocus.focus();
	    }

	    if (isInput) {
	      // restore prior selection
	      elem.setSelectionRange(origSelectionStart, origSelectionEnd);
	    } else {
	      // clear temporary content
	      target.textContent = "";
	    }
	    return succeed;
	  },
	  changeUrl: function changeUrl() {},
	  componentDidUpdate: function componentDidUpdate() {},
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: this.props.btn },
	      React.createElement(
	        OverlayTrigger,
	        { rootClose: true, trigger: 'click', onClick: this.selectText, placement: 'right', overlay: React.createElement(
	            Popover,
	            { id: 'share_pop', className: 'nestedJson' },
	            React.createElement(
	              'div',
	              { className: 'share_content' },
	              React.createElement('input', { type: 'text', className: 'form-control', value: this.state.url, onChange: this.changeUrl, id: 'for-share' }),
	              React.createElement(
	                'p',
	                { className: 'mt-10' },
	                this.state.copied
	              )
	            )
	          ) },
	        React.createElement(
	          'a',
	          { href: 'javascript:void(0);', className: 'btn btn-default' },
	          React.createElement(
	            'i',
	            { className: 'fa fa-share-alt' },
	            ' '
	          )
	        )
	      )
	    );
	  }
	});

	module.exports = ShareLink;

/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	//This contains the extra features like
	//Import data, Export Data, Add document, Pretty Json
	'use strict';

	var _extends = __webpack_require__(218)['default'];

	var React = __webpack_require__(347);

	var AppSelect = React.createClass({
	  displayName: 'AppSelect',

	  getInitialState: function getInitialState() {
	    return {
	      selectVal: null,
	      apps: null,
	      searchValue: '',
	      setAppClass: 'hide'
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.setState({
	      searchValue: "customer_36v8tudu9z"
	    });
	  },
	  handleInput: function handleInput(event) {
	    this.setState({
	      searchValue: event.target.value
	    });
	    if (this.props.appnameCb) {
	      this.props.appnameCb(event.target.value);
	    }
	  },
	  focusInput: function focusInput() {
	    if (this.props.apps.length && !this.props.connect) {
	      this.setState({
	        setAppClass: 'show'
	      });
	    }
	  },
	  blurInput: function blurInput() {
	    setTimeout((function () {
	      this.setState({
	        setAppClass: 'hide'
	      });
	    }).bind(this), 300);
	  },
	  selectOption: function selectOption(appname) {
	    this.setState({
	      searchValue: appname
	    });
	    var app_config = this.props.apps.filter(function (app, index) {
	      if (app.appname === appname) {
	        return {
	          appname: app.appname,
	          url: app.url
	        };
	      }
	    });
	    if (app_config.length && app_config[0].url) {
	      this.props.setConfig(app_config[0].url);
	    }
	  },
	  render: function render() {
	    var opts = {};
	    if (this.props.connect) {
	      opts['readOnly'] = 'readOnly';
	    }
	    var optionsArr = this.props.apps.filter((function (app, index) {
	      if (typeof app.appname == 'string') return this.state.searchValue === null || this.state.searchValue === '' || this.state.searchValue !== '' && app.appname.toUpperCase().indexOf(this.state.searchValue.toUpperCase()) !== -1;else return false;
	    }).bind(this));

	    var options = optionsArr.map((function (app, index) {
	      return React.createElement(
	        'li',
	        { key: index, onClick: this.selectOption.bind(this, app.appname) },
	        app.appname
	      );
	    }).bind(this));

	    var searchValue = this.state.searchValue;
	    var setAppClass = options.length == 0 ? 'hide' : 'autolist setApp col-xs-12 ' + this.state.setAppClass;
	    return React.createElement(
	      'div',
	      { className: 'autocomplete' },
	      React.createElement('input', _extends({ className: 'search form-control',
	        type: 'text',
	        value: searchValue,
	        name: 'appname',
	        placeholder: 'Appname (aka index) goes here',
	        onChange: this.handleInput,
	        onFocus: this.focusInput, onBlur: this.blurInput }, opts)),
	      React.createElement(
	        'ul',
	        { id: 'setApp', className: setAppClass, name: 'apps' },
	        options
	      )
	    );
	  }
	});

	module.exports = AppSelect;

/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(774);

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */

	'use strict';

	var shallowCompare = __webpack_require__(775);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function (nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule shallowCompare
	*/

	'use strict';

	var shallowEqual = __webpack_require__(462);

	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}

	module.exports = shallowCompare;

/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;/*!
	 * Select2 4.0.3
	 * https://select2.github.io
	 *
	 * Released under the MIT license
	 * https://github.com/select2/select2/blob/master/LICENSE.md
	 */
	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(208)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node/CommonJS
	    factory(require('jquery'));
	  } else {
	    // Browser globals
	    factory(jQuery);
	  }
	}(function (jQuery) {
	  // This is needed so we can catch the AMD loader configuration and use it
	  // The inner file should be wrapped (by `banner.start.js`) in a function that
	  // returns the AMD loader references.
	  var S2 =
	(function () {
	  // Restore the Select2 AMD loader so it can be used
	  // Needed mostly in the language files, where the loader is not inserted
	  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
	    var S2 = jQuery.fn.select2.amd;
	  }
	var S2;(function () { if (!S2 || !S2.requirejs) {
	if (!S2) { S2 = {}; } else { require = S2; }
	/**
	 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/almond for details
	 */
	//Going sloppy to avoid 'use strict' string cost, but strict practices should
	//be followed.
	/*jslint sloppy: true */
	/*global setTimeout: false */

	var requirejs, require, define;
	(function (undef) {
	    var main, req, makeMap, handlers,
	        defined = {},
	        waiting = {},
	        config = {},
	        defining = {},
	        hasOwn = Object.prototype.hasOwnProperty,
	        aps = [].slice,
	        jsSuffixRegExp = /\.js$/;

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    /**
	     * Given a relative module name, like ./something, normalize it to
	     * a real name that can be mapped to a path.
	     * @param {String} name the relative name
	     * @param {String} baseName a real name that the name arg is relative
	     * to.
	     * @returns {String} normalized name
	     */
	    function normalize(name, baseName) {
	        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
	            foundI, foundStarMap, starI, i, j, part,
	            baseParts = baseName && baseName.split("/"),
	            map = config.map,
	            starMap = (map && map['*']) || {};

	        //Adjust any relative paths.
	        if (name && name.charAt(0) === ".") {
	            //If have a base name, try to normalize against it,
	            //otherwise, assume it is a top-level require that will
	            //be relative to baseUrl in the end.
	            if (baseName) {
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // Node .js allowance:
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                //Lop off the last part of baseParts, so that . matches the
	                //"directory" and not name of the baseName's module. For instance,
	                //baseName of "one/two/three", maps to "one/two/three.js", but we
	                //want the directory, "one/two" for this normalization.
	                name = baseParts.slice(0, baseParts.length - 1).concat(name);

	                //start trimDots
	                for (i = 0; i < name.length; i += 1) {
	                    part = name[i];
	                    if (part === ".") {
	                        name.splice(i, 1);
	                        i -= 1;
	                    } else if (part === "..") {
	                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
	                            //End of the line. Keep at least one non-dot
	                            //path segment at the front so it can be mapped
	                            //correctly to disk. Otherwise, there is likely
	                            //no path mapping for a path starting with '..'.
	                            //This can still fail, but catches the most reasonable
	                            //uses of ..
	                            break;
	                        } else if (i > 0) {
	                            name.splice(i - 1, 2);
	                            i -= 2;
	                        }
	                    }
	                }
	                //end trimDots

	                name = name.join("/");
	            } else if (name.indexOf('./') === 0) {
	                // No baseName, so this is ID is resolved relative
	                // to baseUrl, pull off the leading dot.
	                name = name.substring(2);
	            }
	        }

	        //Apply map config if available.
	        if ((baseParts || starMap) && map) {
	            nameParts = name.split('/');

	            for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                    //Find the longest baseName segment match in the config.
	                    //So, do joins on the biggest to smallest lengths of baseParts.
	                    for (j = baseParts.length; j > 0; j -= 1) {
	                        mapValue = map[baseParts.slice(0, j).join('/')];

	                        //baseName segment has  config, find if it has one for
	                        //this name.
	                        if (mapValue) {
	                            mapValue = mapValue[nameSegment];
	                            if (mapValue) {
	                                //Match, update name to the new value.
	                                foundMap = mapValue;
	                                foundI = i;
	                                break;
	                            }
	                        }
	                    }
	                }

	                if (foundMap) {
	                    break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                    foundStarMap = starMap[nameSegment];
	                    starI = i;
	                }
	            }

	            if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	            }

	            if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	            }
	        }

	        return name;
	    }

	    function makeRequire(relName, forceSync) {
	        return function () {
	            //A version of a require function that passes a moduleName
	            //value for items that may need to
	            //look up paths relative to the moduleName
	            var args = aps.call(arguments, 0);

	            //If first arg is not require('string'), and there is only
	            //one arg, it is the array form without a callback. Insert
	            //a null so that the following concat is correct.
	            if (typeof args[0] !== 'string' && args.length === 1) {
	                args.push(null);
	            }
	            return req.apply(undef, args.concat([relName, forceSync]));
	        };
	    }

	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(depName) {
	        return function (value) {
	            defined[depName] = value;
	        };
	    }

	    function callDep(name) {
	        if (hasProp(waiting, name)) {
	            var args = waiting[name];
	            delete waiting[name];
	            defining[name] = true;
	            main.apply(undef, args);
	        }

	        if (!hasProp(defined, name) && !hasProp(defining, name)) {
	            throw new Error('No ' + name);
	        }
	        return defined[name];
	    }

	    //Turns a plugin!resource to [plugin, resource]
	    //with the plugin being undefined if the name
	    //did not have a plugin prefix.
	    function splitPrefix(name) {
	        var prefix,
	            index = name ? name.indexOf('!') : -1;
	        if (index > -1) {
	            prefix = name.substring(0, index);
	            name = name.substring(index + 1, name.length);
	        }
	        return [prefix, name];
	    }

	    /**
	     * Makes a name map, normalizing the name, and using a plugin
	     * for normalization if necessary. Grabs a ref to plugin
	     * too, as an optimization.
	     */
	    makeMap = function (name, relName) {
	        var plugin,
	            parts = splitPrefix(name),
	            prefix = parts[0];

	        name = parts[1];

	        if (prefix) {
	            prefix = normalize(prefix, relName);
	            plugin = callDep(prefix);
	        }

	        //Normalize according
	        if (prefix) {
	            if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relName));
	            } else {
	                name = normalize(name, relName);
	            }
	        } else {
	            name = normalize(name, relName);
	            parts = splitPrefix(name);
	            prefix = parts[0];
	            name = parts[1];
	            if (prefix) {
	                plugin = callDep(prefix);
	            }
	        }

	        //Using ridiculous property names for space reasons
	        return {
	            f: prefix ? prefix + '!' + name : name, //fullName
	            n: name,
	            pr: prefix,
	            p: plugin
	        };
	    };

	    function makeConfig(name) {
	        return function () {
	            return (config && config.config && config.config[name]) || {};
	        };
	    }

	    handlers = {
	        require: function (name) {
	            return makeRequire(name);
	        },
	        exports: function (name) {
	            var e = defined[name];
	            if (typeof e !== 'undefined') {
	                return e;
	            } else {
	                return (defined[name] = {});
	            }
	        },
	        module: function (name) {
	            return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	            };
	        }
	    };

	    main = function (name, deps, callback, relName) {
	        var cjsModule, depName, ret, map, i,
	            args = [],
	            callbackType = typeof callback,
	            usingExports;

	        //Use name if no relName
	        relName = relName || name;

	        //Call the callback to define the module, if necessary.
	        if (callbackType === 'undefined' || callbackType === 'function') {
	            //Pull out the defined dependencies and pass the ordered
	            //values to the callback.
	            //Default to [require, exports, module] if no deps
	            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	            for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relName);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                    args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                    //CommonJS module spec 1.1
	                    args[i] = handlers.exports(name);
	                    usingExports = true;
	                } else if (depName === "module") {
	                    //CommonJS module spec 1.1
	                    cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) ||
	                           hasProp(waiting, depName) ||
	                           hasProp(defining, depName)) {
	                    args[i] = callDep(depName);
	                } else if (map.p) {
	                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                    args[i] = defined[depName];
	                } else {
	                    throw new Error(name + ' missing ' + depName);
	                }
	            }

	            ret = callback ? callback.apply(defined[name], args) : undefined;

	            if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef &&
	                        cjsModule.exports !== defined[name]) {
	                    defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                    //Use the return value from the function.
	                    defined[name] = ret;
	                }
	            }
	        } else if (name) {
	            //May just be an object definition for the module. Only
	            //worry about defining if have a module name.
	            defined[name] = callback;
	        }
	    };

	    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	        if (typeof deps === "string") {
	            if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	            }
	            //Just return the module wanted. In this scenario, the
	            //deps arg is the module name, and second arg (if passed)
	            //is just the relName.
	            //Normalize module name, if it contains . or ..
	            return callDep(makeMap(deps, callback).f);
	        } else if (!deps.splice) {
	            //deps is a config object, not an array.
	            config = deps;
	            if (config.deps) {
	                req(config.deps, config.callback);
	            }
	            if (!callback) {
	                return;
	            }

	            if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	            } else {
	                deps = undef;
	            }
	        }

	        //Support require(['a'])
	        callback = callback || function () {};

	        //If relName is a function, it is an errback handler,
	        //so remove it.
	        if (typeof relName === 'function') {
	            relName = forceSync;
	            forceSync = alt;
	        }

	        //Simulate async callback;
	        if (forceSync) {
	            main(undef, deps, callback, relName);
	        } else {
	            //Using a non-zero value because of concern for what old browsers
	            //do, and latest browsers "upgrade" to 4 if lower value is used:
	            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	            //If want a value immediately, use require('id') instead -- something
	            //that works in almond on the global level, but not guaranteed and
	            //unlikely to work in other AMD implementations.
	            setTimeout(function () {
	                main(undef, deps, callback, relName);
	            }, 4);
	        }

	        return req;
	    };

	    /**
	     * Just drops the config on the floor, but returns req in case
	     * the config return value is used.
	     */
	    req.config = function (cfg) {
	        return req(cfg);
	    };

	    /**
	     * Expose module registry for debugging and tooling
	     */
	    requirejs._defined = defined;

	    define = function (name, deps, callback) {
	        if (typeof name !== 'string') {
	            throw new Error('See almond README: incorrect module build, no module name');
	        }

	        //This module may not have dependencies
	        if (!deps.splice) {
	            //deps is not an array, so probably means
	            //an object literal or factory function for
	            //the value. Adjust args.
	            callback = deps;
	            deps = [];
	        }

	        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	            waiting[name] = [name, deps, callback];
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };
	}());

	S2.requirejs = requirejs;S2.require = require;S2.define = define;
	}
	}());
	S2.define("almond", function(){});

	/* global jQuery:false, $:false */
	S2.define('jquery',[],function () {
	  var _$ = jQuery || $;

	  if (_$ == null && console && console.error) {
	    console.error(
	      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
	      'found. Make sure that you are including jQuery before Select2 on your ' +
	      'web page.'
	    );
	  }

	  return _$;
	});

	S2.define('select2/utils',[
	  'jquery'
	], function ($) {
	  var Utils = {};

	  Utils.Extend = function (ChildClass, SuperClass) {
	    var __hasProp = {}.hasOwnProperty;

	    function BaseConstructor () {
	      this.constructor = ChildClass;
	    }

	    for (var key in SuperClass) {
	      if (__hasProp.call(SuperClass, key)) {
	        ChildClass[key] = SuperClass[key];
	      }
	    }

	    BaseConstructor.prototype = SuperClass.prototype;
	    ChildClass.prototype = new BaseConstructor();
	    ChildClass.__super__ = SuperClass.prototype;

	    return ChildClass;
	  };

	  function getMethods (theClass) {
	    var proto = theClass.prototype;

	    var methods = [];

	    for (var methodName in proto) {
	      var m = proto[methodName];

	      if (typeof m !== 'function') {
	        continue;
	      }

	      if (methodName === 'constructor') {
	        continue;
	      }

	      methods.push(methodName);
	    }

	    return methods;
	  }

	  Utils.Decorate = function (SuperClass, DecoratorClass) {
	    var decoratedMethods = getMethods(DecoratorClass);
	    var superMethods = getMethods(SuperClass);

	    function DecoratedClass () {
	      var unshift = Array.prototype.unshift;

	      var argCount = DecoratorClass.prototype.constructor.length;

	      var calledConstructor = SuperClass.prototype.constructor;

	      if (argCount > 0) {
	        unshift.call(arguments, SuperClass.prototype.constructor);

	        calledConstructor = DecoratorClass.prototype.constructor;
	      }

	      calledConstructor.apply(this, arguments);
	    }

	    DecoratorClass.displayName = SuperClass.displayName;

	    function ctr () {
	      this.constructor = DecoratedClass;
	    }

	    DecoratedClass.prototype = new ctr();

	    for (var m = 0; m < superMethods.length; m++) {
	        var superMethod = superMethods[m];

	        DecoratedClass.prototype[superMethod] =
	          SuperClass.prototype[superMethod];
	    }

	    var calledMethod = function (methodName) {
	      // Stub out the original method if it's not decorating an actual method
	      var originalMethod = function () {};

	      if (methodName in DecoratedClass.prototype) {
	        originalMethod = DecoratedClass.prototype[methodName];
	      }

	      var decoratedMethod = DecoratorClass.prototype[methodName];

	      return function () {
	        var unshift = Array.prototype.unshift;

	        unshift.call(arguments, originalMethod);

	        return decoratedMethod.apply(this, arguments);
	      };
	    };

	    for (var d = 0; d < decoratedMethods.length; d++) {
	      var decoratedMethod = decoratedMethods[d];

	      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
	    }

	    return DecoratedClass;
	  };

	  var Observable = function () {
	    this.listeners = {};
	  };

	  Observable.prototype.on = function (event, callback) {
	    this.listeners = this.listeners || {};

	    if (event in this.listeners) {
	      this.listeners[event].push(callback);
	    } else {
	      this.listeners[event] = [callback];
	    }
	  };

	  Observable.prototype.trigger = function (event) {
	    var slice = Array.prototype.slice;
	    var params = slice.call(arguments, 1);

	    this.listeners = this.listeners || {};

	    // Params should always come in as an array
	    if (params == null) {
	      params = [];
	    }

	    // If there are no arguments to the event, use a temporary object
	    if (params.length === 0) {
	      params.push({});
	    }

	    // Set the `_type` of the first object to the event
	    params[0]._type = event;

	    if (event in this.listeners) {
	      this.invoke(this.listeners[event], slice.call(arguments, 1));
	    }

	    if ('*' in this.listeners) {
	      this.invoke(this.listeners['*'], arguments);
	    }
	  };

	  Observable.prototype.invoke = function (listeners, params) {
	    for (var i = 0, len = listeners.length; i < len; i++) {
	      listeners[i].apply(this, params);
	    }
	  };

	  Utils.Observable = Observable;

	  Utils.generateChars = function (length) {
	    var chars = '';

	    for (var i = 0; i < length; i++) {
	      var randomChar = Math.floor(Math.random() * 36);
	      chars += randomChar.toString(36);
	    }

	    return chars;
	  };

	  Utils.bind = function (func, context) {
	    return function () {
	      func.apply(context, arguments);
	    };
	  };

	  Utils._convertData = function (data) {
	    for (var originalKey in data) {
	      var keys = originalKey.split('-');

	      var dataLevel = data;

	      if (keys.length === 1) {
	        continue;
	      }

	      for (var k = 0; k < keys.length; k++) {
	        var key = keys[k];

	        // Lowercase the first letter
	        // By default, dash-separated becomes camelCase
	        key = key.substring(0, 1).toLowerCase() + key.substring(1);

	        if (!(key in dataLevel)) {
	          dataLevel[key] = {};
	        }

	        if (k == keys.length - 1) {
	          dataLevel[key] = data[originalKey];
	        }

	        dataLevel = dataLevel[key];
	      }

	      delete data[originalKey];
	    }

	    return data;
	  };

	  Utils.hasScroll = function (index, el) {
	    // Adapted from the function created by @ShadowScripter
	    // and adapted by @BillBarry on the Stack Exchange Code Review website.
	    // The original code can be found at
	    // http://codereview.stackexchange.com/q/13338
	    // and was designed to be used with the Sizzle selector engine.

	    var $el = $(el);
	    var overflowX = el.style.overflowX;
	    var overflowY = el.style.overflowY;

	    //Check both x and y declarations
	    if (overflowX === overflowY &&
	        (overflowY === 'hidden' || overflowY === 'visible')) {
	      return false;
	    }

	    if (overflowX === 'scroll' || overflowY === 'scroll') {
	      return true;
	    }

	    return ($el.innerHeight() < el.scrollHeight ||
	      $el.innerWidth() < el.scrollWidth);
	  };

	  Utils.escapeMarkup = function (markup) {
	    var replaceMap = {
	      '\\': '&#92;',
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      '\'': '&#39;',
	      '/': '&#47;'
	    };

	    // Do not try to escape the markup if it's not a string
	    if (typeof markup !== 'string') {
	      return markup;
	    }

	    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
	      return replaceMap[match];
	    });
	  };

	  // Append an array of jQuery nodes to a given element.
	  Utils.appendMany = function ($element, $nodes) {
	    // jQuery 1.7.x does not support $.fn.append() with an array
	    // Fall back to a jQuery object collection using $.fn.add()
	    if ($.fn.jquery.substr(0, 3) === '1.7') {
	      var $jqNodes = $();

	      $.map($nodes, function (node) {
	        $jqNodes = $jqNodes.add(node);
	      });

	      $nodes = $jqNodes;
	    }

	    $element.append($nodes);
	  };

	  return Utils;
	});

	S2.define('select2/results',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Results ($element, options, dataAdapter) {
	    this.$element = $element;
	    this.data = dataAdapter;
	    this.options = options;

	    Results.__super__.constructor.call(this);
	  }

	  Utils.Extend(Results, Utils.Observable);

	  Results.prototype.render = function () {
	    var $results = $(
	      '<ul class="select2-results__options" role="tree"></ul>'
	    );

	    if (this.options.get('multiple')) {
	      $results.attr('aria-multiselectable', 'true');
	    }

	    this.$results = $results;

	    return $results;
	  };

	  Results.prototype.clear = function () {
	    this.$results.empty();
	  };

	  Results.prototype.displayMessage = function (params) {
	    var escapeMarkup = this.options.get('escapeMarkup');

	    this.clear();
	    this.hideLoading();

	    var $message = $(
	      '<li role="treeitem" aria-live="assertive"' +
	      ' class="select2-results__option"></li>'
	    );

	    var message = this.options.get('translations').get(params.message);

	    $message.append(
	      escapeMarkup(
	        message(params.args)
	      )
	    );

	    $message[0].className += ' select2-results__message';

	    this.$results.append($message);
	  };

	  Results.prototype.hideMessages = function () {
	    this.$results.find('.select2-results__message').remove();
	  };

	  Results.prototype.append = function (data) {
	    this.hideLoading();

	    var $options = [];

	    if (data.results == null || data.results.length === 0) {
	      if (this.$results.children().length === 0) {
	        this.trigger('results:message', {
	          message: 'noResults'
	        });
	      }

	      return;
	    }

	    data.results = this.sort(data.results);

	    for (var d = 0; d < data.results.length; d++) {
	      var item = data.results[d];

	      var $option = this.option(item);

	      $options.push($option);
	    }

	    this.$results.append($options);
	  };

	  Results.prototype.position = function ($results, $dropdown) {
	    var $resultsContainer = $dropdown.find('.select2-results');
	    $resultsContainer.append($results);
	  };

	  Results.prototype.sort = function (data) {
	    var sorter = this.options.get('sorter');

	    return sorter(data);
	  };

	  Results.prototype.highlightFirstItem = function () {
	    var $options = this.$results
	      .find('.select2-results__option[aria-selected]');

	    var $selected = $options.filter('[aria-selected=true]');

	    // Check if there are any selected options
	    if ($selected.length > 0) {
	      // If there are selected options, highlight the first
	      $selected.first().trigger('mouseenter');
	    } else {
	      // If there are no selected options, highlight the first option
	      // in the dropdown
	      $options.first().trigger('mouseenter');
	    }

	    this.ensureHighlightVisible();
	  };

	  Results.prototype.setClasses = function () {
	    var self = this;

	    this.data.current(function (selected) {
	      var selectedIds = $.map(selected, function (s) {
	        return s.id.toString();
	      });

	      var $options = self.$results
	        .find('.select2-results__option[aria-selected]');

	      $options.each(function () {
	        var $option = $(this);

	        var item = $.data(this, 'data');

	        // id needs to be converted to a string when comparing
	        var id = '' + item.id;

	        if ((item.element != null && item.element.selected) ||
	            (item.element == null && $.inArray(id, selectedIds) > -1)) {
	          $option.attr('aria-selected', 'true');
	        } else {
	          $option.attr('aria-selected', 'false');
	        }
	      });

	    });
	  };

	  Results.prototype.showLoading = function (params) {
	    this.hideLoading();

	    var loadingMore = this.options.get('translations').get('searching');

	    var loading = {
	      disabled: true,
	      loading: true,
	      text: loadingMore(params)
	    };
	    var $loading = this.option(loading);
	    $loading.className += ' loading-results';

	    this.$results.prepend($loading);
	  };

	  Results.prototype.hideLoading = function () {
	    this.$results.find('.loading-results').remove();
	  };

	  Results.prototype.option = function (data) {
	    var option = document.createElement('li');
	    option.className = 'select2-results__option';

	    var attrs = {
	      'role': 'treeitem',
	      'aria-selected': 'false'
	    };

	    if (data.disabled) {
	      delete attrs['aria-selected'];
	      attrs['aria-disabled'] = 'true';
	    }

	    if (data.id == null) {
	      delete attrs['aria-selected'];
	    }

	    if (data._resultId != null) {
	      option.id = data._resultId;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    if (data.children) {
	      attrs.role = 'group';
	      attrs['aria-label'] = data.text;
	      delete attrs['aria-selected'];
	    }

	    for (var attr in attrs) {
	      var val = attrs[attr];

	      option.setAttribute(attr, val);
	    }

	    if (data.children) {
	      var $option = $(option);

	      var label = document.createElement('strong');
	      label.className = 'select2-results__group';

	      var $label = $(label);
	      this.template(data, label);

	      var $children = [];

	      for (var c = 0; c < data.children.length; c++) {
	        var child = data.children[c];

	        var $child = this.option(child);

	        $children.push($child);
	      }

	      var $childrenContainer = $('<ul></ul>', {
	        'class': 'select2-results__options select2-results__options--nested'
	      });

	      $childrenContainer.append($children);

	      $option.append(label);
	      $option.append($childrenContainer);
	    } else {
	      this.template(data, option);
	    }

	    $.data(option, 'data', data);

	    return option;
	  };

	  Results.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-results';

	    this.$results.attr('id', id);

	    container.on('results:all', function (params) {
	      self.clear();
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	        self.highlightFirstItem();
	      }
	    });

	    container.on('results:append', function (params) {
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	      }
	    });

	    container.on('query', function (params) {
	      self.hideMessages();
	      self.showLoading(params);
	    });

	    container.on('select', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('unselect', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expended="true"
	      self.$results.attr('aria-expanded', 'true');
	      self.$results.attr('aria-hidden', 'false');

	      self.setClasses();
	      self.ensureHighlightVisible();
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expended="false"
	      self.$results.attr('aria-expanded', 'false');
	      self.$results.attr('aria-hidden', 'true');
	      self.$results.removeAttr('aria-activedescendant');
	    });

	    container.on('results:toggle', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      $highlighted.trigger('mouseup');
	    });

	    container.on('results:select', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      var data = $highlighted.data('data');

	      if ($highlighted.attr('aria-selected') == 'true') {
	        self.trigger('close', {});
	      } else {
	        self.trigger('select', {
	          data: data
	        });
	      }
	    });

	    container.on('results:previous', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      // If we are already at te top, don't move further
	      if (currentIndex === 0) {
	        return;
	      }

	      var nextIndex = currentIndex - 1;

	      // If none are highlighted, highlight the first
	      if ($highlighted.length === 0) {
	        nextIndex = 0;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top;
	      var nextTop = $next.offset().top;
	      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextTop - currentOffset < 0) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:next', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      var nextIndex = currentIndex + 1;

	      // If we are at the last option, stay there
	      if (nextIndex >= $options.length) {
	        return;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var nextBottom = $next.offset().top + $next.outerHeight(false);
	      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextBottom > currentOffset) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:focus', function (params) {
	      params.element.addClass('select2-results__option--highlighted');
	    });

	    container.on('results:message', function (params) {
	      self.displayMessage(params);
	    });

	    if ($.fn.mousewheel) {
	      this.$results.on('mousewheel', function (e) {
	        var top = self.$results.scrollTop();

	        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

	        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
	        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

	        if (isAtTop) {
	          self.$results.scrollTop(0);

	          e.preventDefault();
	          e.stopPropagation();
	        } else if (isAtBottom) {
	          self.$results.scrollTop(
	            self.$results.get(0).scrollHeight - self.$results.height()
	          );

	          e.preventDefault();
	          e.stopPropagation();
	        }
	      });
	    }

	    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var $this = $(this);

	      var data = $this.data('data');

	      if ($this.attr('aria-selected') === 'true') {
	        if (self.options.get('multiple')) {
	          self.trigger('unselect', {
	            originalEvent: evt,
	            data: data
	          });
	        } else {
	          self.trigger('close', {});
	        }

	        return;
	      }

	      self.trigger('select', {
	        originalEvent: evt,
	        data: data
	      });
	    });

	    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var data = $(this).data('data');

	      self.getHighlightedResults()
	          .removeClass('select2-results__option--highlighted');

	      self.trigger('results:focus', {
	        data: data,
	        element: $(this)
	      });
	    });
	  };

	  Results.prototype.getHighlightedResults = function () {
	    var $highlighted = this.$results
	    .find('.select2-results__option--highlighted');

	    return $highlighted;
	  };

	  Results.prototype.destroy = function () {
	    this.$results.remove();
	  };

	  Results.prototype.ensureHighlightVisible = function () {
	    var $highlighted = this.getHighlightedResults();

	    if ($highlighted.length === 0) {
	      return;
	    }

	    var $options = this.$results.find('[aria-selected]');

	    var currentIndex = $options.index($highlighted);

	    var currentOffset = this.$results.offset().top;
	    var nextTop = $highlighted.offset().top;
	    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

	    var offsetDelta = nextTop - currentOffset;
	    nextOffset -= $highlighted.outerHeight(false) * 2;

	    if (currentIndex <= 2) {
	      this.$results.scrollTop(0);
	    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
	      this.$results.scrollTop(nextOffset);
	    }
	  };

	  Results.prototype.template = function (result, container) {
	    var template = this.options.get('templateResult');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    var content = template(result, container);

	    if (content == null) {
	      container.style.display = 'none';
	    } else if (typeof content === 'string') {
	      container.innerHTML = escapeMarkup(content);
	    } else {
	      $(container).append(content);
	    }
	  };

	  return Results;
	});

	S2.define('select2/keys',[

	], function () {
	  var KEYS = {
	    BACKSPACE: 8,
	    TAB: 9,
	    ENTER: 13,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    ESC: 27,
	    SPACE: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    DELETE: 46
	  };

	  return KEYS;
	});

	S2.define('select2/selection/base',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function BaseSelection ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    BaseSelection.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseSelection, Utils.Observable);

	  BaseSelection.prototype.render = function () {
	    var $selection = $(
	      '<span class="select2-selection" role="combobox" ' +
	      ' aria-haspopup="true" aria-expanded="false">' +
	      '</span>'
	    );

	    this._tabindex = 0;

	    if (this.$element.data('old-tabindex') != null) {
	      this._tabindex = this.$element.data('old-tabindex');
	    } else if (this.$element.attr('tabindex') != null) {
	      this._tabindex = this.$element.attr('tabindex');
	    }

	    $selection.attr('title', this.$element.attr('title'));
	    $selection.attr('tabindex', this._tabindex);

	    this.$selection = $selection;

	    return $selection;
	  };

	  BaseSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-container';
	    var resultsId = container.id + '-results';

	    this.container = container;

	    this.$selection.on('focus', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('blur', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      if (evt.which === KEYS.SPACE) {
	        evt.preventDefault();
	      }
	    });

	    container.on('results:focus', function (params) {
	      self.$selection.attr('aria-activedescendant', params.data._resultId);
	    });

	    container.on('selection:update', function (params) {
	      self.update(params.data);
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expanded="true"
	      self.$selection.attr('aria-expanded', 'true');
	      self.$selection.attr('aria-owns', resultsId);

	      self._attachCloseHandler(container);
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expanded="false"
	      self.$selection.attr('aria-expanded', 'false');
	      self.$selection.removeAttr('aria-activedescendant');
	      self.$selection.removeAttr('aria-owns');

	      self.$selection.focus();

	      self._detachCloseHandler(container);
	    });

	    container.on('enable', function () {
	      self.$selection.attr('tabindex', self._tabindex);
	    });

	    container.on('disable', function () {
	      self.$selection.attr('tabindex', '-1');
	    });
	  };

	  BaseSelection.prototype._handleBlur = function (evt) {
	    var self = this;

	    // This needs to be delayed as the active element is the body when the tab
	    // key is pressed, possibly along with others.
	    window.setTimeout(function () {
	      // Don't trigger `blur` if the focus is still in the selection
	      if (
	        (document.activeElement == self.$selection[0]) ||
	        ($.contains(self.$selection[0], document.activeElement))
	      ) {
	        return;
	      }

	      self.trigger('blur', evt);
	    }, 1);
	  };

	  BaseSelection.prototype._attachCloseHandler = function (container) {
	    var self = this;

	    $(document.body).on('mousedown.select2.' + container.id, function (e) {
	      var $target = $(e.target);

	      var $select = $target.closest('.select2');

	      var $all = $('.select2.select2-container--open');

	      $all.each(function () {
	        var $this = $(this);

	        if (this == $select[0]) {
	          return;
	        }

	        var $element = $this.data('element');

	        $element.select2('close');
	      });
	    });
	  };

	  BaseSelection.prototype._detachCloseHandler = function (container) {
	    $(document.body).off('mousedown.select2.' + container.id);
	  };

	  BaseSelection.prototype.position = function ($selection, $container) {
	    var $selectionContainer = $container.find('.selection');
	    $selectionContainer.append($selection);
	  };

	  BaseSelection.prototype.destroy = function () {
	    this._detachCloseHandler(this.container);
	  };

	  BaseSelection.prototype.update = function (data) {
	    throw new Error('The `update` method must be defined in child classes.');
	  };

	  return BaseSelection;
	});

	S2.define('select2/selection/single',[
	  'jquery',
	  './base',
	  '../utils',
	  '../keys'
	], function ($, BaseSelection, Utils, KEYS) {
	  function SingleSelection () {
	    SingleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(SingleSelection, BaseSelection);

	  SingleSelection.prototype.render = function () {
	    var $selection = SingleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--single');

	    $selection.html(
	      '<span class="select2-selection__rendered"></span>' +
	      '<span class="select2-selection__arrow" role="presentation">' +
	        '<b role="presentation"></b>' +
	      '</span>'
	    );

	    return $selection;
	  };

	  SingleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    SingleSelection.__super__.bind.apply(this, arguments);

	    var id = container.id + '-container';

	    this.$selection.find('.select2-selection__rendered').attr('id', id);
	    this.$selection.attr('aria-labelledby', id);

	    this.$selection.on('mousedown', function (evt) {
	      // Only respond to left clicks
	      if (evt.which !== 1) {
	        return;
	      }

	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on('focus', function (evt) {
	      // User focuses on the container
	    });

	    this.$selection.on('blur', function (evt) {
	      // User exits the container
	    });

	    container.on('focus', function (evt) {
	      if (!container.isOpen()) {
	        self.$selection.focus();
	      }
	    });

	    container.on('selection:update', function (params) {
	      self.update(params.data);
	    });
	  };

	  SingleSelection.prototype.clear = function () {
	    this.$selection.find('.select2-selection__rendered').empty();
	  };

	  SingleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  SingleSelection.prototype.selectionContainer = function () {
	    return $('<span></span>');
	  };

	  SingleSelection.prototype.update = function (data) {
	    if (data.length === 0) {
	      this.clear();
	      return;
	    }

	    var selection = data[0];

	    var $rendered = this.$selection.find('.select2-selection__rendered');
	    var formatted = this.display(selection, $rendered);

	    $rendered.empty().append(formatted);
	    $rendered.prop('title', selection.title || selection.text);
	  };

	  return SingleSelection;
	});

	S2.define('select2/selection/multiple',[
	  'jquery',
	  './base',
	  '../utils'
	], function ($, BaseSelection, Utils) {
	  function MultipleSelection ($element, options) {
	    MultipleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(MultipleSelection, BaseSelection);

	  MultipleSelection.prototype.render = function () {
	    var $selection = MultipleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--multiple');

	    $selection.html(
	      '<ul class="select2-selection__rendered"></ul>'
	    );

	    return $selection;
	  };

	  MultipleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    MultipleSelection.__super__.bind.apply(this, arguments);

	    this.$selection.on('click', function (evt) {
	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on(
	      'click',
	      '.select2-selection__choice__remove',
	      function (evt) {
	        // Ignore the event if it is disabled
	        if (self.options.get('disabled')) {
	          return;
	        }

	        var $remove = $(this);
	        var $selection = $remove.parent();

	        var data = $selection.data('data');

	        self.trigger('unselect', {
	          originalEvent: evt,
	          data: data
	        });
	      }
	    );
	  };

	  MultipleSelection.prototype.clear = function () {
	    this.$selection.find('.select2-selection__rendered').empty();
	  };

	  MultipleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  MultipleSelection.prototype.selectionContainer = function () {
	    var $container = $(
	      '<li class="select2-selection__choice">' +
	        '<span class="select2-selection__choice__remove" role="presentation">' +
	          '&times;' +
	        '</span>' +
	      '</li>'
	    );

	    return $container;
	  };

	  MultipleSelection.prototype.update = function (data) {
	    this.clear();

	    if (data.length === 0) {
	      return;
	    }

	    var $selections = [];

	    for (var d = 0; d < data.length; d++) {
	      var selection = data[d];

	      var $selection = this.selectionContainer();
	      var formatted = this.display(selection, $selection);

	      $selection.append(formatted);
	      $selection.prop('title', selection.title || selection.text);

	      $selection.data('data', selection);

	      $selections.push($selection);
	    }

	    var $rendered = this.$selection.find('.select2-selection__rendered');

	    Utils.appendMany($rendered, $selections);
	  };

	  return MultipleSelection;
	});

	S2.define('select2/selection/placeholder',[
	  '../utils'
	], function (Utils) {
	  function Placeholder (decorated, $element, options) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options);
	  }

	  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
	    var $placeholder = this.selectionContainer();

	    $placeholder.html(this.display(placeholder));
	    $placeholder.addClass('select2-selection__placeholder')
	                .removeClass('select2-selection__choice');

	    return $placeholder;
	  };

	  Placeholder.prototype.update = function (decorated, data) {
	    var singlePlaceholder = (
	      data.length == 1 && data[0].id != this.placeholder.id
	    );
	    var multipleSelections = data.length > 1;

	    if (multipleSelections || singlePlaceholder) {
	      return decorated.call(this, data);
	    }

	    this.clear();

	    var $placeholder = this.createPlaceholder(this.placeholder);

	    this.$selection.find('.select2-selection__rendered').append($placeholder);
	  };

	  return Placeholder;
	});

	S2.define('select2/selection/allowClear',[
	  'jquery',
	  '../keys'
	], function ($, KEYS) {
	  function AllowClear () { }

	  AllowClear.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    if (this.placeholder == null) {
	      if (this.options.get('debug') && window.console && console.error) {
	        console.error(
	          'Select2: The `allowClear` option should be used in combination ' +
	          'with the `placeholder` option.'
	        );
	      }
	    }

	    this.$selection.on('mousedown', '.select2-selection__clear',
	      function (evt) {
	        self._handleClear(evt);
	    });

	    container.on('keypress', function (evt) {
	      self._handleKeyboardClear(evt, container);
	    });
	  };

	  AllowClear.prototype._handleClear = function (_, evt) {
	    // Ignore the event if it is disabled
	    if (this.options.get('disabled')) {
	      return;
	    }

	    var $clear = this.$selection.find('.select2-selection__clear');

	    // Ignore the event if nothing has been selected
	    if ($clear.length === 0) {
	      return;
	    }

	    evt.stopPropagation();

	    var data = $clear.data('data');

	    for (var d = 0; d < data.length; d++) {
	      var unselectData = {
	        data: data[d]
	      };

	      // Trigger the `unselect` event, so people can prevent it from being
	      // cleared.
	      this.trigger('unselect', unselectData);

	      // If the event was prevented, don't clear it out.
	      if (unselectData.prevented) {
	        return;
	      }
	    }

	    this.$element.val(this.placeholder.id).trigger('change');

	    this.trigger('toggle', {});
	  };

	  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
	    if (container.isOpen()) {
	      return;
	    }

	    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
	      this._handleClear(evt);
	    }
	  };

	  AllowClear.prototype.update = function (decorated, data) {
	    decorated.call(this, data);

	    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
	        data.length === 0) {
	      return;
	    }

	    var $remove = $(
	      '<span class="select2-selection__clear">' +
	        '&times;' +
	      '</span>'
	    );
	    $remove.data('data', data);

	    this.$selection.find('.select2-selection__rendered').prepend($remove);
	  };

	  return AllowClear;
	});

	S2.define('select2/selection/search',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function Search (decorated, $element, options) {
	    decorated.call(this, $element, options);
	  }

	  Search.prototype.render = function (decorated) {
	    var $search = $(
	      '<li class="select2-search select2-search--inline">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
	        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
	      '</li>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    var $rendered = decorated.call(this);

	    this._transferTabIndex();

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self.$search.trigger('focus');
	    });

	    container.on('close', function () {
	      self.$search.val('');
	      self.$search.removeAttr('aria-activedescendant');
	      self.$search.trigger('focus');
	    });

	    container.on('enable', function () {
	      self.$search.prop('disabled', false);

	      self._transferTabIndex();
	    });

	    container.on('disable', function () {
	      self.$search.prop('disabled', true);
	    });

	    container.on('focus', function (evt) {
	      self.$search.trigger('focus');
	    });

	    container.on('results:focus', function (params) {
	      self.$search.attr('aria-activedescendant', params.id);
	    });

	    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
	      evt.stopPropagation();

	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();

	      var key = evt.which;

	      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
	        var $previousChoice = self.$searchContainer
	          .prev('.select2-selection__choice');

	        if ($previousChoice.length > 0) {
	          var item = $previousChoice.data('data');

	          self.searchRemoveChoice(item);

	          evt.preventDefault();
	        }
	      }
	    });

	    // Try to detect the IE version should the `documentMode` property that
	    // is stored on the document. This is only implemented in IE and is
	    // slightly cleaner than doing a user agent check.
	    // This property is not available in Edge, but Edge also doesn't have
	    // this bug.
	    var msie = document.documentMode;
	    var disableInputEvents = msie && msie <= 11;

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$selection.on(
	      'input.searchcheck',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents) {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        // Unbind the duplicated `keyup` event
	        self.$selection.off('keyup.search');
	      }
	    );

	    this.$selection.on(
	      'keyup.search input.search',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents && evt.type === 'input') {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        var key = evt.which;

	        // We can freely ignore events from modifier keys
	        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
	          return;
	        }

	        // Tabbing will be handled during the `keydown` phase
	        if (key == KEYS.TAB) {
	          return;
	        }

	        self.handleSearch(evt);
	      }
	    );
	  };

	  /**
	   * This method will transfer the tabindex attribute from the rendered
	   * selection to the search box. This allows for the search box to be used as
	   * the primary focus instead of the selection container.
	   *
	   * @private
	   */
	  Search.prototype._transferTabIndex = function (decorated) {
	    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
	    this.$selection.attr('tabindex', '-1');
	  };

	  Search.prototype.createPlaceholder = function (decorated, placeholder) {
	    this.$search.attr('placeholder', placeholder.text);
	  };

	  Search.prototype.update = function (decorated, data) {
	    var searchHadFocus = this.$search[0] == document.activeElement;

	    this.$search.attr('placeholder', '');

	    decorated.call(this, data);

	    this.$selection.find('.select2-selection__rendered')
	                   .append(this.$searchContainer);

	    this.resizeSearch();
	    if (searchHadFocus) {
	      this.$search.focus();
	    }
	  };

	  Search.prototype.handleSearch = function () {
	    this.resizeSearch();

	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.searchRemoveChoice = function (decorated, item) {
	    this.trigger('unselect', {
	      data: item
	    });

	    this.$search.val(item.text);
	    this.handleSearch();
	  };

	  Search.prototype.resizeSearch = function () {
	    this.$search.css('width', '25px');

	    var width = '';

	    if (this.$search.attr('placeholder') !== '') {
	      width = this.$selection.find('.select2-selection__rendered').innerWidth();
	    } else {
	      var minimumWidth = this.$search.val().length + 1;

	      width = (minimumWidth * 0.75) + 'em';
	    }

	    this.$search.css('width', width);
	  };

	  return Search;
	});

	S2.define('select2/selection/eventRelay',[
	  'jquery'
	], function ($) {
	  function EventRelay () { }

	  EventRelay.prototype.bind = function (decorated, container, $container) {
	    var self = this;
	    var relayEvents = [
	      'open', 'opening',
	      'close', 'closing',
	      'select', 'selecting',
	      'unselect', 'unselecting'
	    ];

	    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

	    decorated.call(this, container, $container);

	    container.on('*', function (name, params) {
	      // Ignore events that should not be relayed
	      if ($.inArray(name, relayEvents) === -1) {
	        return;
	      }

	      // The parameters should always be an object
	      params = params || {};

	      // Generate the jQuery event for the Select2 event
	      var evt = $.Event('select2:' + name, {
	        params: params
	      });

	      self.$element.trigger(evt);

	      // Only handle preventable events if it was one
	      if ($.inArray(name, preventableEvents) === -1) {
	        return;
	      }

	      params.prevented = evt.isDefaultPrevented();
	    });
	  };

	  return EventRelay;
	});

	S2.define('select2/translation',[
	  'jquery',
	  'require'
	], function ($, require) {
	  function Translation (dict) {
	    this.dict = dict || {};
	  }

	  Translation.prototype.all = function () {
	    return this.dict;
	  };

	  Translation.prototype.get = function (key) {
	    return this.dict[key];
	  };

	  Translation.prototype.extend = function (translation) {
	    this.dict = $.extend({}, translation.all(), this.dict);
	  };

	  // Static functions

	  Translation._cache = {};

	  Translation.loadPath = function (path) {
	    if (!(path in Translation._cache)) {
	      var translations = require(path);

	      Translation._cache[path] = translations;
	    }

	    return new Translation(Translation._cache[path]);
	  };

	  return Translation;
	});

	S2.define('select2/diacritics',[

	], function () {
	  var diacritics = {
	    '\u24B6': 'A',
	    '\uFF21': 'A',
	    '\u00C0': 'A',
	    '\u00C1': 'A',
	    '\u00C2': 'A',
	    '\u1EA6': 'A',
	    '\u1EA4': 'A',
	    '\u1EAA': 'A',
	    '\u1EA8': 'A',
	    '\u00C3': 'A',
	    '\u0100': 'A',
	    '\u0102': 'A',
	    '\u1EB0': 'A',
	    '\u1EAE': 'A',
	    '\u1EB4': 'A',
	    '\u1EB2': 'A',
	    '\u0226': 'A',
	    '\u01E0': 'A',
	    '\u00C4': 'A',
	    '\u01DE': 'A',
	    '\u1EA2': 'A',
	    '\u00C5': 'A',
	    '\u01FA': 'A',
	    '\u01CD': 'A',
	    '\u0200': 'A',
	    '\u0202': 'A',
	    '\u1EA0': 'A',
	    '\u1EAC': 'A',
	    '\u1EB6': 'A',
	    '\u1E00': 'A',
	    '\u0104': 'A',
	    '\u023A': 'A',
	    '\u2C6F': 'A',
	    '\uA732': 'AA',
	    '\u00C6': 'AE',
	    '\u01FC': 'AE',
	    '\u01E2': 'AE',
	    '\uA734': 'AO',
	    '\uA736': 'AU',
	    '\uA738': 'AV',
	    '\uA73A': 'AV',
	    '\uA73C': 'AY',
	    '\u24B7': 'B',
	    '\uFF22': 'B',
	    '\u1E02': 'B',
	    '\u1E04': 'B',
	    '\u1E06': 'B',
	    '\u0243': 'B',
	    '\u0182': 'B',
	    '\u0181': 'B',
	    '\u24B8': 'C',
	    '\uFF23': 'C',
	    '\u0106': 'C',
	    '\u0108': 'C',
	    '\u010A': 'C',
	    '\u010C': 'C',
	    '\u00C7': 'C',
	    '\u1E08': 'C',
	    '\u0187': 'C',
	    '\u023B': 'C',
	    '\uA73E': 'C',
	    '\u24B9': 'D',
	    '\uFF24': 'D',
	    '\u1E0A': 'D',
	    '\u010E': 'D',
	    '\u1E0C': 'D',
	    '\u1E10': 'D',
	    '\u1E12': 'D',
	    '\u1E0E': 'D',
	    '\u0110': 'D',
	    '\u018B': 'D',
	    '\u018A': 'D',
	    '\u0189': 'D',
	    '\uA779': 'D',
	    '\u01F1': 'DZ',
	    '\u01C4': 'DZ',
	    '\u01F2': 'Dz',
	    '\u01C5': 'Dz',
	    '\u24BA': 'E',
	    '\uFF25': 'E',
	    '\u00C8': 'E',
	    '\u00C9': 'E',
	    '\u00CA': 'E',
	    '\u1EC0': 'E',
	    '\u1EBE': 'E',
	    '\u1EC4': 'E',
	    '\u1EC2': 'E',
	    '\u1EBC': 'E',
	    '\u0112': 'E',
	    '\u1E14': 'E',
	    '\u1E16': 'E',
	    '\u0114': 'E',
	    '\u0116': 'E',
	    '\u00CB': 'E',
	    '\u1EBA': 'E',
	    '\u011A': 'E',
	    '\u0204': 'E',
	    '\u0206': 'E',
	    '\u1EB8': 'E',
	    '\u1EC6': 'E',
	    '\u0228': 'E',
	    '\u1E1C': 'E',
	    '\u0118': 'E',
	    '\u1E18': 'E',
	    '\u1E1A': 'E',
	    '\u0190': 'E',
	    '\u018E': 'E',
	    '\u24BB': 'F',
	    '\uFF26': 'F',
	    '\u1E1E': 'F',
	    '\u0191': 'F',
	    '\uA77B': 'F',
	    '\u24BC': 'G',
	    '\uFF27': 'G',
	    '\u01F4': 'G',
	    '\u011C': 'G',
	    '\u1E20': 'G',
	    '\u011E': 'G',
	    '\u0120': 'G',
	    '\u01E6': 'G',
	    '\u0122': 'G',
	    '\u01E4': 'G',
	    '\u0193': 'G',
	    '\uA7A0': 'G',
	    '\uA77D': 'G',
	    '\uA77E': 'G',
	    '\u24BD': 'H',
	    '\uFF28': 'H',
	    '\u0124': 'H',
	    '\u1E22': 'H',
	    '\u1E26': 'H',
	    '\u021E': 'H',
	    '\u1E24': 'H',
	    '\u1E28': 'H',
	    '\u1E2A': 'H',
	    '\u0126': 'H',
	    '\u2C67': 'H',
	    '\u2C75': 'H',
	    '\uA78D': 'H',
	    '\u24BE': 'I',
	    '\uFF29': 'I',
	    '\u00CC': 'I',
	    '\u00CD': 'I',
	    '\u00CE': 'I',
	    '\u0128': 'I',
	    '\u012A': 'I',
	    '\u012C': 'I',
	    '\u0130': 'I',
	    '\u00CF': 'I',
	    '\u1E2E': 'I',
	    '\u1EC8': 'I',
	    '\u01CF': 'I',
	    '\u0208': 'I',
	    '\u020A': 'I',
	    '\u1ECA': 'I',
	    '\u012E': 'I',
	    '\u1E2C': 'I',
	    '\u0197': 'I',
	    '\u24BF': 'J',
	    '\uFF2A': 'J',
	    '\u0134': 'J',
	    '\u0248': 'J',
	    '\u24C0': 'K',
	    '\uFF2B': 'K',
	    '\u1E30': 'K',
	    '\u01E8': 'K',
	    '\u1E32': 'K',
	    '\u0136': 'K',
	    '\u1E34': 'K',
	    '\u0198': 'K',
	    '\u2C69': 'K',
	    '\uA740': 'K',
	    '\uA742': 'K',
	    '\uA744': 'K',
	    '\uA7A2': 'K',
	    '\u24C1': 'L',
	    '\uFF2C': 'L',
	    '\u013F': 'L',
	    '\u0139': 'L',
	    '\u013D': 'L',
	    '\u1E36': 'L',
	    '\u1E38': 'L',
	    '\u013B': 'L',
	    '\u1E3C': 'L',
	    '\u1E3A': 'L',
	    '\u0141': 'L',
	    '\u023D': 'L',
	    '\u2C62': 'L',
	    '\u2C60': 'L',
	    '\uA748': 'L',
	    '\uA746': 'L',
	    '\uA780': 'L',
	    '\u01C7': 'LJ',
	    '\u01C8': 'Lj',
	    '\u24C2': 'M',
	    '\uFF2D': 'M',
	    '\u1E3E': 'M',
	    '\u1E40': 'M',
	    '\u1E42': 'M',
	    '\u2C6E': 'M',
	    '\u019C': 'M',
	    '\u24C3': 'N',
	    '\uFF2E': 'N',
	    '\u01F8': 'N',
	    '\u0143': 'N',
	    '\u00D1': 'N',
	    '\u1E44': 'N',
	    '\u0147': 'N',
	    '\u1E46': 'N',
	    '\u0145': 'N',
	    '\u1E4A': 'N',
	    '\u1E48': 'N',
	    '\u0220': 'N',
	    '\u019D': 'N',
	    '\uA790': 'N',
	    '\uA7A4': 'N',
	    '\u01CA': 'NJ',
	    '\u01CB': 'Nj',
	    '\u24C4': 'O',
	    '\uFF2F': 'O',
	    '\u00D2': 'O',
	    '\u00D3': 'O',
	    '\u00D4': 'O',
	    '\u1ED2': 'O',
	    '\u1ED0': 'O',
	    '\u1ED6': 'O',
	    '\u1ED4': 'O',
	    '\u00D5': 'O',
	    '\u1E4C': 'O',
	    '\u022C': 'O',
	    '\u1E4E': 'O',
	    '\u014C': 'O',
	    '\u1E50': 'O',
	    '\u1E52': 'O',
	    '\u014E': 'O',
	    '\u022E': 'O',
	    '\u0230': 'O',
	    '\u00D6': 'O',
	    '\u022A': 'O',
	    '\u1ECE': 'O',
	    '\u0150': 'O',
	    '\u01D1': 'O',
	    '\u020C': 'O',
	    '\u020E': 'O',
	    '\u01A0': 'O',
	    '\u1EDC': 'O',
	    '\u1EDA': 'O',
	    '\u1EE0': 'O',
	    '\u1EDE': 'O',
	    '\u1EE2': 'O',
	    '\u1ECC': 'O',
	    '\u1ED8': 'O',
	    '\u01EA': 'O',
	    '\u01EC': 'O',
	    '\u00D8': 'O',
	    '\u01FE': 'O',
	    '\u0186': 'O',
	    '\u019F': 'O',
	    '\uA74A': 'O',
	    '\uA74C': 'O',
	    '\u01A2': 'OI',
	    '\uA74E': 'OO',
	    '\u0222': 'OU',
	    '\u24C5': 'P',
	    '\uFF30': 'P',
	    '\u1E54': 'P',
	    '\u1E56': 'P',
	    '\u01A4': 'P',
	    '\u2C63': 'P',
	    '\uA750': 'P',
	    '\uA752': 'P',
	    '\uA754': 'P',
	    '\u24C6': 'Q',
	    '\uFF31': 'Q',
	    '\uA756': 'Q',
	    '\uA758': 'Q',
	    '\u024A': 'Q',
	    '\u24C7': 'R',
	    '\uFF32': 'R',
	    '\u0154': 'R',
	    '\u1E58': 'R',
	    '\u0158': 'R',
	    '\u0210': 'R',
	    '\u0212': 'R',
	    '\u1E5A': 'R',
	    '\u1E5C': 'R',
	    '\u0156': 'R',
	    '\u1E5E': 'R',
	    '\u024C': 'R',
	    '\u2C64': 'R',
	    '\uA75A': 'R',
	    '\uA7A6': 'R',
	    '\uA782': 'R',
	    '\u24C8': 'S',
	    '\uFF33': 'S',
	    '\u1E9E': 'S',
	    '\u015A': 'S',
	    '\u1E64': 'S',
	    '\u015C': 'S',
	    '\u1E60': 'S',
	    '\u0160': 'S',
	    '\u1E66': 'S',
	    '\u1E62': 'S',
	    '\u1E68': 'S',
	    '\u0218': 'S',
	    '\u015E': 'S',
	    '\u2C7E': 'S',
	    '\uA7A8': 'S',
	    '\uA784': 'S',
	    '\u24C9': 'T',
	    '\uFF34': 'T',
	    '\u1E6A': 'T',
	    '\u0164': 'T',
	    '\u1E6C': 'T',
	    '\u021A': 'T',
	    '\u0162': 'T',
	    '\u1E70': 'T',
	    '\u1E6E': 'T',
	    '\u0166': 'T',
	    '\u01AC': 'T',
	    '\u01AE': 'T',
	    '\u023E': 'T',
	    '\uA786': 'T',
	    '\uA728': 'TZ',
	    '\u24CA': 'U',
	    '\uFF35': 'U',
	    '\u00D9': 'U',
	    '\u00DA': 'U',
	    '\u00DB': 'U',
	    '\u0168': 'U',
	    '\u1E78': 'U',
	    '\u016A': 'U',
	    '\u1E7A': 'U',
	    '\u016C': 'U',
	    '\u00DC': 'U',
	    '\u01DB': 'U',
	    '\u01D7': 'U',
	    '\u01D5': 'U',
	    '\u01D9': 'U',
	    '\u1EE6': 'U',
	    '\u016E': 'U',
	    '\u0170': 'U',
	    '\u01D3': 'U',
	    '\u0214': 'U',
	    '\u0216': 'U',
	    '\u01AF': 'U',
	    '\u1EEA': 'U',
	    '\u1EE8': 'U',
	    '\u1EEE': 'U',
	    '\u1EEC': 'U',
	    '\u1EF0': 'U',
	    '\u1EE4': 'U',
	    '\u1E72': 'U',
	    '\u0172': 'U',
	    '\u1E76': 'U',
	    '\u1E74': 'U',
	    '\u0244': 'U',
	    '\u24CB': 'V',
	    '\uFF36': 'V',
	    '\u1E7C': 'V',
	    '\u1E7E': 'V',
	    '\u01B2': 'V',
	    '\uA75E': 'V',
	    '\u0245': 'V',
	    '\uA760': 'VY',
	    '\u24CC': 'W',
	    '\uFF37': 'W',
	    '\u1E80': 'W',
	    '\u1E82': 'W',
	    '\u0174': 'W',
	    '\u1E86': 'W',
	    '\u1E84': 'W',
	    '\u1E88': 'W',
	    '\u2C72': 'W',
	    '\u24CD': 'X',
	    '\uFF38': 'X',
	    '\u1E8A': 'X',
	    '\u1E8C': 'X',
	    '\u24CE': 'Y',
	    '\uFF39': 'Y',
	    '\u1EF2': 'Y',
	    '\u00DD': 'Y',
	    '\u0176': 'Y',
	    '\u1EF8': 'Y',
	    '\u0232': 'Y',
	    '\u1E8E': 'Y',
	    '\u0178': 'Y',
	    '\u1EF6': 'Y',
	    '\u1EF4': 'Y',
	    '\u01B3': 'Y',
	    '\u024E': 'Y',
	    '\u1EFE': 'Y',
	    '\u24CF': 'Z',
	    '\uFF3A': 'Z',
	    '\u0179': 'Z',
	    '\u1E90': 'Z',
	    '\u017B': 'Z',
	    '\u017D': 'Z',
	    '\u1E92': 'Z',
	    '\u1E94': 'Z',
	    '\u01B5': 'Z',
	    '\u0224': 'Z',
	    '\u2C7F': 'Z',
	    '\u2C6B': 'Z',
	    '\uA762': 'Z',
	    '\u24D0': 'a',
	    '\uFF41': 'a',
	    '\u1E9A': 'a',
	    '\u00E0': 'a',
	    '\u00E1': 'a',
	    '\u00E2': 'a',
	    '\u1EA7': 'a',
	    '\u1EA5': 'a',
	    '\u1EAB': 'a',
	    '\u1EA9': 'a',
	    '\u00E3': 'a',
	    '\u0101': 'a',
	    '\u0103': 'a',
	    '\u1EB1': 'a',
	    '\u1EAF': 'a',
	    '\u1EB5': 'a',
	    '\u1EB3': 'a',
	    '\u0227': 'a',
	    '\u01E1': 'a',
	    '\u00E4': 'a',
	    '\u01DF': 'a',
	    '\u1EA3': 'a',
	    '\u00E5': 'a',
	    '\u01FB': 'a',
	    '\u01CE': 'a',
	    '\u0201': 'a',
	    '\u0203': 'a',
	    '\u1EA1': 'a',
	    '\u1EAD': 'a',
	    '\u1EB7': 'a',
	    '\u1E01': 'a',
	    '\u0105': 'a',
	    '\u2C65': 'a',
	    '\u0250': 'a',
	    '\uA733': 'aa',
	    '\u00E6': 'ae',
	    '\u01FD': 'ae',
	    '\u01E3': 'ae',
	    '\uA735': 'ao',
	    '\uA737': 'au',
	    '\uA739': 'av',
	    '\uA73B': 'av',
	    '\uA73D': 'ay',
	    '\u24D1': 'b',
	    '\uFF42': 'b',
	    '\u1E03': 'b',
	    '\u1E05': 'b',
	    '\u1E07': 'b',
	    '\u0180': 'b',
	    '\u0183': 'b',
	    '\u0253': 'b',
	    '\u24D2': 'c',
	    '\uFF43': 'c',
	    '\u0107': 'c',
	    '\u0109': 'c',
	    '\u010B': 'c',
	    '\u010D': 'c',
	    '\u00E7': 'c',
	    '\u1E09': 'c',
	    '\u0188': 'c',
	    '\u023C': 'c',
	    '\uA73F': 'c',
	    '\u2184': 'c',
	    '\u24D3': 'd',
	    '\uFF44': 'd',
	    '\u1E0B': 'd',
	    '\u010F': 'd',
	    '\u1E0D': 'd',
	    '\u1E11': 'd',
	    '\u1E13': 'd',
	    '\u1E0F': 'd',
	    '\u0111': 'd',
	    '\u018C': 'd',
	    '\u0256': 'd',
	    '\u0257': 'd',
	    '\uA77A': 'd',
	    '\u01F3': 'dz',
	    '\u01C6': 'dz',
	    '\u24D4': 'e',
	    '\uFF45': 'e',
	    '\u00E8': 'e',
	    '\u00E9': 'e',
	    '\u00EA': 'e',
	    '\u1EC1': 'e',
	    '\u1EBF': 'e',
	    '\u1EC5': 'e',
	    '\u1EC3': 'e',
	    '\u1EBD': 'e',
	    '\u0113': 'e',
	    '\u1E15': 'e',
	    '\u1E17': 'e',
	    '\u0115': 'e',
	    '\u0117': 'e',
	    '\u00EB': 'e',
	    '\u1EBB': 'e',
	    '\u011B': 'e',
	    '\u0205': 'e',
	    '\u0207': 'e',
	    '\u1EB9': 'e',
	    '\u1EC7': 'e',
	    '\u0229': 'e',
	    '\u1E1D': 'e',
	    '\u0119': 'e',
	    '\u1E19': 'e',
	    '\u1E1B': 'e',
	    '\u0247': 'e',
	    '\u025B': 'e',
	    '\u01DD': 'e',
	    '\u24D5': 'f',
	    '\uFF46': 'f',
	    '\u1E1F': 'f',
	    '\u0192': 'f',
	    '\uA77C': 'f',
	    '\u24D6': 'g',
	    '\uFF47': 'g',
	    '\u01F5': 'g',
	    '\u011D': 'g',
	    '\u1E21': 'g',
	    '\u011F': 'g',
	    '\u0121': 'g',
	    '\u01E7': 'g',
	    '\u0123': 'g',
	    '\u01E5': 'g',
	    '\u0260': 'g',
	    '\uA7A1': 'g',
	    '\u1D79': 'g',
	    '\uA77F': 'g',
	    '\u24D7': 'h',
	    '\uFF48': 'h',
	    '\u0125': 'h',
	    '\u1E23': 'h',
	    '\u1E27': 'h',
	    '\u021F': 'h',
	    '\u1E25': 'h',
	    '\u1E29': 'h',
	    '\u1E2B': 'h',
	    '\u1E96': 'h',
	    '\u0127': 'h',
	    '\u2C68': 'h',
	    '\u2C76': 'h',
	    '\u0265': 'h',
	    '\u0195': 'hv',
	    '\u24D8': 'i',
	    '\uFF49': 'i',
	    '\u00EC': 'i',
	    '\u00ED': 'i',
	    '\u00EE': 'i',
	    '\u0129': 'i',
	    '\u012B': 'i',
	    '\u012D': 'i',
	    '\u00EF': 'i',
	    '\u1E2F': 'i',
	    '\u1EC9': 'i',
	    '\u01D0': 'i',
	    '\u0209': 'i',
	    '\u020B': 'i',
	    '\u1ECB': 'i',
	    '\u012F': 'i',
	    '\u1E2D': 'i',
	    '\u0268': 'i',
	    '\u0131': 'i',
	    '\u24D9': 'j',
	    '\uFF4A': 'j',
	    '\u0135': 'j',
	    '\u01F0': 'j',
	    '\u0249': 'j',
	    '\u24DA': 'k',
	    '\uFF4B': 'k',
	    '\u1E31': 'k',
	    '\u01E9': 'k',
	    '\u1E33': 'k',
	    '\u0137': 'k',
	    '\u1E35': 'k',
	    '\u0199': 'k',
	    '\u2C6A': 'k',
	    '\uA741': 'k',
	    '\uA743': 'k',
	    '\uA745': 'k',
	    '\uA7A3': 'k',
	    '\u24DB': 'l',
	    '\uFF4C': 'l',
	    '\u0140': 'l',
	    '\u013A': 'l',
	    '\u013E': 'l',
	    '\u1E37': 'l',
	    '\u1E39': 'l',
	    '\u013C': 'l',
	    '\u1E3D': 'l',
	    '\u1E3B': 'l',
	    '\u017F': 'l',
	    '\u0142': 'l',
	    '\u019A': 'l',
	    '\u026B': 'l',
	    '\u2C61': 'l',
	    '\uA749': 'l',
	    '\uA781': 'l',
	    '\uA747': 'l',
	    '\u01C9': 'lj',
	    '\u24DC': 'm',
	    '\uFF4D': 'm',
	    '\u1E3F': 'm',
	    '\u1E41': 'm',
	    '\u1E43': 'm',
	    '\u0271': 'm',
	    '\u026F': 'm',
	    '\u24DD': 'n',
	    '\uFF4E': 'n',
	    '\u01F9': 'n',
	    '\u0144': 'n',
	    '\u00F1': 'n',
	    '\u1E45': 'n',
	    '\u0148': 'n',
	    '\u1E47': 'n',
	    '\u0146': 'n',
	    '\u1E4B': 'n',
	    '\u1E49': 'n',
	    '\u019E': 'n',
	    '\u0272': 'n',
	    '\u0149': 'n',
	    '\uA791': 'n',
	    '\uA7A5': 'n',
	    '\u01CC': 'nj',
	    '\u24DE': 'o',
	    '\uFF4F': 'o',
	    '\u00F2': 'o',
	    '\u00F3': 'o',
	    '\u00F4': 'o',
	    '\u1ED3': 'o',
	    '\u1ED1': 'o',
	    '\u1ED7': 'o',
	    '\u1ED5': 'o',
	    '\u00F5': 'o',
	    '\u1E4D': 'o',
	    '\u022D': 'o',
	    '\u1E4F': 'o',
	    '\u014D': 'o',
	    '\u1E51': 'o',
	    '\u1E53': 'o',
	    '\u014F': 'o',
	    '\u022F': 'o',
	    '\u0231': 'o',
	    '\u00F6': 'o',
	    '\u022B': 'o',
	    '\u1ECF': 'o',
	    '\u0151': 'o',
	    '\u01D2': 'o',
	    '\u020D': 'o',
	    '\u020F': 'o',
	    '\u01A1': 'o',
	    '\u1EDD': 'o',
	    '\u1EDB': 'o',
	    '\u1EE1': 'o',
	    '\u1EDF': 'o',
	    '\u1EE3': 'o',
	    '\u1ECD': 'o',
	    '\u1ED9': 'o',
	    '\u01EB': 'o',
	    '\u01ED': 'o',
	    '\u00F8': 'o',
	    '\u01FF': 'o',
	    '\u0254': 'o',
	    '\uA74B': 'o',
	    '\uA74D': 'o',
	    '\u0275': 'o',
	    '\u01A3': 'oi',
	    '\u0223': 'ou',
	    '\uA74F': 'oo',
	    '\u24DF': 'p',
	    '\uFF50': 'p',
	    '\u1E55': 'p',
	    '\u1E57': 'p',
	    '\u01A5': 'p',
	    '\u1D7D': 'p',
	    '\uA751': 'p',
	    '\uA753': 'p',
	    '\uA755': 'p',
	    '\u24E0': 'q',
	    '\uFF51': 'q',
	    '\u024B': 'q',
	    '\uA757': 'q',
	    '\uA759': 'q',
	    '\u24E1': 'r',
	    '\uFF52': 'r',
	    '\u0155': 'r',
	    '\u1E59': 'r',
	    '\u0159': 'r',
	    '\u0211': 'r',
	    '\u0213': 'r',
	    '\u1E5B': 'r',
	    '\u1E5D': 'r',
	    '\u0157': 'r',
	    '\u1E5F': 'r',
	    '\u024D': 'r',
	    '\u027D': 'r',
	    '\uA75B': 'r',
	    '\uA7A7': 'r',
	    '\uA783': 'r',
	    '\u24E2': 's',
	    '\uFF53': 's',
	    '\u00DF': 's',
	    '\u015B': 's',
	    '\u1E65': 's',
	    '\u015D': 's',
	    '\u1E61': 's',
	    '\u0161': 's',
	    '\u1E67': 's',
	    '\u1E63': 's',
	    '\u1E69': 's',
	    '\u0219': 's',
	    '\u015F': 's',
	    '\u023F': 's',
	    '\uA7A9': 's',
	    '\uA785': 's',
	    '\u1E9B': 's',
	    '\u24E3': 't',
	    '\uFF54': 't',
	    '\u1E6B': 't',
	    '\u1E97': 't',
	    '\u0165': 't',
	    '\u1E6D': 't',
	    '\u021B': 't',
	    '\u0163': 't',
	    '\u1E71': 't',
	    '\u1E6F': 't',
	    '\u0167': 't',
	    '\u01AD': 't',
	    '\u0288': 't',
	    '\u2C66': 't',
	    '\uA787': 't',
	    '\uA729': 'tz',
	    '\u24E4': 'u',
	    '\uFF55': 'u',
	    '\u00F9': 'u',
	    '\u00FA': 'u',
	    '\u00FB': 'u',
	    '\u0169': 'u',
	    '\u1E79': 'u',
	    '\u016B': 'u',
	    '\u1E7B': 'u',
	    '\u016D': 'u',
	    '\u00FC': 'u',
	    '\u01DC': 'u',
	    '\u01D8': 'u',
	    '\u01D6': 'u',
	    '\u01DA': 'u',
	    '\u1EE7': 'u',
	    '\u016F': 'u',
	    '\u0171': 'u',
	    '\u01D4': 'u',
	    '\u0215': 'u',
	    '\u0217': 'u',
	    '\u01B0': 'u',
	    '\u1EEB': 'u',
	    '\u1EE9': 'u',
	    '\u1EEF': 'u',
	    '\u1EED': 'u',
	    '\u1EF1': 'u',
	    '\u1EE5': 'u',
	    '\u1E73': 'u',
	    '\u0173': 'u',
	    '\u1E77': 'u',
	    '\u1E75': 'u',
	    '\u0289': 'u',
	    '\u24E5': 'v',
	    '\uFF56': 'v',
	    '\u1E7D': 'v',
	    '\u1E7F': 'v',
	    '\u028B': 'v',
	    '\uA75F': 'v',
	    '\u028C': 'v',
	    '\uA761': 'vy',
	    '\u24E6': 'w',
	    '\uFF57': 'w',
	    '\u1E81': 'w',
	    '\u1E83': 'w',
	    '\u0175': 'w',
	    '\u1E87': 'w',
	    '\u1E85': 'w',
	    '\u1E98': 'w',
	    '\u1E89': 'w',
	    '\u2C73': 'w',
	    '\u24E7': 'x',
	    '\uFF58': 'x',
	    '\u1E8B': 'x',
	    '\u1E8D': 'x',
	    '\u24E8': 'y',
	    '\uFF59': 'y',
	    '\u1EF3': 'y',
	    '\u00FD': 'y',
	    '\u0177': 'y',
	    '\u1EF9': 'y',
	    '\u0233': 'y',
	    '\u1E8F': 'y',
	    '\u00FF': 'y',
	    '\u1EF7': 'y',
	    '\u1E99': 'y',
	    '\u1EF5': 'y',
	    '\u01B4': 'y',
	    '\u024F': 'y',
	    '\u1EFF': 'y',
	    '\u24E9': 'z',
	    '\uFF5A': 'z',
	    '\u017A': 'z',
	    '\u1E91': 'z',
	    '\u017C': 'z',
	    '\u017E': 'z',
	    '\u1E93': 'z',
	    '\u1E95': 'z',
	    '\u01B6': 'z',
	    '\u0225': 'z',
	    '\u0240': 'z',
	    '\u2C6C': 'z',
	    '\uA763': 'z',
	    '\u0386': '\u0391',
	    '\u0388': '\u0395',
	    '\u0389': '\u0397',
	    '\u038A': '\u0399',
	    '\u03AA': '\u0399',
	    '\u038C': '\u039F',
	    '\u038E': '\u03A5',
	    '\u03AB': '\u03A5',
	    '\u038F': '\u03A9',
	    '\u03AC': '\u03B1',
	    '\u03AD': '\u03B5',
	    '\u03AE': '\u03B7',
	    '\u03AF': '\u03B9',
	    '\u03CA': '\u03B9',
	    '\u0390': '\u03B9',
	    '\u03CC': '\u03BF',
	    '\u03CD': '\u03C5',
	    '\u03CB': '\u03C5',
	    '\u03B0': '\u03C5',
	    '\u03C9': '\u03C9',
	    '\u03C2': '\u03C3'
	  };

	  return diacritics;
	});

	S2.define('select2/data/base',[
	  '../utils'
	], function (Utils) {
	  function BaseAdapter ($element, options) {
	    BaseAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseAdapter, Utils.Observable);

	  BaseAdapter.prototype.current = function (callback) {
	    throw new Error('The `current` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.query = function (params, callback) {
	    throw new Error('The `query` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.bind = function (container, $container) {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.destroy = function () {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.generateResultId = function (container, data) {
	    var id = container.id + '-result-';

	    id += Utils.generateChars(4);

	    if (data.id != null) {
	      id += '-' + data.id.toString();
	    } else {
	      id += '-' + Utils.generateChars(4);
	    }
	    return id;
	  };

	  return BaseAdapter;
	});

	S2.define('select2/data/select',[
	  './base',
	  '../utils',
	  'jquery'
	], function (BaseAdapter, Utils, $) {
	  function SelectAdapter ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    SelectAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(SelectAdapter, BaseAdapter);

	  SelectAdapter.prototype.current = function (callback) {
	    var data = [];
	    var self = this;

	    this.$element.find(':selected').each(function () {
	      var $option = $(this);

	      var option = self.item($option);

	      data.push(option);
	    });

	    callback(data);
	  };

	  SelectAdapter.prototype.select = function (data) {
	    var self = this;

	    data.selected = true;

	    // If data.element is a DOM node, use it instead
	    if ($(data.element).is('option')) {
	      data.element.selected = true;

	      this.$element.trigger('change');

	      return;
	    }

	    if (this.$element.prop('multiple')) {
	      this.current(function (currentData) {
	        var val = [];

	        data = [data];
	        data.push.apply(data, currentData);

	        for (var d = 0; d < data.length; d++) {
	          var id = data[d].id;

	          if ($.inArray(id, val) === -1) {
	            val.push(id);
	          }
	        }

	        self.$element.val(val);
	        self.$element.trigger('change');
	      });
	    } else {
	      var val = data.id;

	      this.$element.val(val);
	      this.$element.trigger('change');
	    }
	  };

	  SelectAdapter.prototype.unselect = function (data) {
	    var self = this;

	    if (!this.$element.prop('multiple')) {
	      return;
	    }

	    data.selected = false;

	    if ($(data.element).is('option')) {
	      data.element.selected = false;

	      this.$element.trigger('change');

	      return;
	    }

	    this.current(function (currentData) {
	      var val = [];

	      for (var d = 0; d < currentData.length; d++) {
	        var id = currentData[d].id;

	        if (id !== data.id && $.inArray(id, val) === -1) {
	          val.push(id);
	        }
	      }

	      self.$element.val(val);

	      self.$element.trigger('change');
	    });
	  };

	  SelectAdapter.prototype.bind = function (container, $container) {
	    var self = this;

	    this.container = container;

	    container.on('select', function (params) {
	      self.select(params.data);
	    });

	    container.on('unselect', function (params) {
	      self.unselect(params.data);
	    });
	  };

	  SelectAdapter.prototype.destroy = function () {
	    // Remove anything added to child elements
	    this.$element.find('*').each(function () {
	      // Remove any custom data set by Select2
	      $.removeData(this, 'data');
	    });
	  };

	  SelectAdapter.prototype.query = function (params, callback) {
	    var data = [];
	    var self = this;

	    var $options = this.$element.children();

	    $options.each(function () {
	      var $option = $(this);

	      if (!$option.is('option') && !$option.is('optgroup')) {
	        return;
	      }

	      var option = self.item($option);

	      var matches = self.matches(params, option);

	      if (matches !== null) {
	        data.push(matches);
	      }
	    });

	    callback({
	      results: data
	    });
	  };

	  SelectAdapter.prototype.addOptions = function ($options) {
	    Utils.appendMany(this.$element, $options);
	  };

	  SelectAdapter.prototype.option = function (data) {
	    var option;

	    if (data.children) {
	      option = document.createElement('optgroup');
	      option.label = data.text;
	    } else {
	      option = document.createElement('option');

	      if (option.textContent !== undefined) {
	        option.textContent = data.text;
	      } else {
	        option.innerText = data.text;
	      }
	    }

	    if (data.id) {
	      option.value = data.id;
	    }

	    if (data.disabled) {
	      option.disabled = true;
	    }

	    if (data.selected) {
	      option.selected = true;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    var $option = $(option);

	    var normalizedData = this._normalizeItem(data);
	    normalizedData.element = option;

	    // Override the option's data with the combined data
	    $.data(option, 'data', normalizedData);

	    return $option;
	  };

	  SelectAdapter.prototype.item = function ($option) {
	    var data = {};

	    data = $.data($option[0], 'data');

	    if (data != null) {
	      return data;
	    }

	    if ($option.is('option')) {
	      data = {
	        id: $option.val(),
	        text: $option.text(),
	        disabled: $option.prop('disabled'),
	        selected: $option.prop('selected'),
	        title: $option.prop('title')
	      };
	    } else if ($option.is('optgroup')) {
	      data = {
	        text: $option.prop('label'),
	        children: [],
	        title: $option.prop('title')
	      };

	      var $children = $option.children('option');
	      var children = [];

	      for (var c = 0; c < $children.length; c++) {
	        var $child = $($children[c]);

	        var child = this.item($child);

	        children.push(child);
	      }

	      data.children = children;
	    }

	    data = this._normalizeItem(data);
	    data.element = $option[0];

	    $.data($option[0], 'data', data);

	    return data;
	  };

	  SelectAdapter.prototype._normalizeItem = function (item) {
	    if (!$.isPlainObject(item)) {
	      item = {
	        id: item,
	        text: item
	      };
	    }

	    item = $.extend({}, {
	      text: ''
	    }, item);

	    var defaults = {
	      selected: false,
	      disabled: false
	    };

	    if (item.id != null) {
	      item.id = item.id.toString();
	    }

	    if (item.text != null) {
	      item.text = item.text.toString();
	    }

	    if (item._resultId == null && item.id && this.container != null) {
	      item._resultId = this.generateResultId(this.container, item);
	    }

	    return $.extend({}, defaults, item);
	  };

	  SelectAdapter.prototype.matches = function (params, data) {
	    var matcher = this.options.get('matcher');

	    return matcher(params, data);
	  };

	  return SelectAdapter;
	});

	S2.define('select2/data/array',[
	  './select',
	  '../utils',
	  'jquery'
	], function (SelectAdapter, Utils, $) {
	  function ArrayAdapter ($element, options) {
	    var data = options.get('data') || [];

	    ArrayAdapter.__super__.constructor.call(this, $element, options);

	    this.addOptions(this.convertToOptions(data));
	  }

	  Utils.Extend(ArrayAdapter, SelectAdapter);

	  ArrayAdapter.prototype.select = function (data) {
	    var $option = this.$element.find('option').filter(function (i, elm) {
	      return elm.value == data.id.toString();
	    });

	    if ($option.length === 0) {
	      $option = this.option(data);

	      this.addOptions($option);
	    }

	    ArrayAdapter.__super__.select.call(this, data);
	  };

	  ArrayAdapter.prototype.convertToOptions = function (data) {
	    var self = this;

	    var $existing = this.$element.find('option');
	    var existingIds = $existing.map(function () {
	      return self.item($(this)).id;
	    }).get();

	    var $options = [];

	    // Filter out all items except for the one passed in the argument
	    function onlyItem (item) {
	      return function () {
	        return $(this).val() == item.id;
	      };
	    }

	    for (var d = 0; d < data.length; d++) {
	      var item = this._normalizeItem(data[d]);

	      // Skip items which were pre-loaded, only merge the data
	      if ($.inArray(item.id, existingIds) >= 0) {
	        var $existingOption = $existing.filter(onlyItem(item));

	        var existingData = this.item($existingOption);
	        var newData = $.extend(true, {}, item, existingData);

	        var $newOption = this.option(newData);

	        $existingOption.replaceWith($newOption);

	        continue;
	      }

	      var $option = this.option(item);

	      if (item.children) {
	        var $children = this.convertToOptions(item.children);

	        Utils.appendMany($option, $children);
	      }

	      $options.push($option);
	    }

	    return $options;
	  };

	  return ArrayAdapter;
	});

	S2.define('select2/data/ajax',[
	  './array',
	  '../utils',
	  'jquery'
	], function (ArrayAdapter, Utils, $) {
	  function AjaxAdapter ($element, options) {
	    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

	    if (this.ajaxOptions.processResults != null) {
	      this.processResults = this.ajaxOptions.processResults;
	    }

	    AjaxAdapter.__super__.constructor.call(this, $element, options);
	  }

	  Utils.Extend(AjaxAdapter, ArrayAdapter);

	  AjaxAdapter.prototype._applyDefaults = function (options) {
	    var defaults = {
	      data: function (params) {
	        return $.extend({}, params, {
	          q: params.term
	        });
	      },
	      transport: function (params, success, failure) {
	        var $request = $.ajax(params);

	        $request.then(success);
	        $request.fail(failure);

	        return $request;
	      }
	    };

	    return $.extend({}, defaults, options, true);
	  };

	  AjaxAdapter.prototype.processResults = function (results) {
	    return results;
	  };

	  AjaxAdapter.prototype.query = function (params, callback) {
	    var matches = [];
	    var self = this;

	    if (this._request != null) {
	      // JSONP requests cannot always be aborted
	      if ($.isFunction(this._request.abort)) {
	        this._request.abort();
	      }

	      this._request = null;
	    }

	    var options = $.extend({
	      type: 'GET'
	    }, this.ajaxOptions);

	    if (typeof options.url === 'function') {
	      options.url = options.url.call(this.$element, params);
	    }

	    if (typeof options.data === 'function') {
	      options.data = options.data.call(this.$element, params);
	    }

	    function request () {
	      var $request = options.transport(options, function (data) {
	        var results = self.processResults(data, params);

	        if (self.options.get('debug') && window.console && console.error) {
	          // Check to make sure that the response included a `results` key.
	          if (!results || !results.results || !$.isArray(results.results)) {
	            console.error(
	              'Select2: The AJAX results did not return an array in the ' +
	              '`results` key of the response.'
	            );
	          }
	        }

	        callback(results);
	      }, function () {
	        // Attempt to detect if a request was aborted
	        // Only works if the transport exposes a status property
	        if ($request.status && $request.status === '0') {
	          return;
	        }

	        self.trigger('results:message', {
	          message: 'errorLoading'
	        });
	      });

	      self._request = $request;
	    }

	    if (this.ajaxOptions.delay && params.term != null) {
	      if (this._queryTimeout) {
	        window.clearTimeout(this._queryTimeout);
	      }

	      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
	    } else {
	      request();
	    }
	  };

	  return AjaxAdapter;
	});

	S2.define('select2/data/tags',[
	  'jquery'
	], function ($) {
	  function Tags (decorated, $element, options) {
	    var tags = options.get('tags');

	    var createTag = options.get('createTag');

	    if (createTag !== undefined) {
	      this.createTag = createTag;
	    }

	    var insertTag = options.get('insertTag');

	    if (insertTag !== undefined) {
	        this.insertTag = insertTag;
	    }

	    decorated.call(this, $element, options);

	    if ($.isArray(tags)) {
	      for (var t = 0; t < tags.length; t++) {
	        var tag = tags[t];
	        var item = this._normalizeItem(tag);

	        var $option = this.option(item);

	        this.$element.append($option);
	      }
	    }
	  }

	  Tags.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    this._removeOldTags();

	    if (params.term == null || params.page != null) {
	      decorated.call(this, params, callback);
	      return;
	    }

	    function wrapper (obj, child) {
	      var data = obj.results;

	      for (var i = 0; i < data.length; i++) {
	        var option = data[i];

	        var checkChildren = (
	          option.children != null &&
	          !wrapper({
	            results: option.children
	          }, true)
	        );

	        var checkText = option.text === params.term;

	        if (checkText || checkChildren) {
	          if (child) {
	            return false;
	          }

	          obj.data = data;
	          callback(obj);

	          return;
	        }
	      }

	      if (child) {
	        return true;
	      }

	      var tag = self.createTag(params);

	      if (tag != null) {
	        var $option = self.option(tag);
	        $option.attr('data-select2-tag', true);

	        self.addOptions([$option]);

	        self.insertTag(data, tag);
	      }

	      obj.results = data;

	      callback(obj);
	    }

	    decorated.call(this, params, wrapper);
	  };

	  Tags.prototype.createTag = function (decorated, params) {
	    var term = $.trim(params.term);

	    if (term === '') {
	      return null;
	    }

	    return {
	      id: term,
	      text: term
	    };
	  };

	  Tags.prototype.insertTag = function (_, data, tag) {
	    data.unshift(tag);
	  };

	  Tags.prototype._removeOldTags = function (_) {
	    var tag = this._lastTag;

	    var $options = this.$element.find('option[data-select2-tag]');

	    $options.each(function () {
	      if (this.selected) {
	        return;
	      }

	      $(this).remove();
	    });
	  };

	  return Tags;
	});

	S2.define('select2/data/tokenizer',[
	  'jquery'
	], function ($) {
	  function Tokenizer (decorated, $element, options) {
	    var tokenizer = options.get('tokenizer');

	    if (tokenizer !== undefined) {
	      this.tokenizer = tokenizer;
	    }

	    decorated.call(this, $element, options);
	  }

	  Tokenizer.prototype.bind = function (decorated, container, $container) {
	    decorated.call(this, container, $container);

	    this.$search =  container.dropdown.$search || container.selection.$search ||
	      $container.find('.select2-search__field');
	  };

	  Tokenizer.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    function createAndSelect (data) {
	      // Normalize the data object so we can use it for checks
	      var item = self._normalizeItem(data);

	      // Check if the data object already exists as a tag
	      // Select it if it doesn't
	      var $existingOptions = self.$element.find('option').filter(function () {
	        return $(this).val() === item.id;
	      });

	      // If an existing option wasn't found for it, create the option
	      if (!$existingOptions.length) {
	        var $option = self.option(item);
	        $option.attr('data-select2-tag', true);

	        self._removeOldTags();
	        self.addOptions([$option]);
	      }

	      // Select the item, now that we know there is an option for it
	      select(item);
	    }

	    function select (data) {
	      self.trigger('select', {
	        data: data
	      });
	    }

	    params.term = params.term || '';

	    var tokenData = this.tokenizer(params, this.options, createAndSelect);

	    if (tokenData.term !== params.term) {
	      // Replace the search term if we have the search box
	      if (this.$search.length) {
	        this.$search.val(tokenData.term);
	        this.$search.focus();
	      }

	      params.term = tokenData.term;
	    }

	    decorated.call(this, params, callback);
	  };

	  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
	    var separators = options.get('tokenSeparators') || [];
	    var term = params.term;
	    var i = 0;

	    var createTag = this.createTag || function (params) {
	      return {
	        id: params.term,
	        text: params.term
	      };
	    };

	    while (i < term.length) {
	      var termChar = term[i];

	      if ($.inArray(termChar, separators) === -1) {
	        i++;

	        continue;
	      }

	      var part = term.substr(0, i);
	      var partParams = $.extend({}, params, {
	        term: part
	      });

	      var data = createTag(partParams);

	      if (data == null) {
	        i++;
	        continue;
	      }

	      callback(data);

	      // Reset the term to not include the tokenized portion
	      term = term.substr(i + 1) || '';
	      i = 0;
	    }

	    return {
	      term: term
	    };
	  };

	  return Tokenizer;
	});

	S2.define('select2/data/minimumInputLength',[

	], function () {
	  function MinimumInputLength (decorated, $e, options) {
	    this.minimumInputLength = options.get('minimumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MinimumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (params.term.length < this.minimumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooShort',
	        args: {
	          minimum: this.minimumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MinimumInputLength;
	});

	S2.define('select2/data/maximumInputLength',[

	], function () {
	  function MaximumInputLength (decorated, $e, options) {
	    this.maximumInputLength = options.get('maximumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (this.maximumInputLength > 0 &&
	        params.term.length > this.maximumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooLong',
	        args: {
	          maximum: this.maximumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MaximumInputLength;
	});

	S2.define('select2/data/maximumSelectionLength',[

	], function (){
	  function MaximumSelectionLength (decorated, $e, options) {
	    this.maximumSelectionLength = options.get('maximumSelectionLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumSelectionLength.prototype.query =
	    function (decorated, params, callback) {
	      var self = this;

	      this.current(function (currentData) {
	        var count = currentData != null ? currentData.length : 0;
	        if (self.maximumSelectionLength > 0 &&
	          count >= self.maximumSelectionLength) {
	          self.trigger('results:message', {
	            message: 'maximumSelected',
	            args: {
	              maximum: self.maximumSelectionLength
	            }
	          });
	          return;
	        }
	        decorated.call(self, params, callback);
	      });
	  };

	  return MaximumSelectionLength;
	});

	S2.define('select2/dropdown',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Dropdown ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    Dropdown.__super__.constructor.call(this);
	  }

	  Utils.Extend(Dropdown, Utils.Observable);

	  Dropdown.prototype.render = function () {
	    var $dropdown = $(
	      '<span class="select2-dropdown">' +
	        '<span class="select2-results"></span>' +
	      '</span>'
	    );

	    $dropdown.attr('dir', this.options.get('dir'));

	    this.$dropdown = $dropdown;

	    return $dropdown;
	  };

	  Dropdown.prototype.bind = function () {
	    // Should be implemented in subclasses
	  };

	  Dropdown.prototype.position = function ($dropdown, $container) {
	    // Should be implmented in subclasses
	  };

	  Dropdown.prototype.destroy = function () {
	    // Remove the dropdown from the DOM
	    this.$dropdown.remove();
	  };

	  return Dropdown;
	});

	S2.define('select2/dropdown/search',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function Search () { }

	  Search.prototype.render = function (decorated) {
	    var $rendered = decorated.call(this);

	    var $search = $(
	      '<span class="select2-search select2-search--dropdown">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
	        ' spellcheck="false" role="textbox" />' +
	      '</span>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    $rendered.prepend($search);

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    this.$search.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();
	    });

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$search.on('input', function (evt) {
	      // Unbind the duplicated `keyup` event
	      $(this).off('keyup');
	    });

	    this.$search.on('keyup input', function (evt) {
	      self.handleSearch(evt);
	    });

	    container.on('open', function () {
	      self.$search.attr('tabindex', 0);

	      self.$search.focus();

	      window.setTimeout(function () {
	        self.$search.focus();
	      }, 0);
	    });

	    container.on('close', function () {
	      self.$search.attr('tabindex', -1);

	      self.$search.val('');
	    });

	    container.on('focus', function () {
	      if (container.isOpen()) {
	        self.$search.focus();
	      }
	    });

	    container.on('results:all', function (params) {
	      if (params.query.term == null || params.query.term === '') {
	        var showSearch = self.showSearch(params);

	        if (showSearch) {
	          self.$searchContainer.removeClass('select2-search--hide');
	        } else {
	          self.$searchContainer.addClass('select2-search--hide');
	        }
	      }
	    });
	  };

	  Search.prototype.handleSearch = function (evt) {
	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.showSearch = function (_, params) {
	    return true;
	  };

	  return Search;
	});

	S2.define('select2/dropdown/hidePlaceholder',[

	], function () {
	  function HidePlaceholder (decorated, $element, options, dataAdapter) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  HidePlaceholder.prototype.append = function (decorated, data) {
	    data.results = this.removePlaceholder(data.results);

	    decorated.call(this, data);
	  };

	  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
	    var modifiedData = data.slice(0);

	    for (var d = data.length - 1; d >= 0; d--) {
	      var item = data[d];

	      if (this.placeholder.id === item.id) {
	        modifiedData.splice(d, 1);
	      }
	    }

	    return modifiedData;
	  };

	  return HidePlaceholder;
	});

	S2.define('select2/dropdown/infiniteScroll',[
	  'jquery'
	], function ($) {
	  function InfiniteScroll (decorated, $element, options, dataAdapter) {
	    this.lastParams = {};

	    decorated.call(this, $element, options, dataAdapter);

	    this.$loadingMore = this.createLoadingMore();
	    this.loading = false;
	  }

	  InfiniteScroll.prototype.append = function (decorated, data) {
	    this.$loadingMore.remove();
	    this.loading = false;

	    decorated.call(this, data);

	    if (this.showLoadingMore(data)) {
	      this.$results.append(this.$loadingMore);
	    }
	  };

	  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('query', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    container.on('query:append', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    this.$results.on('scroll', function () {
	      var isLoadMoreVisible = $.contains(
	        document.documentElement,
	        self.$loadingMore[0]
	      );

	      if (self.loading || !isLoadMoreVisible) {
	        return;
	      }

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var loadingMoreOffset = self.$loadingMore.offset().top +
	        self.$loadingMore.outerHeight(false);

	      if (currentOffset + 50 >= loadingMoreOffset) {
	        self.loadMore();
	      }
	    });
	  };

	  InfiniteScroll.prototype.loadMore = function () {
	    this.loading = true;

	    var params = $.extend({}, {page: 1}, this.lastParams);

	    params.page++;

	    this.trigger('query:append', params);
	  };

	  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
	    return data.pagination && data.pagination.more;
	  };

	  InfiniteScroll.prototype.createLoadingMore = function () {
	    var $option = $(
	      '<li ' +
	      'class="select2-results__option select2-results__option--load-more"' +
	      'role="treeitem" aria-disabled="true"></li>'
	    );

	    var message = this.options.get('translations').get('loadingMore');

	    $option.html(message(this.lastParams));

	    return $option;
	  };

	  return InfiniteScroll;
	});

	S2.define('select2/dropdown/attachBody',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function AttachBody (decorated, $element, options) {
	    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

	    decorated.call(this, $element, options);
	  }

	  AttachBody.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    var setupResultsEvents = false;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self._showDropdown();
	      self._attachPositioningHandler(container);

	      if (!setupResultsEvents) {
	        setupResultsEvents = true;

	        container.on('results:all', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });

	        container.on('results:append', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });
	      }
	    });

	    container.on('close', function () {
	      self._hideDropdown();
	      self._detachPositioningHandler(container);
	    });

	    this.$dropdownContainer.on('mousedown', function (evt) {
	      evt.stopPropagation();
	    });
	  };

	  AttachBody.prototype.destroy = function (decorated) {
	    decorated.call(this);

	    this.$dropdownContainer.remove();
	  };

	  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
	    // Clone all of the container classes
	    $dropdown.attr('class', $container.attr('class'));

	    $dropdown.removeClass('select2');
	    $dropdown.addClass('select2-container--open');

	    $dropdown.css({
	      position: 'absolute',
	      top: -999999
	    });

	    this.$container = $container;
	  };

	  AttachBody.prototype.render = function (decorated) {
	    var $container = $('<span></span>');

	    var $dropdown = decorated.call(this);
	    $container.append($dropdown);

	    this.$dropdownContainer = $container;

	    return $container;
	  };

	  AttachBody.prototype._hideDropdown = function (decorated) {
	    this.$dropdownContainer.detach();
	  };

	  AttachBody.prototype._attachPositioningHandler =
	      function (decorated, container) {
	    var self = this;

	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.each(function () {
	      $(this).data('select2-scroll-position', {
	        x: $(this).scrollLeft(),
	        y: $(this).scrollTop()
	      });
	    });

	    $watchers.on(scrollEvent, function (ev) {
	      var position = $(this).data('select2-scroll-position');
	      $(this).scrollTop(position.y);
	    });

	    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
	      function (e) {
	      self._positionDropdown();
	      self._resizeDropdown();
	    });
	  };

	  AttachBody.prototype._detachPositioningHandler =
	      function (decorated, container) {
	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.off(scrollEvent);

	    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
	  };

	  AttachBody.prototype._positionDropdown = function () {
	    var $window = $(window);

	    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
	    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

	    var newDirection = null;

	    var offset = this.$container.offset();

	    offset.bottom = offset.top + this.$container.outerHeight(false);

	    var container = {
	      height: this.$container.outerHeight(false)
	    };

	    container.top = offset.top;
	    container.bottom = offset.top + container.height;

	    var dropdown = {
	      height: this.$dropdown.outerHeight(false)
	    };

	    var viewport = {
	      top: $window.scrollTop(),
	      bottom: $window.scrollTop() + $window.height()
	    };

	    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
	    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

	    var css = {
	      left: offset.left,
	      top: container.bottom
	    };

	    // Determine what the parent element is to use for calciulating the offset
	    var $offsetParent = this.$dropdownParent;

	    // For statically positoned elements, we need to get the element
	    // that is determining the offset
	    if ($offsetParent.css('position') === 'static') {
	      $offsetParent = $offsetParent.offsetParent();
	    }

	    var parentOffset = $offsetParent.offset();

	    css.top -= parentOffset.top;
	    css.left -= parentOffset.left;

	    if (!isCurrentlyAbove && !isCurrentlyBelow) {
	      newDirection = 'below';
	    }

	    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
	      newDirection = 'above';
	    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
	      newDirection = 'below';
	    }

	    if (newDirection == 'above' ||
	      (isCurrentlyAbove && newDirection !== 'below')) {
	      css.top = container.top - parentOffset.top - dropdown.height;
	    }

	    if (newDirection != null) {
	      this.$dropdown
	        .removeClass('select2-dropdown--below select2-dropdown--above')
	        .addClass('select2-dropdown--' + newDirection);
	      this.$container
	        .removeClass('select2-container--below select2-container--above')
	        .addClass('select2-container--' + newDirection);
	    }

	    this.$dropdownContainer.css(css);
	  };

	  AttachBody.prototype._resizeDropdown = function () {
	    var css = {
	      width: this.$container.outerWidth(false) + 'px'
	    };

	    if (this.options.get('dropdownAutoWidth')) {
	      css.minWidth = css.width;
	      css.position = 'relative';
	      css.width = 'auto';
	    }

	    this.$dropdown.css(css);
	  };

	  AttachBody.prototype._showDropdown = function (decorated) {
	    this.$dropdownContainer.appendTo(this.$dropdownParent);

	    this._positionDropdown();
	    this._resizeDropdown();
	  };

	  return AttachBody;
	});

	S2.define('select2/dropdown/minimumResultsForSearch',[

	], function () {
	  function countResults (data) {
	    var count = 0;

	    for (var d = 0; d < data.length; d++) {
	      var item = data[d];

	      if (item.children) {
	        count += countResults(item.children);
	      } else {
	        count++;
	      }
	    }

	    return count;
	  }

	  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
	    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

	    if (this.minimumResultsForSearch < 0) {
	      this.minimumResultsForSearch = Infinity;
	    }

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
	    if (countResults(params.data.results) < this.minimumResultsForSearch) {
	      return false;
	    }

	    return decorated.call(this, params);
	  };

	  return MinimumResultsForSearch;
	});

	S2.define('select2/dropdown/selectOnClose',[

	], function () {
	  function SelectOnClose () { }

	  SelectOnClose.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('close', function (params) {
	      self._handleSelectOnClose(params);
	    });
	  };

	  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
	    if (params && params.originalSelect2Event != null) {
	      var event = params.originalSelect2Event;

	      // Don't select an item if the close event was triggered from a select or
	      // unselect event
	      if (event._type === 'select' || event._type === 'unselect') {
	        return;
	      }
	    }

	    var $highlightedResults = this.getHighlightedResults();

	    // Only select highlighted results
	    if ($highlightedResults.length < 1) {
	      return;
	    }

	    var data = $highlightedResults.data('data');

	    // Don't re-select already selected resulte
	    if (
	      (data.element != null && data.element.selected) ||
	      (data.element == null && data.selected)
	    ) {
	      return;
	    }

	    this.trigger('select', {
	        data: data
	    });
	  };

	  return SelectOnClose;
	});

	S2.define('select2/dropdown/closeOnSelect',[

	], function () {
	  function CloseOnSelect () { }

	  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('select', function (evt) {
	      self._selectTriggered(evt);
	    });

	    container.on('unselect', function (evt) {
	      self._selectTriggered(evt);
	    });
	  };

	  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
	    var originalEvent = evt.originalEvent;

	    // Don't close if the control key is being held
	    if (originalEvent && originalEvent.ctrlKey) {
	      return;
	    }

	    this.trigger('close', {
	      originalEvent: originalEvent,
	      originalSelect2Event: evt
	    });
	  };

	  return CloseOnSelect;
	});

	S2.define('select2/i18n/en',[],function () {
	  // English
	  return {
	    errorLoading: function () {
	      return 'The results could not be loaded.';
	    },
	    inputTooLong: function (args) {
	      var overChars = args.input.length - args.maximum;

	      var message = 'Please delete ' + overChars + ' character';

	      if (overChars != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    inputTooShort: function (args) {
	      var remainingChars = args.minimum - args.input.length;

	      var message = 'Please enter ' + remainingChars + ' or more characters';

	      return message;
	    },
	    loadingMore: function () {
	      return 'Loading more results…';
	    },
	    maximumSelected: function (args) {
	      var message = 'You can only select ' + args.maximum + ' item';

	      if (args.maximum != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    noResults: function () {
	      return 'No results found';
	    },
	    searching: function () {
	      return 'Searching…';
	    }
	  };
	});

	S2.define('select2/defaults',[
	  'jquery',
	  'require',

	  './results',

	  './selection/single',
	  './selection/multiple',
	  './selection/placeholder',
	  './selection/allowClear',
	  './selection/search',
	  './selection/eventRelay',

	  './utils',
	  './translation',
	  './diacritics',

	  './data/select',
	  './data/array',
	  './data/ajax',
	  './data/tags',
	  './data/tokenizer',
	  './data/minimumInputLength',
	  './data/maximumInputLength',
	  './data/maximumSelectionLength',

	  './dropdown',
	  './dropdown/search',
	  './dropdown/hidePlaceholder',
	  './dropdown/infiniteScroll',
	  './dropdown/attachBody',
	  './dropdown/minimumResultsForSearch',
	  './dropdown/selectOnClose',
	  './dropdown/closeOnSelect',

	  './i18n/en'
	], function ($, require,

	             ResultsList,

	             SingleSelection, MultipleSelection, Placeholder, AllowClear,
	             SelectionSearch, EventRelay,

	             Utils, Translation, DIACRITICS,

	             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
	             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

	             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
	             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

	             EnglishTranslation) {
	  function Defaults () {
	    this.reset();
	  }

	  Defaults.prototype.apply = function (options) {
	    options = $.extend(true, {}, this.defaults, options);

	    if (options.dataAdapter == null) {
	      if (options.ajax != null) {
	        options.dataAdapter = AjaxData;
	      } else if (options.data != null) {
	        options.dataAdapter = ArrayData;
	      } else {
	        options.dataAdapter = SelectData;
	      }

	      if (options.minimumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MinimumInputLength
	        );
	      }

	      if (options.maximumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumInputLength
	        );
	      }

	      if (options.maximumSelectionLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumSelectionLength
	        );
	      }

	      if (options.tags) {
	        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
	      }

	      if (options.tokenSeparators != null || options.tokenizer != null) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Tokenizer
	        );
	      }

	      if (options.query != null) {
	        var Query = require(options.amdBase + 'compat/query');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Query
	        );
	      }

	      if (options.initSelection != null) {
	        var InitSelection = require(options.amdBase + 'compat/initSelection');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          InitSelection
	        );
	      }
	    }

	    if (options.resultsAdapter == null) {
	      options.resultsAdapter = ResultsList;

	      if (options.ajax != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          InfiniteScroll
	        );
	      }

	      if (options.placeholder != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          HidePlaceholder
	        );
	      }

	      if (options.selectOnClose) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          SelectOnClose
	        );
	      }
	    }

	    if (options.dropdownAdapter == null) {
	      if (options.multiple) {
	        options.dropdownAdapter = Dropdown;
	      } else {
	        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

	        options.dropdownAdapter = SearchableDropdown;
	      }

	      if (options.minimumResultsForSearch !== 0) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          MinimumResultsForSearch
	        );
	      }

	      if (options.closeOnSelect) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          CloseOnSelect
	        );
	      }

	      if (
	        options.dropdownCssClass != null ||
	        options.dropdownCss != null ||
	        options.adaptDropdownCssClass != null
	      ) {
	        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          DropdownCSS
	        );
	      }

	      options.dropdownAdapter = Utils.Decorate(
	        options.dropdownAdapter,
	        AttachBody
	      );
	    }

	    if (options.selectionAdapter == null) {
	      if (options.multiple) {
	        options.selectionAdapter = MultipleSelection;
	      } else {
	        options.selectionAdapter = SingleSelection;
	      }

	      // Add the placeholder mixin if a placeholder was specified
	      if (options.placeholder != null) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          Placeholder
	        );
	      }

	      if (options.allowClear) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          AllowClear
	        );
	      }

	      if (options.multiple) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          SelectionSearch
	        );
	      }

	      if (
	        options.containerCssClass != null ||
	        options.containerCss != null ||
	        options.adaptContainerCssClass != null
	      ) {
	        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          ContainerCSS
	        );
	      }

	      options.selectionAdapter = Utils.Decorate(
	        options.selectionAdapter,
	        EventRelay
	      );
	    }

	    if (typeof options.language === 'string') {
	      // Check if the language is specified with a region
	      if (options.language.indexOf('-') > 0) {
	        // Extract the region information if it is included
	        var languageParts = options.language.split('-');
	        var baseLanguage = languageParts[0];

	        options.language = [options.language, baseLanguage];
	      } else {
	        options.language = [options.language];
	      }
	    }

	    if ($.isArray(options.language)) {
	      var languages = new Translation();
	      options.language.push('en');

	      var languageNames = options.language;

	      for (var l = 0; l < languageNames.length; l++) {
	        var name = languageNames[l];
	        var language = {};

	        try {
	          // Try to load it with the original name
	          language = Translation.loadPath(name);
	        } catch (e) {
	          try {
	            // If we couldn't load it, check if it wasn't the full path
	            name = this.defaults.amdLanguageBase + name;
	            language = Translation.loadPath(name);
	          } catch (ex) {
	            // The translation could not be loaded at all. Sometimes this is
	            // because of a configuration problem, other times this can be
	            // because of how Select2 helps load all possible translation files.
	            if (options.debug && window.console && console.warn) {
	              console.warn(
	                'Select2: The language file for "' + name + '" could not be ' +
	                'automatically loaded. A fallback will be used instead.'
	              );
	            }

	            continue;
	          }
	        }

	        languages.extend(language);
	      }

	      options.translations = languages;
	    } else {
	      var baseTranslation = Translation.loadPath(
	        this.defaults.amdLanguageBase + 'en'
	      );
	      var customTranslation = new Translation(options.language);

	      customTranslation.extend(baseTranslation);

	      options.translations = customTranslation;
	    }

	    return options;
	  };

	  Defaults.prototype.reset = function () {
	    function stripDiacritics (text) {
	      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
	      function match(a) {
	        return DIACRITICS[a] || a;
	      }

	      return text.replace(/[^\u0000-\u007E]/g, match);
	    }

	    function matcher (params, data) {
	      // Always return the object if there is nothing to compare
	      if ($.trim(params.term) === '') {
	        return data;
	      }

	      // Do a recursive check for options with children
	      if (data.children && data.children.length > 0) {
	        // Clone the data object if there are children
	        // This is required as we modify the object to remove any non-matches
	        var match = $.extend(true, {}, data);

	        // Check each child of the option
	        for (var c = data.children.length - 1; c >= 0; c--) {
	          var child = data.children[c];

	          var matches = matcher(params, child);

	          // If there wasn't a match, remove the object in the array
	          if (matches == null) {
	            match.children.splice(c, 1);
	          }
	        }

	        // If any children matched, return the new object
	        if (match.children.length > 0) {
	          return match;
	        }

	        // If there were no matching children, check just the plain object
	        return matcher(params, match);
	      }

	      var original = stripDiacritics(data.text).toUpperCase();
	      var term = stripDiacritics(params.term).toUpperCase();

	      // Check if the text contains the term
	      if (original.indexOf(term) > -1) {
	        return data;
	      }

	      // If it doesn't contain the term, don't return anything
	      return null;
	    }

	    this.defaults = {
	      amdBase: './',
	      amdLanguageBase: './i18n/',
	      closeOnSelect: true,
	      debug: false,
	      dropdownAutoWidth: false,
	      escapeMarkup: Utils.escapeMarkup,
	      language: EnglishTranslation,
	      matcher: matcher,
	      minimumInputLength: 0,
	      maximumInputLength: 0,
	      maximumSelectionLength: 0,
	      minimumResultsForSearch: 0,
	      selectOnClose: false,
	      sorter: function (data) {
	        return data;
	      },
	      templateResult: function (result) {
	        return result.text;
	      },
	      templateSelection: function (selection) {
	        return selection.text;
	      },
	      theme: 'default',
	      width: 'resolve'
	    };
	  };

	  Defaults.prototype.set = function (key, value) {
	    var camelKey = $.camelCase(key);

	    var data = {};
	    data[camelKey] = value;

	    var convertedData = Utils._convertData(data);

	    $.extend(this.defaults, convertedData);
	  };

	  var defaults = new Defaults();

	  return defaults;
	});

	S2.define('select2/options',[
	  'require',
	  'jquery',
	  './defaults',
	  './utils'
	], function (require, $, Defaults, Utils) {
	  function Options (options, $element) {
	    this.options = options;

	    if ($element != null) {
	      this.fromElement($element);
	    }

	    this.options = Defaults.apply(this.options);

	    if ($element && $element.is('input')) {
	      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

	      this.options.dataAdapter = Utils.Decorate(
	        this.options.dataAdapter,
	        InputCompat
	      );
	    }
	  }

	  Options.prototype.fromElement = function ($e) {
	    var excludedData = ['select2'];

	    if (this.options.multiple == null) {
	      this.options.multiple = $e.prop('multiple');
	    }

	    if (this.options.disabled == null) {
	      this.options.disabled = $e.prop('disabled');
	    }

	    if (this.options.language == null) {
	      if ($e.prop('lang')) {
	        this.options.language = $e.prop('lang').toLowerCase();
	      } else if ($e.closest('[lang]').prop('lang')) {
	        this.options.language = $e.closest('[lang]').prop('lang');
	      }
	    }

	    if (this.options.dir == null) {
	      if ($e.prop('dir')) {
	        this.options.dir = $e.prop('dir');
	      } else if ($e.closest('[dir]').prop('dir')) {
	        this.options.dir = $e.closest('[dir]').prop('dir');
	      } else {
	        this.options.dir = 'ltr';
	      }
	    }

	    $e.prop('disabled', this.options.disabled);
	    $e.prop('multiple', this.options.multiple);

	    if ($e.data('select2Tags')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-select2-tags` attribute has been changed to ' +
	          'use the `data-data` and `data-tags="true"` attributes and will be ' +
	          'removed in future versions of Select2.'
	        );
	      }

	      $e.data('data', $e.data('select2Tags'));
	      $e.data('tags', true);
	    }

	    if ($e.data('ajaxUrl')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-ajax-url` attribute has been changed to ' +
	          '`data-ajax--url` and support for the old attribute will be removed' +
	          ' in future versions of Select2.'
	        );
	      }

	      $e.attr('ajax--url', $e.data('ajaxUrl'));
	      $e.data('ajax--url', $e.data('ajaxUrl'));
	    }

	    var dataset = {};

	    // Prefer the element's `dataset` attribute if it exists
	    // jQuery 1.x does not correctly handle data attributes with multiple dashes
	    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
	      dataset = $.extend(true, {}, $e[0].dataset, $e.data());
	    } else {
	      dataset = $e.data();
	    }

	    var data = $.extend(true, {}, dataset);

	    data = Utils._convertData(data);

	    for (var key in data) {
	      if ($.inArray(key, excludedData) > -1) {
	        continue;
	      }

	      if ($.isPlainObject(this.options[key])) {
	        $.extend(this.options[key], data[key]);
	      } else {
	        this.options[key] = data[key];
	      }
	    }

	    return this;
	  };

	  Options.prototype.get = function (key) {
	    return this.options[key];
	  };

	  Options.prototype.set = function (key, val) {
	    this.options[key] = val;
	  };

	  return Options;
	});

	S2.define('select2/core',[
	  'jquery',
	  './options',
	  './utils',
	  './keys'
	], function ($, Options, Utils, KEYS) {
	  var Select2 = function ($element, options) {
	    if ($element.data('select2') != null) {
	      $element.data('select2').destroy();
	    }

	    this.$element = $element;

	    this.id = this._generateId($element);

	    options = options || {};

	    this.options = new Options(options, $element);

	    Select2.__super__.constructor.call(this);

	    // Set up the tabindex

	    var tabindex = $element.attr('tabindex') || 0;
	    $element.data('old-tabindex', tabindex);
	    $element.attr('tabindex', '-1');

	    // Set up containers and adapters

	    var DataAdapter = this.options.get('dataAdapter');
	    this.dataAdapter = new DataAdapter($element, this.options);

	    var $container = this.render();

	    this._placeContainer($container);

	    var SelectionAdapter = this.options.get('selectionAdapter');
	    this.selection = new SelectionAdapter($element, this.options);
	    this.$selection = this.selection.render();

	    this.selection.position(this.$selection, $container);

	    var DropdownAdapter = this.options.get('dropdownAdapter');
	    this.dropdown = new DropdownAdapter($element, this.options);
	    this.$dropdown = this.dropdown.render();

	    this.dropdown.position(this.$dropdown, $container);

	    var ResultsAdapter = this.options.get('resultsAdapter');
	    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
	    this.$results = this.results.render();

	    this.results.position(this.$results, this.$dropdown);

	    // Bind events

	    var self = this;

	    // Bind the container to all of the adapters
	    this._bindAdapters();

	    // Register any DOM event handlers
	    this._registerDomEvents();

	    // Register any internal event handlers
	    this._registerDataEvents();
	    this._registerSelectionEvents();
	    this._registerDropdownEvents();
	    this._registerResultsEvents();
	    this._registerEvents();

	    // Set the initial state
	    this.dataAdapter.current(function (initialData) {
	      self.trigger('selection:update', {
	        data: initialData
	      });
	    });

	    // Hide the original select
	    $element.addClass('select2-hidden-accessible');
	    $element.attr('aria-hidden', 'true');

	    // Synchronize any monitored attributes
	    this._syncAttributes();

	    $element.data('select2', this);
	  };

	  Utils.Extend(Select2, Utils.Observable);

	  Select2.prototype._generateId = function ($element) {
	    var id = '';

	    if ($element.attr('id') != null) {
	      id = $element.attr('id');
	    } else if ($element.attr('name') != null) {
	      id = $element.attr('name') + '-' + Utils.generateChars(2);
	    } else {
	      id = Utils.generateChars(4);
	    }

	    id = id.replace(/(:|\.|\[|\]|,)/g, '');
	    id = 'select2-' + id;

	    return id;
	  };

	  Select2.prototype._placeContainer = function ($container) {
	    $container.insertAfter(this.$element);

	    var width = this._resolveWidth(this.$element, this.options.get('width'));

	    if (width != null) {
	      $container.css('width', width);
	    }
	  };

	  Select2.prototype._resolveWidth = function ($element, method) {
	    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

	    if (method == 'resolve') {
	      var styleWidth = this._resolveWidth($element, 'style');

	      if (styleWidth != null) {
	        return styleWidth;
	      }

	      return this._resolveWidth($element, 'element');
	    }

	    if (method == 'element') {
	      var elementWidth = $element.outerWidth(false);

	      if (elementWidth <= 0) {
	        return 'auto';
	      }

	      return elementWidth + 'px';
	    }

	    if (method == 'style') {
	      var style = $element.attr('style');

	      if (typeof(style) !== 'string') {
	        return null;
	      }

	      var attrs = style.split(';');

	      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
	        var attr = attrs[i].replace(/\s/g, '');
	        var matches = attr.match(WIDTH);

	        if (matches !== null && matches.length >= 1) {
	          return matches[1];
	        }
	      }

	      return null;
	    }

	    return method;
	  };

	  Select2.prototype._bindAdapters = function () {
	    this.dataAdapter.bind(this, this.$container);
	    this.selection.bind(this, this.$container);

	    this.dropdown.bind(this, this.$container);
	    this.results.bind(this, this.$container);
	  };

	  Select2.prototype._registerDomEvents = function () {
	    var self = this;

	    this.$element.on('change.select2', function () {
	      self.dataAdapter.current(function (data) {
	        self.trigger('selection:update', {
	          data: data
	        });
	      });
	    });

	    this.$element.on('focus.select2', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this._syncA = Utils.bind(this._syncAttributes, this);
	    this._syncS = Utils.bind(this._syncSubtree, this);

	    if (this.$element[0].attachEvent) {
	      this.$element[0].attachEvent('onpropertychange', this._syncA);
	    }

	    var observer = window.MutationObserver ||
	      window.WebKitMutationObserver ||
	      window.MozMutationObserver
	    ;

	    if (observer != null) {
	      this._observer = new observer(function (mutations) {
	        $.each(mutations, self._syncA);
	        $.each(mutations, self._syncS);
	      });
	      this._observer.observe(this.$element[0], {
	        attributes: true,
	        childList: true,
	        subtree: false
	      });
	    } else if (this.$element[0].addEventListener) {
	      this.$element[0].addEventListener(
	        'DOMAttrModified',
	        self._syncA,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeInserted',
	        self._syncS,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeRemoved',
	        self._syncS,
	        false
	      );
	    }
	  };

	  Select2.prototype._registerDataEvents = function () {
	    var self = this;

	    this.dataAdapter.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerSelectionEvents = function () {
	    var self = this;
	    var nonRelayEvents = ['toggle', 'focus'];

	    this.selection.on('toggle', function () {
	      self.toggleDropdown();
	    });

	    this.selection.on('focus', function (params) {
	      self.focus(params);
	    });

	    this.selection.on('*', function (name, params) {
	      if ($.inArray(name, nonRelayEvents) !== -1) {
	        return;
	      }

	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerDropdownEvents = function () {
	    var self = this;

	    this.dropdown.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerResultsEvents = function () {
	    var self = this;

	    this.results.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerEvents = function () {
	    var self = this;

	    this.on('open', function () {
	      self.$container.addClass('select2-container--open');
	    });

	    this.on('close', function () {
	      self.$container.removeClass('select2-container--open');
	    });

	    this.on('enable', function () {
	      self.$container.removeClass('select2-container--disabled');
	    });

	    this.on('disable', function () {
	      self.$container.addClass('select2-container--disabled');
	    });

	    this.on('blur', function () {
	      self.$container.removeClass('select2-container--focus');
	    });

	    this.on('query', function (params) {
	      if (!self.isOpen()) {
	        self.trigger('open', {});
	      }

	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:all', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('query:append', function (params) {
	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:append', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('keypress', function (evt) {
	      var key = evt.which;

	      if (self.isOpen()) {
	        if (key === KEYS.ESC || key === KEYS.TAB ||
	            (key === KEYS.UP && evt.altKey)) {
	          self.close();

	          evt.preventDefault();
	        } else if (key === KEYS.ENTER) {
	          self.trigger('results:select', {});

	          evt.preventDefault();
	        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
	          self.trigger('results:toggle', {});

	          evt.preventDefault();
	        } else if (key === KEYS.UP) {
	          self.trigger('results:previous', {});

	          evt.preventDefault();
	        } else if (key === KEYS.DOWN) {
	          self.trigger('results:next', {});

	          evt.preventDefault();
	        }
	      } else {
	        if (key === KEYS.ENTER || key === KEYS.SPACE ||
	            (key === KEYS.DOWN && evt.altKey)) {
	          self.open();

	          evt.preventDefault();
	        }
	      }
	    });
	  };

	  Select2.prototype._syncAttributes = function () {
	    this.options.set('disabled', this.$element.prop('disabled'));

	    if (this.options.get('disabled')) {
	      if (this.isOpen()) {
	        this.close();
	      }

	      this.trigger('disable', {});
	    } else {
	      this.trigger('enable', {});
	    }
	  };

	  Select2.prototype._syncSubtree = function (evt, mutations) {
	    var changed = false;
	    var self = this;

	    // Ignore any mutation events raised for elements that aren't options or
	    // optgroups. This handles the case when the select element is destroyed
	    if (
	      evt && evt.target && (
	        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
	      )
	    ) {
	      return;
	    }

	    if (!mutations) {
	      // If mutation events aren't supported, then we can only assume that the
	      // change affected the selections
	      changed = true;
	    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
	      for (var n = 0; n < mutations.addedNodes.length; n++) {
	        var node = mutations.addedNodes[n];

	        if (node.selected) {
	          changed = true;
	        }
	      }
	    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
	      changed = true;
	    }

	    // Only re-pull the data if we think there is a change
	    if (changed) {
	      this.dataAdapter.current(function (currentData) {
	        self.trigger('selection:update', {
	          data: currentData
	        });
	      });
	    }
	  };

	  /**
	   * Override the trigger method to automatically trigger pre-events when
	   * there are events that can be prevented.
	   */
	  Select2.prototype.trigger = function (name, args) {
	    var actualTrigger = Select2.__super__.trigger;
	    var preTriggerMap = {
	      'open': 'opening',
	      'close': 'closing',
	      'select': 'selecting',
	      'unselect': 'unselecting'
	    };

	    if (args === undefined) {
	      args = {};
	    }

	    if (name in preTriggerMap) {
	      var preTriggerName = preTriggerMap[name];
	      var preTriggerArgs = {
	        prevented: false,
	        name: name,
	        args: args
	      };

	      actualTrigger.call(this, preTriggerName, preTriggerArgs);

	      if (preTriggerArgs.prevented) {
	        args.prevented = true;

	        return;
	      }
	    }

	    actualTrigger.call(this, name, args);
	  };

	  Select2.prototype.toggleDropdown = function () {
	    if (this.options.get('disabled')) {
	      return;
	    }

	    if (this.isOpen()) {
	      this.close();
	    } else {
	      this.open();
	    }
	  };

	  Select2.prototype.open = function () {
	    if (this.isOpen()) {
	      return;
	    }

	    this.trigger('query', {});
	  };

	  Select2.prototype.close = function () {
	    if (!this.isOpen()) {
	      return;
	    }

	    this.trigger('close', {});
	  };

	  Select2.prototype.isOpen = function () {
	    return this.$container.hasClass('select2-container--open');
	  };

	  Select2.prototype.hasFocus = function () {
	    return this.$container.hasClass('select2-container--focus');
	  };

	  Select2.prototype.focus = function (data) {
	    // No need to re-trigger focus events if we are already focused
	    if (this.hasFocus()) {
	      return;
	    }

	    this.$container.addClass('select2-container--focus');
	    this.trigger('focus', {});
	  };

	  Select2.prototype.enable = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("enable")` method has been deprecated and will' +
	        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
	        ' instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      args = [true];
	    }

	    var disabled = !args[0];

	    this.$element.prop('disabled', disabled);
	  };

	  Select2.prototype.data = function () {
	    if (this.options.get('debug') &&
	        arguments.length > 0 && window.console && console.warn) {
	      console.warn(
	        'Select2: Data can no longer be set using `select2("data")`. You ' +
	        'should consider setting the value instead using `$element.val()`.'
	      );
	    }

	    var data = [];

	    this.dataAdapter.current(function (currentData) {
	      data = currentData;
	    });

	    return data;
	  };

	  Select2.prototype.val = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("val")` method has been deprecated and will be' +
	        ' removed in later Select2 versions. Use $element.val() instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      return this.$element.val();
	    }

	    var newVal = args[0];

	    if ($.isArray(newVal)) {
	      newVal = $.map(newVal, function (obj) {
	        return obj.toString();
	      });
	    }

	    this.$element.val(newVal).trigger('change');
	  };

	  Select2.prototype.destroy = function () {
	    this.$container.remove();

	    if (this.$element[0].detachEvent) {
	      this.$element[0].detachEvent('onpropertychange', this._syncA);
	    }

	    if (this._observer != null) {
	      this._observer.disconnect();
	      this._observer = null;
	    } else if (this.$element[0].removeEventListener) {
	      this.$element[0]
	        .removeEventListener('DOMAttrModified', this._syncA, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeInserted', this._syncS, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeRemoved', this._syncS, false);
	    }

	    this._syncA = null;
	    this._syncS = null;

	    this.$element.off('.select2');
	    this.$element.attr('tabindex', this.$element.data('old-tabindex'));

	    this.$element.removeClass('select2-hidden-accessible');
	    this.$element.attr('aria-hidden', 'false');
	    this.$element.removeData('select2');

	    this.dataAdapter.destroy();
	    this.selection.destroy();
	    this.dropdown.destroy();
	    this.results.destroy();

	    this.dataAdapter = null;
	    this.selection = null;
	    this.dropdown = null;
	    this.results = null;
	  };

	  Select2.prototype.render = function () {
	    var $container = $(
	      '<span class="select2 select2-container">' +
	        '<span class="selection"></span>' +
	        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
	      '</span>'
	    );

	    $container.attr('dir', this.options.get('dir'));

	    this.$container = $container;

	    this.$container.addClass('select2-container--' + this.options.get('theme'));

	    $container.data('element', this.$element);

	    return $container;
	  };

	  return Select2;
	});

	S2.define('jquery-mousewheel',[
	  'jquery'
	], function ($) {
	  // Used to shim jQuery.mousewheel for non-full builds.
	  return $;
	});

	S2.define('jquery.select2',[
	  'jquery',
	  'jquery-mousewheel',

	  './select2/core',
	  './select2/defaults'
	], function ($, _, Select2, Defaults) {
	  if ($.fn.select2 == null) {
	    // All methods that should return the element
	    var thisMethods = ['open', 'close', 'destroy'];

	    $.fn.select2 = function (options) {
	      options = options || {};

	      if (typeof options === 'object') {
	        this.each(function () {
	          var instanceOptions = $.extend(true, {}, options);

	          var instance = new Select2($(this), instanceOptions);
	        });

	        return this;
	      } else if (typeof options === 'string') {
	        var ret;
	        var args = Array.prototype.slice.call(arguments, 1);

	        this.each(function () {
	          var instance = $(this).data('select2');

	          if (instance == null && window.console && console.error) {
	            console.error(
	              'The select2(\'' + options + '\') method was called on an ' +
	              'element that is not using Select2.'
	            );
	          }

	          ret = instance[options].apply(instance, args);
	        });

	        // Check if we should be returning `this`
	        if ($.inArray(options, thisMethods) > -1) {
	          return this;
	        }

	        return ret;
	      } else {
	        throw new Error('Invalid arguments for Select2: ' + options);
	      }
	    };
	  }

	  if ($.fn.select2.defaults == null) {
	    $.fn.select2.defaults = Defaults;
	  }

	  return Select2;
	});

	  // Return the AMD loader configuration so it can be used outside of this file
	  return {
	    define: S2.define,
	    require: S2.require
	  };
	}());

	  // Autoload the jQuery bindings
	  // We know that all of the modules exist above this, so we're safe
	  var select2 = S2.require('jquery.select2');

	  // Hold the AMD module references on the jQuery function that was just loaded
	  // This allows Select2 to use the internal loader outside of this file, such
	  // as in the language files.
	  jQuery.fn.select2.amd = S2;

	  // Return the Select2 instance for anyone who is importing it.
	  return select2;
	}));


/***/ },
/* 777 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 778 */
/***/ function(module, exports) {

	module.exports = " <div ng-controller=\"mycontroller\" id=\"dejavu-controller\">\n  <dejavu-content framework=\"framework\"></dejavu-content>\n</div>\n"

/***/ },
/* 779 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12-sm\">\n\t\t\t<a href=\"#/\">Index list</a>\n      <h1>Index: {{ ctrl.index }}</h1>\n\t\t\t<pre>{{ ctrl.status | json }}</pre>\n    </div>\n  </div>\n</div>\n"

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');

	  module.directive('autoSelectIfOnlyOne', function ($parse) {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link(scope, element, attributes, ngModelCtrl) {
	        attributes.$observe('autoSelectIfOnlyOne', function (result) {
	          var options = $parse(result)(scope);
	          if (options && options.length === 1) {
	            ngModelCtrl.$setViewValue(options[0]);
	            ngModelCtrl.$render();
	          }
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(194);
	__webpack_require__(208);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var _ = __webpack_require__(194);
	  var $ = __webpack_require__(208);

	  module.directive('clickFocus', function () {
	    return {
	      scope: {
	        clickFocus: '='
	      },
	      restrict: 'A',
	      link: function link($scope, $elem) {
	        function handler() {
	          var focusElem = $.find('input[name=' + $scope.clickFocus + ']');
	          if (focusElem[0]) focusElem[0].focus();
	        }

	        $elem.bind('click', handler);
	        $scope.$on('$destroy', _.bindKey($elem, 'unbind', 'click', handler));
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana').directive('confirmClick', function () {
	    return {
	      restrict: 'A',
	      link: function link($scope, $elem, attrs) {
	        $elem.bind('click', function () {
	          var message = attrs.confirmation || 'Are you sure?';
	          if (window.confirm(message)) {
	            // eslint-disable-line no-alert
	            var action = attrs.confirmClick;
	            if (action) {
	              $scope.$apply($scope.$eval(action));
	            }
	          }
	        });

	        $scope.$on('$destroy', function () {
	          $elem.unbind('click');
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(208);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var $ = __webpack_require__(208);
	  var _ = __webpack_require__(194);

	  module.directive('cssTruncate', function ($timeout) {
	    return {
	      restrict: 'A',
	      scope: {},
	      link: function link($scope, $elem, attrs) {

	        $elem.css({
	          overflow: 'hidden',
	          'white-space': 'nowrap',
	          'text-overflow': 'ellipsis',
	          'word-break': 'break-all'
	        });

	        if (attrs.cssTruncateExpandable != null) {
	          $scope.$watch(function () {
	            return $elem.html();
	          }, function () {
	            if ($elem[0].offsetWidth < $elem[0].scrollWidth) {
	              $elem.css({ 'cursor': 'pointer' });
	              $elem.bind('click', function () {
	                $scope.toggle();
	              });
	            }
	          });
	        }

	        $scope.toggle = function () {
	          if ($elem.css('white-space') !== 'normal') {
	            $elem.css({ 'white-space': 'normal' });
	          } else {
	            $elem.css({ 'white-space': 'nowrap' });
	          }
	        };

	        $scope.$on('$destroy', function () {
	          $elem.unbind('click');
	          $elem.unbind('mouseenter');
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(785);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  __webpack_require__(785);

	  module.directive('fieldName', function ($compile, $rootScope, $filter) {
	    return {
	      restrict: 'AE',
	      scope: {
	        'field': '=',
	        'fieldName': '=',
	        'fieldType': '='
	      },
	      link: function link($scope, $el) {

	        var typeIcon = function typeIcon(fieldType) {
	          switch (fieldType) {
	            case 'source':
	              return '<i class="fa fa-file-text-o "></i>';
	            case 'string':
	              return '<i><strong>t</strong></i>';
	            case 'murmur3':
	              return '<i><strong>h</strong></i>';
	            case 'number':
	              return '<i><strong>#</strong></i>';
	            case 'date':
	              return '<i class="fa fa-clock-o"></i>';
	            case 'ip':
	              return '<i class="fa fa-laptop"></i>';
	            case 'geo_point':
	              return '<i class="fa fa-globe"></i>';
	            case 'boolean':
	              return '<i class="fa fa-adjust"></i>';
	            case 'conflict':
	              return '<i class="fa fa-warning"></i>';
	            default:
	              return '<i><strong>?</strong></i>';
	          }
	        };

	        $rootScope.$watchMulti.call($scope, ['field', 'fieldName', 'fieldType', 'field.rowCount'], function () {

	          var type = $scope.field ? $scope.field.type : $scope.fieldType;
	          var name = $scope.field ? $scope.field.name : $scope.fieldName;
	          var results = $scope.field ? !$scope.field.rowCount && !$scope.field.scripted : false;
	          var scripted = $scope.field ? $scope.field.scripted : false;

	          var displayName = $filter('shortDots')(name);

	          $el.text(displayName).attr('title', name).toggleClass('no-results', results).toggleClass('scripted', scripted).prepend(typeIcon(type));
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 785 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	// Shorts dot notated strings
	// eg: foo.bar.baz becomes f.b.baz
	// 'foo.bar.baz'.replace(/(.+?\.)/g,function(v) {return v[0]+'.';});
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').filter('shortDots', function (Private) {
	    return Private(shortDotsFilterProvider);
	  });

	  function shortDotsFilterProvider(config, $rootScope) {
	    var filter = undefined;

	    function updateFilter() {
	      filter = config.get('shortDots:enable') ? _.shortenDottedString : _.identity;
	    }

	    updateFilter();
	    $rootScope.$on('change:config.shortDots:enable', updateFilter);
	    $rootScope.$on('init:config', updateFilter);

	    return function (str) {
	      return filter(str);
	    };
	  }

	  return shortDotsFilterProvider;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 786 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(208);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var $ = __webpack_require__(208);

	  module.directive('fileUpload', function ($parse) {
	    return {
	      restrict: 'A',
	      link: function link($scope, $elem, attrs) {
	        var onUpload = $parse(attrs.fileUpload);

	        var $fileInput = $('<input type="file" style="opacity: 0" id="testfile" />');
	        $elem.after($fileInput);

	        $fileInput.on('change', function (e) {
	          var reader = new FileReader();
	          reader.onload = function (e) {
	            $scope.$apply(function () {
	              onUpload($scope, { fileContents: e.target.result });
	            });
	          };

	          var target = e.srcElement || e.target;
	          if (target && target.files && target.files.length) reader.readAsText(target.files[0]);
	        });

	        $elem.on('click', function (e) {
	          $fileInput.val(null);
	          $fileInput.trigger('click');
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	  function makeDirectiveDef(id, compare) {
	    return function ($parse) {
	      return {
	        require: 'ngModel',
	        link: function link($scope, $el, $attr, ngModel) {
	          var getBound = function getBound() {
	            return $parse($attr[id])();
	          };
	          var defaultVal = ({
	            'greaterThan': -Infinity,
	            'lessThan': Infinity
	          })[id];

	          ngModel.$parsers.push(validate);
	          ngModel.$formatters.push(validate);

	          $scope.$watch(getBound, function () {
	            validate(ngModel.$viewValue);
	          });

	          function validate(val) {
	            var bound = !isNaN(getBound()) ? +getBound() : defaultVal;
	            var valid = !isNaN(bound) && !isNaN(val) && compare(val, bound);
	            ngModel.$setValidity(id, valid);
	            return val;
	          }
	        }
	      };
	    };
	  }

	  __webpack_require__(215).get('kibana').directive('greaterThan', makeDirectiveDef('greaterThan', function (a, b) {
	    return a > b;
	  })).directive('lessThan', makeDirectiveDef('lessThan', function (a, b) {
	    return a < b;
	  }));
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(208);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var $ = __webpack_require__(208);

	  module.directive('kbnInfiniteScroll', function () {
	    return {
	      restrict: 'E',
	      scope: {
	        more: '='
	      },
	      link: function link($scope, $element, attrs) {
	        var $window = $(window);
	        var checkTimer = undefined;

	        function onScroll() {
	          if (!$scope.more) return;

	          var winHeight = $window.height();
	          var winBottom = winHeight + $window.scrollTop();
	          var elTop = $element.offset().top;
	          var remaining = elTop - winBottom;

	          if (remaining <= winHeight * 0.50) {
	            $scope[$scope.$$phase ? '$eval' : '$apply'](function () {
	              var more = $scope.more();
	            });
	          }
	        }

	        function scheduleCheck() {
	          if (checkTimer) return;
	          checkTimer = setTimeout(function () {
	            checkTimer = null;
	            onScroll();
	          }, 50);
	        }

	        $window.on('scroll', scheduleCheck);
	        $scope.$on('$destroy', function () {
	          clearTimeout(checkTimer);
	          $window.off('scroll', scheduleCheck);
	        });
	        scheduleCheck();
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(790);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var html = __webpack_require__(790);

	  __webpack_require__(215).get('kibana').directive('kbnInfo', function () {
	    return {
	      restrict: 'E',
	      scope: {
	        info: '@',
	        placement: '@'
	      },
	      template: html,
	      link: function link($scope) {
	        $scope.placement = $scope.placement || 'top';
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 790 */
/***/ function(module, exports) {

	module.exports = "<i aria-label=\"{{info}}\" class=\"fa fa-info-circle\"\r\n    tooltip=\"{{info}}\"\r\n    tooltip-placement=\"{{placement}}\"\r\n    tooltip-popup-delay=\"250\"></i>"

/***/ },
/* 791 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(208);
	__webpack_require__(194);
	__webpack_require__(243);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var $ = __webpack_require__(208);
	  var _ = __webpack_require__(194);
	  var moment = __webpack_require__(243);

	  module.directive('inputDatetime', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link($scope, $elem, attrs, ngModel) {

	        var format = 'YYYY-MM-DD HH:mm:ss.SSS';

	        $elem.after('<div class="input-datetime-format">' + format + '</div>');

	        // What should I make with the input from the user?
	        var fromUser = function fromUser(text) {
	          var parsed = moment(text, format);
	          return parsed.isValid() ? parsed : undefined;
	        };

	        // How should I present the data back to the user in the input field?
	        var toUser = function toUser(datetime) {
	          return moment(datetime).format(format);
	        };

	        ngModel.$parsers.push(fromUser);
	        ngModel.$formatters.push(toUser);
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');

	  module.directive('inputWholeNumber', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link($scope, $elem, attrs, ngModel) {
	        ngModel.$parsers.push(checkWholeNumber);
	        ngModel.$formatters.push(checkWholeNumber);

	        function checkWholeNumber(value) {
	          ngModel.$setValidity('whole', value % 1 === 0);
	          return value;
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);

	  __webpack_require__(215).get('kibana').directive('jsonInput', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link(scope, $el, attrs, ngModelCntrl) {
	        ngModelCntrl.$formatters.push(toJSON);
	        ngModelCntrl.$parsers.push(fromJSON);

	        function fromJSON(value) {
	          try {
	            value = JSON.parse(value);
	            var validity = !scope.$eval(attrs.requireKeys) ? true : _.keys(value).length > 0;
	            ngModelCntrl.$setValidity('json', validity);
	          } catch (e) {
	            ngModelCntrl.$setValidity('json', false);
	          }
	          return value;
	        }

	        function toJSON(value) {
	          return angular.toJson(value, 2);
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 794 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(281)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.kbnUrlDirective = kbnUrlDirective;

	var _uiModules = __webpack_require__(215);

	var _uiModules2 = _interopRequireDefault(_uiModules);

	var _uiChrome = __webpack_require__(1);

	var _uiChrome2 = _interopRequireDefault(_uiChrome);

	var _lodash = __webpack_require__(194);

	function kbnUrlDirective(name) {
	  var srcAttr = (0, _lodash.kebabCase)(name);
	  var attr = (0, _lodash.kebabCase)((0, _lodash.words)(name).slice(1));

	  _uiModules2['default'].get('kibana').directive(name, function (Private) {
	    return {
	      restrict: 'A',
	      link: function link($scope, $el, $attr) {
	        $attr.$observe(name, function (val) {
	          $attr.$set(attr, _uiChrome2['default'].addBasePath(val));
	        });
	      }
	    };
	  });
	}

	kbnUrlDirective('kbnHref');

/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _kbnHref = __webpack_require__(794);

	(0, _kbnHref.kbnUrlDirective)('kbnSrc');

/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(797);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  var PER_PAGE_DEFAULT = 10;

	  __webpack_require__(215).get('kibana').directive('paginate', function ($parse, $compile) {
	    return {
	      restrict: 'E',
	      scope: true,
	      link: {
	        pre: function pre($scope, $el, attrs) {
	          if (_.isUndefined(attrs.bottomControls)) attrs.bottomControls = true;
	          if ($el.find('paginate-controls.paginate-bottom').size() === 0 && attrs.bottomControls) {
	            $el.append($compile('<paginate-controls class="paginate-bottom">')($scope));
	          }
	        },
	        post: function post($scope, $el, attrs) {
	          if (_.isUndefined(attrs.topControls)) attrs.topControls = false;
	          if ($el.find('paginate-controls.paginate-top').size() === 0 && attrs.topControls) {
	            $el.prepend($compile('<paginate-controls class="paginate-top">')($scope));
	          }

	          var paginate = $scope.paginate;

	          // add some getters to the controller powered by attributes
	          paginate.getList = $parse(attrs.list);
	          paginate.perPageProp = attrs.perPageProp;

	          if (attrs.perPage) {
	            paginate.perPage = attrs.perPage;
	            $scope.showSelector = false;
	          } else {
	            $scope.showSelector = true;
	          }

	          paginate.otherWidthGetter = $parse(attrs.otherWidth);

	          paginate.init();
	        }
	      },
	      controllerAs: 'paginate',
	      controller: function controller($scope) {
	        var self = this;
	        var ALL = 0;

	        self.sizeOptions = [{ title: '10', value: 10 }, { title: '25', value: 25 }, { title: '100', value: 100 }, { title: 'All', value: ALL }];

	        // setup the watchers, called in the post-link function
	        self.init = function () {

	          self.perPage = _.parseInt(self.perPage) || $scope[self.perPageProp];

	          $scope.$watchMulti(['paginate.perPage', self.perPageProp, self.otherWidthGetter], function (vals, oldVals) {
	            var intChanges = vals[0] !== oldVals[0];
	            var extChanges = vals[1] !== oldVals[1];

	            if (intChanges) {
	              if (!setPerPage(self.perPage)) {
	                // if we are not able to set the external value,
	                // render now, otherwise wait for the external value
	                // to trigger the watcher again
	                self.renderList();
	              }
	              return;
	            }

	            self.perPage = _.parseInt(self.perPage) || $scope[self.perPageProp];
	            if (self.perPage == null) {
	              self.perPage = ALL;
	              return;
	            }

	            self.renderList();
	          });

	          $scope.$watch('page', self.changePage);
	          $scope.$watchCollection(self.getList, function (list) {
	            $scope.list = list;
	            self.renderList();
	          });
	        };

	        self.goToPage = function (number) {
	          if (number) {
	            if (number.hasOwnProperty('number')) number = number.number;
	            $scope.page = $scope.pages[number - 1] || $scope.pages[0];
	          }
	        };

	        self.renderList = function () {
	          $scope.pages = [];
	          if (!$scope.list) return;

	          var perPage = _.parseInt(self.perPage);
	          var count = perPage ? Math.ceil($scope.list.length / perPage) : 1;

	          _.times(count, function (i) {
	            var page = undefined;

	            if (perPage) {
	              var start = perPage * i;
	              page = $scope.list.slice(start, start + perPage);
	            } else {
	              page = $scope.list.slice(0);
	            }

	            page.number = i + 1;
	            page.i = i;

	            page.count = count;
	            page.first = page.number === 1;
	            page.last = page.number === count;

	            page.prev = $scope.pages[i - 1];
	            if (page.prev) page.prev.next = page;

	            $scope.pages.push(page);
	          });

	          // set the new page, or restore the previous page number
	          if ($scope.page && $scope.page.i < $scope.pages.length) {
	            $scope.page = $scope.pages[$scope.page.i];
	          } else {
	            $scope.page = $scope.pages[0];
	          }
	        };

	        self.changePage = function (page) {
	          if (!page) {
	            $scope.otherPages = null;
	            return;
	          }

	          // setup the list of the other pages to link to
	          $scope.otherPages = [];
	          var width = +self.otherWidthGetter($scope) || 5;
	          var left = page.i - Math.round((width - 1) / 2);
	          var right = left + width - 1;

	          // shift neg count from left to right
	          if (left < 0) {
	            right += 0 - left;
	            left = 0;
	          }

	          // shift extra right nums to left
	          var lastI = page.count - 1;
	          if (right > lastI) {
	            right = lastI;
	            left = right - width + 1;
	          }

	          for (var i = left; i <= right; i++) {
	            var other = $scope.pages[i];

	            if (!other) continue;

	            $scope.otherPages.push(other);
	            if (other.last) $scope.otherPages.containsLast = true;
	            if (other.first) $scope.otherPages.containsFirst = true;
	          }
	        };

	        function setPerPage(val) {
	          var $ppParent = $scope;

	          while ($ppParent && !_.has($ppParent, self.perPageProp)) {
	            $ppParent = $ppParent.$parent;
	          }

	          if ($ppParent) {
	            $ppParent[self.perPageProp] = val;
	            return true;
	          }
	        }
	      }
	    };
	  }).directive('paginateControls', function () {
	    // this directive is automatically added by paginate if not found within it's $el
	    return {
	      restrict: 'E',
	      template: __webpack_require__(797)
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 797 */
/***/ function(module, exports) {

	module.exports = "<div class=\"pagination-other-pages\">\r\n  <ul class=\"pagination-other-pages-list pagination-sm\" ng-if=\"page.count > 1\">\r\n    <li ng-style=\"{'visibility':'hidden'}\" ng-if=\"page.first\">\r\n      <a ng-click=\"paginate.goToPage(page.prev)\">«</a>\r\n    </li>\r\n    <li ng-style=\"{'visibility':'visible'}\" ng-if=\"!page.first\">\r\n      <a ng-click=\"paginate.goToPage(page.prev)\">«</a>\r\n    </li>\r\n\r\n    <li ng-if=\"!otherPages.containsFirst\">\r\n      <a ng-click=\"paginate.goToPage(1)\">1...</a>\r\n    </li>\r\n\r\n    <li\r\n      ng-repeat=\"other in otherPages\"\r\n      ng-class=\"{ active: other.number === page.number }\">\r\n      <a ng-click=\"paginate.goToPage(other)\">{{other.number}}</a>\r\n    </li>\r\n\r\n    <li ng-if=\"!otherPages.containsLast\">\r\n      <a ng-click=\"paginate.goToPage(page.count)\">...{{page.count}}</a>\r\n    </li>\r\n\r\n    <li ng-style=\"{'visibility':'hidden'}\" ng-if=\"page.last\">\r\n      <a ng-click=\"paginate.goToPage(page.next)\">»</a>\r\n    </li>\r\n    <li ng-style=\"{'visibility':'visible'}\" ng-if=\"!page.last\">\r\n      <a ng-click=\"paginate.goToPage(page.next)\">»</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<form class=\"form-inline pagination-size\" ng-if=\"showSelector\">\r\n  <div class=\"form-group\">\r\n    <label>Page Size</label>\r\n    <select ng-model=\"paginate.perPage\" ng-options=\"opt.value as opt.title for opt in paginate.sizeOptions\">\r\n    </select>\r\n  </div>\r\n</form>\r\n"

/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(194);
	__webpack_require__(245);
	__webpack_require__(243);
	__webpack_require__(799);
	__webpack_require__(800);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var _ = __webpack_require__(194);
	  var dateMath = __webpack_require__(245);
	  var moment = __webpack_require__(243);

	  __webpack_require__(799);
	  __webpack_require__(800);

	  module.directive('prettyDuration', function (config, quickRanges, timeUnits) {
	    return {
	      restrict: 'E',
	      scope: {
	        from: '=',
	        to: '='
	      },
	      link: function link($scope, $elem) {
	        var dateFormat = config.get('dateFormat');

	        var lookupByRange = {};
	        _.each(quickRanges, function (frame) {
	          lookupByRange[frame.from + ' to ' + frame.to] = frame;
	        });

	        function stringify() {
	          var text = undefined;
	          // If both parts are date math, try to look up a reasonable string
	          if ($scope.from && $scope.to && !moment.isMoment($scope.from) && !moment.isMoment($scope.to)) {
	            var tryLookup = lookupByRange[$scope.from.toString() + ' to ' + $scope.to.toString()];
	            if (tryLookup) {
	              $elem.text(tryLookup.display);
	            } else {
	              var fromParts = $scope.from.toString().split('-');
	              if ($scope.to.toString() === 'now' && fromParts[0] === 'now' && fromParts[1]) {
	                var rounded = fromParts[1].split('/');
	                text = 'Last ' + rounded[0];
	                if (rounded[1]) {
	                  text = text + ' rounded to the ' + timeUnits[rounded[1]];
	                }
	                $elem.text(text);
	              } else {
	                cantLookup();
	              }
	            }
	            // If at least one part is a moment, try to make pretty strings by parsing date math
	          } else {
	              cantLookup();
	            }
	        };

	        function cantLookup() {
	          var display = {};
	          _.each(['from', 'to'], function (time) {
	            if (moment.isMoment($scope[time])) {
	              display[time] = $scope[time].format(dateFormat);
	            } else {
	              if ($scope[time] === 'now') {
	                display[time] = 'now';
	              } else {
	                var tryParse = dateMath.parse($scope[time], time === 'to' ? true : false);
	                display[time] = moment.isMoment(tryParse) ? '~ ' + tryParse.fromNow() : $scope[time];
	              }
	            }
	          });
	          $elem.text(display.from + ' to ' + display.to);
	        };

	        $scope.$watch('from', stringify);
	        $scope.$watch('to', stringify);
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var module = __webpack_require__(215).get('kibana');

	    module.constant('quickRanges', [{ from: 'now/d', to: 'now/d', display: 'Today', section: 0 }, { from: 'now/w', to: 'now/w', display: 'This week', section: 0 }, { from: 'now/M', to: 'now/M', display: 'This month', section: 0 }, { from: 'now/y', to: 'now/y', display: 'This year', section: 0 }, { from: 'now/d', to: 'now', display: 'The day so far', section: 0 }, { from: 'now/w', to: 'now', display: 'Week to date', section: 0 }, { from: 'now/M', to: 'now', display: 'Month to date', section: 0 }, { from: 'now/y', to: 'now', display: 'Year to date', section: 0 }, { from: 'now-1d/d', to: 'now-1d/d', display: 'Yesterday', section: 1 }, { from: 'now-2d/d', to: 'now-2d/d', display: 'Day before yesterday', section: 1 }, { from: 'now-7d/d', to: 'now-7d/d', display: 'This day last week', section: 1 }, { from: 'now-1w/w', to: 'now-1w/w', display: 'Previous week', section: 1 }, { from: 'now-1M/M', to: 'now-1M/M', display: 'Previous month', section: 1 }, { from: 'now-1y/y', to: 'now-1y/y', display: 'Previous year', section: 1 }, { from: 'now-15m', to: 'now', display: 'Last 15 minutes', section: 2 }, { from: 'now-30m', to: 'now', display: 'Last 30 minutes', section: 2 }, { from: 'now-1h', to: 'now', display: 'Last 1 hour', section: 2 }, { from: 'now-4h', to: 'now', display: 'Last 4 hours', section: 2 }, { from: 'now-12h', to: 'now', display: 'Last 12 hours', section: 2 }, { from: 'now-24h', to: 'now', display: 'Last 24 hours', section: 2 }, { from: 'now-7d', to: 'now', display: 'Last 7 days', section: 2 }, { from: 'now-30d', to: 'now', display: 'Last 30 days', section: 3 }, { from: 'now-60d', to: 'now', display: 'Last 60 days', section: 3 }, { from: 'now-90d', to: 'now', display: 'Last 90 days', section: 3 }, { from: 'now-6M', to: 'now', display: 'Last 6 months', section: 3 }, { from: 'now-1y', to: 'now', display: 'Last 1 year', section: 3 }, { from: 'now-2y', to: 'now', display: 'Last 2 years', section: 3 }, { from: 'now-5y', to: 'now', display: 'Last 5 years', section: 3 }]);
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 800 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');

	  module.constant('timeUnits', {
	    s: 'second',
	    m: 'minute',
	    h: 'hour',
	    d: 'day',
	    w: 'week',
	    M: 'month',
	    y: 'year'
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(208);
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(802);
	__webpack_require__(803);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var $ = __webpack_require__(208);
	  var _ = __webpack_require__(194);
	  var module = __webpack_require__(215).get('kibana');
	  var AggConfigResult = __webpack_require__(802);

	  module.directive('kbnRows', function ($compile, $rootScope, getAppState, Private) {
	    var filterBarClickHandler = Private(__webpack_require__(803));
	    return {
	      restrict: 'A',
	      link: function link($scope, $el, attr) {
	        function addCell($tr, contents) {
	          var $cell = $(document.createElement('td'));

	          // TODO: It would be better to actually check the type of the field, but we don't have
	          // access to it here. This may become a problem with the switch to BigNumber
	          if (_.isNumeric(contents)) $cell.addClass('numeric-value');

	          var createAggConfigResultCell = function createAggConfigResultCell(aggConfigResult) {
	            var $cell = $(document.createElement('td'));
	            var $state = getAppState();
	            var clickHandler = filterBarClickHandler($state);
	            $cell.scope = $scope.$new();
	            $cell.addClass('cell-hover');
	            $cell.attr('ng-click', 'clickHandler($event)');
	            $cell.scope.clickHandler = function (event) {
	              if ($(event.target).is('a')) return; // Don't add filter if a link was clicked
	              clickHandler({ point: { aggConfigResult: aggConfigResult } });
	            };
	            return $compile($cell)($cell.scope);
	          };

	          if (contents instanceof AggConfigResult) {
	            if (contents.type === 'bucket' && contents.aggConfig.field() && contents.aggConfig.field().filterable) {
	              $cell = createAggConfigResultCell(contents);
	            }
	            contents = contents.toString('html');
	          }

	          if (_.isObject(contents)) {
	            if (contents.attr) {
	              $cell.attr(contents.attr);
	            }

	            if (contents['class']) {
	              $cell.addClass(contents['class']);
	            }

	            if (contents.scope) {
	              $cell = $compile($cell.html(contents.markup))(contents.scope);
	            } else {
	              $cell.html(contents.markup);
	            }
	          } else {
	            if (contents === '') {
	              $cell.html('&nbsp;');
	            } else {
	              $cell.html(contents);
	            }
	          }

	          $tr.append($cell);
	        }

	        function maxRowSize(max, row) {
	          return Math.max(max, row.length);
	        }

	        $scope.$watchMulti([attr.kbnRows, attr.kbnRowsMin], function (vals) {
	          var rows = vals[0];
	          var min = vals[1];

	          $el.empty();

	          if (!_.isArray(rows)) rows = [];
	          var width = rows.reduce(maxRowSize, 0);

	          if (isFinite(min) && rows.length < min) {
	            (function () {
	              // clone the rows so that we can add elements to it without upsetting the original
	              rows = _.clone(rows);
	              // crate the empty row which will be pushed into the row list over and over
	              var emptyRow = new Array(width);
	              // fill the empty row with values
	              _.times(width, function (i) {
	                emptyRow[i] = '';
	              });
	              // push as many empty rows into the row array as needed
	              _.times(min - rows.length, function () {
	                rows.push(emptyRow);
	              });
	            })();
	          }

	          rows.forEach(function (row) {
	            var $tr = $(document.createElement('tr')).appendTo($el);
	            row.forEach(function (cell) {
	              addCell($tr, cell);
	            });
	          });
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	  var i = 0;

	  function AggConfigResult(aggConfig, parent, value, key) {
	    this.key = key;
	    this.value = value;
	    this.aggConfig = aggConfig;
	    this.$parent = parent;
	    this.$order = ++i;

	    if (aggConfig.schema.group === 'buckets') {
	      this.type = 'bucket';
	    } else {
	      this.type = 'metric';
	    }
	  }

	  /**
	   * Returns an array of the aggConfigResult and parents up the branch
	   * @returns {array} Array of aggConfigResults
	   */
	  AggConfigResult.prototype.getPath = function () {
	    return (function walk(_x, _x2) {
	      var _again = true;

	      _function: while (_again) {
	        var result = _x,
	            path = _x2;
	        _again = false;

	        path.unshift(result);
	        if (result.$parent) {
	          _x = result.$parent;
	          _x2 = path;
	          _again = true;
	          continue _function;
	        }
	        return path;
	      }
	    })(this, []);
	  };

	  /**
	   * Returns an Elasticsearch filter that represents the result.
	   * @returns {object} Elasticsearch filter
	   */
	  AggConfigResult.prototype.createFilter = function () {
	    return this.aggConfig.createFilter(this.key);
	  };

	  AggConfigResult.prototype.toString = function (contentType) {
	    return this.aggConfig.fieldFormatter(contentType)(this.value);
	  };

	  AggConfigResult.prototype.valueOf = function () {
	    return this.value;
	  };

	  return AggConfigResult;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 803 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(804);
	__webpack_require__(806);
	__webpack_require__(807);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var dedupFilters = __webpack_require__(804);
	  var uniqFilters = __webpack_require__(806);
	  var findByParam = __webpack_require__(807);

	  return function (Notifier) {
	    return function ($state) {
	      return function (event, simulate) {
	        var notify = new Notifier({
	          location: 'Filter bar'
	        });
	        var aggConfigResult = undefined;

	        // Hierarchical and tabular data set their aggConfigResult parameter
	        // differently because of how the point is rewritten between the two. So
	        // we need to check if the point.orig is set, if not use try the point.aggConfigResult
	        if (event.point.orig) {
	          aggConfigResult = event.point.orig.aggConfigResult;
	        } else if (event.point.values) {
	          aggConfigResult = findByParam(event.point.values, 'aggConfigResult');
	        } else {
	          aggConfigResult = event.point.aggConfigResult;
	        }

	        if (aggConfigResult) {
	          var isLegendLabel = !!event.point.values;
	          var aggBuckets = _.filter(aggConfigResult.getPath(), { type: 'bucket' });

	          // For legend clicks, use the last bucket in the path
	          if (isLegendLabel) {
	            (function () {
	              // series data has multiple values, use aggConfig on the first
	              // hierarchical data values is an object with the addConfig
	              var aggConfig = findByParam(event.point.values, 'aggConfig');
	              aggBuckets = aggBuckets.filter(function (result) {
	                return result.aggConfig && result.aggConfig === aggConfig;
	              });
	            })();
	          }

	          var filters = _(aggBuckets).map(function (result) {
	            try {
	              return result.createFilter();
	            } catch (e) {
	              notify.warning(e.message);
	            }
	          }).filter(Boolean).value();

	          if (!filters.length) return;

	          if (event.negate) {
	            _.each(filters, function (filter) {
	              filter.meta = filter.meta || {};
	              filter.meta.negate = true;
	            });
	          }

	          filters = dedupFilters($state.filters, uniqFilters(filters));
	          // We need to add a bunch of filter deduping here.
	          if (!simulate) {
	            $state.$newFilters = filters;
	          }

	          return filters;
	        }
	      };
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 804 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(805);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);
	  var compareFilters = __webpack_require__(805);

	  /**
	   * Combine 2 filter collections, removing duplicates
	   * @param {object} existing The filters to compare to
	   * @param {object} filters The filters being added
	   * @param {object} comparatorOptions Parameters to use for comparison
	   * @returns {object} An array of filters that were not in existing
	   */
	  return function (existingFilters, filters, comparatorOptions) {
	    if (!_.isArray(filters)) filters = [filters];

	    return _.filter(filters, function (filter) {
	      return !_.find(existingFilters, function (existingFilter) {
	        return compareFilters(existingFilter, filter, comparatorOptions);
	      });
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 805 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);
	  var excludedAttributes = undefined;
	  var comparators = undefined;

	  /**
	   * Compare two filters to see if they match
	   * @param {object} first The first filter to compare
	   * @param {object} second The second filter to compare
	   * @param {object} comparatorOptions Parameters to use for comparison
	   * @returns {bool} Filters are the same
	   */
	  return function (first, second, comparatorOptions) {
	    excludedAttributes = ['$$hashKey', 'meta'];
	    comparators = _.defaults(comparatorOptions || {}, {
	      state: false,
	      negate: false,
	      disabled: false
	    });

	    if (!comparators.state) excludedAttributes.push('$state');

	    return _.isEqual(mapFilter(first), mapFilter(second));
	  };

	  function mapFilter(filter) {
	    var cleaned = _.omit(filter, excludedAttributes);
	    if (comparators.negate) cleaned.negate = filter.meta && !!filter.meta.negate;
	    if (comparators.disabled) cleaned.disabled = filter.meta && !!filter.meta.disabled;
	    return cleaned;
	  }
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 806 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(804);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var dedupFilters = __webpack_require__(804);

	  /**
	   * Remove duplicate filters from an array of filters
	   * @param {array} filters The filters to remove duplicates from
	   * @returns {object} The original filters array with duplicates removed
	   */
	  return function (filters, comparatorOptions) {
	    var results = [];
	    _.each(filters, function (filter) {
	      results = _.union(results, dedupFilters(results, [filter], comparatorOptions));
	    });
	    return results;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 807 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  // given an object or array of objects, return the value of the passed param
	  // if the param is missing, return undefined
	  return function findByParam(values, param) {
	    if (_.isArray(values)) {
	      // point series chart
	      var index = _.findIndex(values, param);
	      if (index === -1) return;
	      return values[index][param];
	    }
	    return values[param]; // pie chart
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 808 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(194);
	__webpack_require__(263);
	__webpack_require__(809);
	__webpack_require__(810);
	__webpack_require__(811);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var _ = __webpack_require__(194);
	  var rison = __webpack_require__(263);
	  var keymap = __webpack_require__(809);

	  module.directive('savedObjectFinder', function ($location, $injector, kbnUrl, Private, config) {

	    var services = Private(__webpack_require__(810)).byLoaderPropertiesName;

	    return {
	      restrict: 'E',
	      scope: {
	        type: '@',
	        title: '@?',
	        // optional make-url attr, sets the userMakeUrl in our scope
	        userMakeUrl: '=?makeUrl',
	        // optional on-choose attr, sets the userOnChoose in our scope
	        userOnChoose: '=?onChoose'
	      },
	      template: __webpack_require__(811),
	      controllerAs: 'finder',
	      controller: function controller($scope, $element, $timeout) {
	        var self = this;

	        // The number of items to show in the list
	        $scope.perPage = config.get('savedObjects:perPage');

	        // the text input element
	        var $input = $element.find('input[ng-model=filter]');

	        // the list that will hold the suggestions
	        var $list = $element.find('ul');

	        // the current filter string, used to check that returned results are still useful
	        var currentFilter = $scope.filter;

	        // the most recently entered search/filter
	        var prevSearch = undefined;

	        // the list of hits, used to render display
	        self.hits = [];

	        self.service = services[$scope.type];
	        self.properties = self.service.loaderProperties;

	        filterResults();

	        /**
	         * Passed the hit objects and will determine if the
	         * hit should have a url in the UI, returns it if so
	         * @return {string|null} - the url or nothing
	         */
	        self.makeUrl = function (hit) {
	          if ($scope.userMakeUrl) {
	            return $scope.userMakeUrl(hit);
	          }

	          if (!$scope.userOnChoose) {
	            return hit.url;
	          }

	          return '#';
	        };

	        self.preventClick = function ($event) {
	          $event.preventDefault();
	        };

	        /**
	         * Called when a hit object is clicked, can override the
	         * url behavior if necessary.
	         */
	        self.onChoose = function (hit, $event) {
	          if ($scope.userOnChoose) {
	            $scope.userOnChoose(hit, $event);
	          }

	          var url = self.makeUrl(hit);
	          if (!url || url === '#' || url.charAt(0) !== '#') return;

	          $event.preventDefault();

	          // we want the '/path', not '#/path'
	          kbnUrl.change(url.substr(1));
	        };

	        $scope.$watch('filter', function (newFilter) {
	          // ensure that the currentFilter changes from undefined to ''
	          // which triggers
	          currentFilter = newFilter || '';
	          filterResults();
	        });

	        //manages the state of the keyboard selector
	        self.selector = {
	          enabled: false,
	          index: -1
	        };

	        //key handler for the filter text box
	        self.filterKeyDown = function ($event) {
	          switch (keymap[$event.keyCode]) {
	            case 'tab':
	              if (self.hitCount === 0) return;

	              self.selector.index = 0;
	              self.selector.enabled = true;

	              selectTopHit();

	              $event.preventDefault();
	              break;
	            case 'enter':
	              if (self.hitCount !== 1) return;

	              var hit = self.hits[0];
	              if (!hit) return;

	              self.onChoose(hit, $event);
	              $event.preventDefault();
	              break;
	          }
	        };

	        //key handler for the list items
	        self.hitKeyDown = function ($event, page, paginate) {
	          switch (keymap[$event.keyCode]) {
	            case 'tab':
	              if (!self.selector.enabled) break;

	              self.selector.index = -1;
	              self.selector.enabled = false;

	              //if the user types shift-tab return to the textbox
	              //if the user types tab, set the focus to the currently selected hit.
	              if ($event.shiftKey) {
	                $input.focus();
	              } else {
	                $list.find('li.active a').focus();
	              }

	              $event.preventDefault();
	              break;
	            case 'down':
	              if (!self.selector.enabled) break;

	              if (self.selector.index + 1 < page.length) {
	                self.selector.index += 1;
	              }
	              $event.preventDefault();
	              break;
	            case 'up':
	              if (!self.selector.enabled) break;

	              if (self.selector.index > 0) {
	                self.selector.index -= 1;
	              }
	              $event.preventDefault();
	              break;
	            case 'right':
	              if (!self.selector.enabled) break;

	              if (page.number < page.count) {
	                paginate.goToPage(page.number + 1);
	                self.selector.index = 0;
	                selectTopHit();
	              }
	              $event.preventDefault();
	              break;
	            case 'left':
	              if (!self.selector.enabled) break;

	              if (page.number > 1) {
	                paginate.goToPage(page.number - 1);
	                self.selector.index = 0;
	                selectTopHit();
	              }
	              $event.preventDefault();
	              break;
	            case 'escape':
	              if (!self.selector.enabled) break;

	              $input.focus();
	              $event.preventDefault();
	              break;
	            case 'enter':
	              if (!self.selector.enabled) break;

	              var hitIndex = (page.number - 1) * paginate.perPage + self.selector.index;
	              var hit = self.hits[hitIndex];
	              if (!hit) break;

	              self.onChoose(hit, $event);
	              $event.preventDefault();
	              break;
	            case 'shift':
	              break;
	            default:
	              $input.focus();
	              break;
	          }
	        };

	        self.hitBlur = function ($event) {
	          self.selector.index = -1;
	          self.selector.enabled = false;
	        };

	        self.manageObjects = function (type) {
	          $location.url('/settings/objects?_a=' + rison.encode({ tab: type }));
	        };

	        self.hitCountNoun = function () {
	          return (self.hitCount === 1 ? self.properties.noun : self.properties.nouns).toLowerCase();
	        };

	        function selectTopHit() {
	          setTimeout(function () {
	            //triggering a focus event kicks off a new angular digest cycle.
	            $list.find('a:first').focus();
	          }, 0);
	        }

	        function filterResults() {
	          if (!self.service) return;
	          if (!self.properties) return;

	          // track the filter that we use for this search,
	          // but ensure that we don't search for the same
	          // thing twice. This is called from multiple places
	          // and needs to be smart about when it actually searches
	          var filter = currentFilter;
	          if (prevSearch === filter) return;

	          prevSearch = filter;
	          self.service.find(filter).then(function (hits) {
	            // ensure that we don't display old results
	            // as we can't really cancel requests
	            if (currentFilter === filter) {
	              self.hitCount = hits.total;
	              self.hits = _.sortBy(hits.hits, 'title');
	            }
	          });
	        }

	        function scrollIntoView($element, snapTop) {
	          var el = $element[0];

	          if (!el) return;

	          if ('scrollIntoViewIfNeeded' in el) {
	            el.scrollIntoViewIfNeeded(snapTop);
	          } else if ('scrollIntoView' in el) {
	            el.scrollIntoView(snapTop);
	          }
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return {
	    8: 'backspace',
	    9: 'tab',
	    13: 'enter',
	    16: 'shift',
	    17: 'ctrl',
	    18: 'alt',
	    19: 'pause',
	    20: 'capsLock',
	    27: 'escape',
	    32: 'space',
	    33: 'pageUp',
	    34: 'pageDown',
	    35: 'end',
	    36: 'home',
	    37: 'left',
	    38: 'up',
	    39: 'right',
	    40: 'down',
	    45: 'insert',
	    46: 'delete',
	    48: '0',
	    49: '1',
	    50: '2',
	    51: '3',
	    52: '4',
	    53: '5',
	    54: '6',
	    55: '7',
	    56: '8',
	    57: '9',
	    65: 'a',
	    66: 'b',
	    67: 'c',
	    68: 'd',
	    69: 'e',
	    70: 'f',
	    71: 'g',
	    72: 'h',
	    73: 'i',
	    74: 'j',
	    75: 'k',
	    76: 'l',
	    77: 'm',
	    78: 'n',
	    79: 'o',
	    80: 'p',
	    81: 'q',
	    82: 'r',
	    83: 's',
	    84: 't',
	    85: 'u',
	    86: 'v',
	    87: 'w',
	    88: 'x',
	    89: 'y',
	    90: 'z',
	    91: 'leftWindowKey',
	    92: 'rightWindowKey',
	    93: 'selectKey',
	    96: '0',
	    97: '1',
	    98: '2',
	    99: '3',
	    100: '4',
	    101: '5',
	    102: '6',
	    103: '7',
	    104: '8',
	    105: '9',
	    106: 'multiply',
	    107: 'add',
	    109: 'subtract',
	    110: 'period',
	    111: 'divide',
	    112: 'f1',
	    113: 'f2',
	    114: 'f3',
	    115: 'f4',
	    116: 'f5',
	    117: 'f6',
	    118: 'f7',
	    119: 'f8',
	    120: 'f9',
	    121: 'f10',
	    122: 'f11',
	    123: 'f12',
	    144: 'numLock',
	    145: 'scrollLock',
	    186: 'semiColon',
	    187: 'equalSign',
	    188: 'comma',
	    189: 'dash',
	    190: 'period',
	    191: 'forwardSlash',
	    192: 'graveAccent',
	    219: 'openBracket',
	    220: 'backSlash',
	    221: 'closeBraket',
	    222: 'singleQuote',
	    224: 'meta'
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 810 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(336);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return __webpack_require__(336)({
	    name: 'savedObjects',
	    index: ['loaderProperties.name'],
	    order: ['loaderProperties.name']
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 811 */
/***/ function(module, exports) {

	module.exports = "<form role=\"form\">\r\n  <div class=\"form-group finder-form\">\r\n    <div class=\"finder-form-options\">\r\n      <a class=\"small\" ng-click=\"finder.manageObjects(finder.properties.name)\">manage {{finder.properties.nouns}}</a>\r\n    </div>\r\n    <div class=\"clearfix visible-xs-block\"></div>\r\n    <input\r\n      input-focus\r\n      ng-model=\"filter\"\r\n      ng-attr-placeholder=\"{{finder.properties.noun}} Filter\"\r\n      ng-keydown=\"finder.filterKeyDown($event)\"\r\n      class=\"form-control\"\r\n      name=\"filter\"\r\n      type=\"text\"\r\n      autocomplete=\"off\" />\r\n\r\n    <span class=\"finder-hit-count\"><strong>{{finder.hitCount}}</strong> {{finder.hitCountNoun()}}</span>\r\n  </div>\r\n</form>\r\n<paginate list=\"finder.hits\" per-page=\"{{perPage}}\">\r\n  <ul\r\n    class=\"list-group list-group-menu\"\r\n    ng-class=\"{'select-mode': finder.selector.enabled}\">\r\n\r\n    <li\r\n      class=\"list-group-item list-group-menu-item\"\r\n      ng-class=\"{'active': finder.selector.index === $index && finder.selector.enabled}\"\r\n      ng-repeat=\"hit in page\"\r\n      ng-keydown=\"finder.hitKeyDown($event, page, paginate)\"\r\n      ng-click=\"finder.onChoose(hit, $event)\">\r\n\r\n      <a\r\n        ng-href=\"{{finder.makeUrl(hit)}}\"\r\n        ng-blur=\"finder.hitBlur($event)\"\r\n        ng-click=\"finder.preventClick($event)\">\r\n\r\n        <i aria-hidden=\"true\" class=\"fa\" ng-if=\"hit.icon\" ng-class=\"hit.icon\"></i> {{hit.title}}\r\n        <p ng-if=\"hit.description\" ng-bind=\"hit.description\"></p>\r\n      </a>\r\n    </li>\r\n    <li\r\n      class=\"list-group-item list-group-no-results\"\r\n      ng-if=\"finder.hits.length === 0\">\r\n      <p ng-bind=\"'No matching ' + finder.properties.nouns + ' found.'\"></p>\r\n    </li>\r\n  </ul>\r\n</paginate>\r\n"

/***/ },
/* 812 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var html = '<div class="bounce1"></div> <div class="bounce2"></div> <div class="bounce3"></div>';
	  var module = __webpack_require__(215).get('kibana');

	  module.directive('spinner', function () {
	    return {
	      restrict: 'C',
	      template: html
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 813 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(208);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');
	  var $ = __webpack_require__(208);

	  module.directive('kbnTruncated', function ($compile) {
	    return {
	      restrict: 'E',
	      scope: {
	        orig: '@',
	        length: '@'
	      },
	      template: function template($element, attrs) {
	        var template = '<span>{{text}}</span>';
	        template += '<span ng-if="orig.length > length"> <a ng-click="toggle()">{{action}}</a></span>';
	        return template;
	      },
	      link: function link($scope, $element, attrs) {

	        var fullText = $scope.orig;
	        var truncated = fullText.substring(0, $scope.length);

	        if (fullText === truncated) {
	          $scope.text = fullText;
	          return;
	        }

	        truncated += '...';

	        $scope.expanded = false;
	        $scope.text = truncated;
	        $scope.action = 'more';

	        $scope.toggle = function () {
	          $scope.expanded = !$scope.expanded;
	          $scope.text = $scope.expanded ? fullText : truncated;
	          $scope.action = $scope.expanded ? 'less' : 'more';
	        };
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(815);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var CidrMask = __webpack_require__(815);

	  __webpack_require__(215).get('kibana').directive('validateCidrMask', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '='
	      },
	      link: function link($scope, elem, attr, ngModel) {
	        ngModel.$parsers.unshift(validateCidrMask);
	        ngModel.$formatters.unshift(validateCidrMask);

	        function validateCidrMask(mask) {
	          if (mask == null || mask === '') {
	            ngModel.$setValidity('cidrMaskInput', true);
	            return null;
	          }

	          try {
	            mask = new CidrMask(mask);
	            ngModel.$setValidity('cidrMaskInput', true);
	            return mask.toString();
	          } catch (e) {
	            ngModel.$setValidity('cidrMaskInput', false);
	          }
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(816);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var Ipv4Address = __webpack_require__(816);
	  var NUM_BITS = 32;

	  function throwError(mask) {
	    throw Error('Invalid CIDR mask: ' + mask);
	  }

	  function CidrMask(mask) {
	    var splits = mask.split('\/');
	    if (splits.length !== 2) throwError(mask);
	    this.initialAddress = new Ipv4Address(splits[0]);
	    this.prefixLength = Number(splits[1]);
	    if (this.prefixLength < 1 || this.prefixLength > NUM_BITS) throwError(mask);
	  }

	  CidrMask.prototype.getRange = function () {
	    var variableBits = NUM_BITS - this.prefixLength;
	    var fromAddress = this.initialAddress.valueOf() >> variableBits << variableBits >>> 0; // >>> 0 coerces to unsigned
	    var numAddresses = Math.pow(2, variableBits);
	    return {
	      from: new Ipv4Address(fromAddress).toString(),
	      to: new Ipv4Address(fromAddress + numAddresses - 1).toString()
	    };
	  };

	  CidrMask.prototype.toString = function () {
	    return this.initialAddress.toString() + '/' + this.prefixLength;
	  };

	  return CidrMask;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 816 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	  var NUM_BYTES = 4;
	  var BYTE_SIZE = 256;

	  function throwError(ipAddress) {
	    throw Error('Invalid IPv4 address: ' + ipAddress);
	  }

	  function isIntegerInRange(integer, min, max) {
	    return !isNaN(integer) && integer >= min && integer < max && integer % 1 === 0;
	  }

	  function Ipv4Address(ipAddress) {
	    this.value = ipAddress;

	    if (typeof ipAddress === 'string') {
	      this.value = 0;

	      var bytes = ipAddress.split('.');
	      if (bytes.length !== NUM_BYTES) throwError(ipAddress);

	      for (var i = 0; i < bytes.length; i++) {
	        var byte = Number(bytes[i]);
	        if (!isIntegerInRange(byte, 0, BYTE_SIZE)) throwError(ipAddress);
	        this.value += Math.pow(BYTE_SIZE, NUM_BYTES - 1 - i) * byte;
	      }
	    }

	    if (!isIntegerInRange(this.value, 0, Math.pow(BYTE_SIZE, NUM_BYTES))) throwError(ipAddress);
	  }

	  Ipv4Address.prototype.toString = function () {
	    var value = this.value;
	    var bytes = [];
	    for (var i = 0; i < NUM_BYTES; i++) {
	      bytes.unshift(value % 256);
	      value = Math.floor(value / 256);
	    }
	    return bytes.join('.');
	  };

	  Ipv4Address.prototype.valueOf = function () {
	    return this.value;
	  };

	  return Ipv4Address;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(245);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var dateMath = __webpack_require__(245);

	  __webpack_require__(215).get('kibana').directive('validateDateMath', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '='
	      },
	      link: function link($scope, elem, attr, ngModel) {
	        ngModel.$parsers.unshift(validateDateMath);
	        ngModel.$formatters.unshift(validateDateMath);

	        function validateDateMath(input) {
	          if (input == null || input === '') {
	            ngModel.$setValidity('validDateMath', true);
	            return null;
	          }

	          var moment = dateMath.parse(input);
	          ngModel.$setValidity('validDateMath', moment != null && moment.isValid());
	          return input;
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	// See https://github.com/elastic/elasticsearch/issues/6736
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').directive('validateIndexName', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '='
	      },
	      link: function link($scope, elem, attr, ngModel) {
	        var illegalCharacters = ['\\', '/', '?', '"', '<', '>', '|', ' ', ','];
	        var isValid = function isValid(input) {
	          if (input == null || input === '' || input === '.' || input === '..') return false;

	          var match = _.find(illegalCharacters, function (character) {
	            return input.indexOf(character) >= 0;
	          });
	          return !match;
	        };

	        // From User
	        ngModel.$parsers.unshift(function (value) {
	          var valid = isValid(value);
	          ngModel.$setValidity('indexNameInput', valid);
	          return valid ? value : undefined;
	        });

	        // To user
	        ngModel.$formatters.unshift(function (value) {
	          ngModel.$setValidity('indexNameInput', isValid(value));
	          return value;
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(816);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var Ipv4Address = __webpack_require__(816);

	  __webpack_require__(215).get('kibana').directive('validateIp', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '='
	      },
	      link: function link($scope, elem, attr, ngModel) {
	        function validateIp(ipAddress) {
	          if (ipAddress == null || ipAddress === '') {
	            ngModel.$setValidity('ipInput', true);
	            return null;
	          }

	          try {
	            ipAddress = new Ipv4Address(ipAddress);
	            ngModel.$setValidity('ipInput', true);
	            return ipAddress.toString();
	          } catch (e) {
	            ngModel.$setValidity('ipInput', false);
	          }
	        }

	        // From User
	        ngModel.$parsers.unshift(validateIp);

	        // To user
	        ngModel.$formatters.unshift(validateIp);
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(208);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var $ = __webpack_require__(208);

	  var module = __webpack_require__(215).get('kibana');

	  module.directive('validateJson', function ($compile) {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '=',
	        'queryInput': '=?'
	      },
	      link: function link($scope, $elem, attr, ngModel) {
	        $scope.$watch('ngModel', validator);

	        function validator(newValue, oldValue) {
	          if (!newValue || newValue.length === 0) {
	            setValid();
	            return;
	          }

	          // We actually need a proper object in all JSON inputs
	          newValue = (newValue || '').trim();
	          if (newValue[0] === '{' || '[') {
	            try {
	              JSON.parse(newValue);
	              setValid();
	            } catch (e) {
	              setInvalid();
	            }
	          } else {
	            setInvalid();
	          }
	        }

	        function setValid() {
	          ngModel.$setValidity('jsonInput', true);
	        }

	        function setInvalid() {
	          ngModel.$setValidity('jsonInput', false);
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 821 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').filter('commaList', function () {
	    /**
	     * Angular filter that accepts either an array or a comma-seperated string
	     * and outputs either an array, or a comma-seperated string for presentation.
	     *
	     * @param {String|Array} input - The comma-seperated list or array
	     * @param {Boolean} inclusive - Should the list be joined with an "and"?
	     * @return {String}
	     */
	    return function (input, inclusive) {
	      var list = _.commaSeperatedList(input);
	      if (list.length < 2) {
	        return list.join('');
	      }

	      var conj = inclusive ? ' and ' : ' or ';
	      return list.slice(0, -1).join(', ') + conj + _.last(list);
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 822 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(823);
	__webpack_require__(215);

	// Gets all fields of a given type.
	// You may also pass "*" to get all types
	// Or an array of types to get all fields of that type
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var propFilter = __webpack_require__(823);

	  __webpack_require__(215).get('kibana').filter('fieldType', function () {
	    return propFilter('type');
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 823 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  /**
	   * Filters out a list by a given filter. This is currently used to impelment:
	   *   - fieldType filters a list of fields by their type property
	   *   - aggFilter filters a list of aggs by their name property
	   *
	   * @returns {function} - the filter function which can be registered with angular
	   */
	  function propFilter(prop) {
	    /**
	     * List filtering function which accepts an array or list of values that a property
	     * must contain
	     *
	     * @param  {array} list - array of items to filter
	     * @param  {array|string} filters - the values to match against the list. Can be
	     *                                an array, a single value as a string, or a comma
	     *                                -seperated list of items
	     * @return {array} - the filtered list
	     */
	    return function (list, filters) {
	      if (!filters) return filters;
	      if (!_.isArray(filters)) filters = filters.split(',');
	      if (_.contains(filters, '*')) return list;

	      var options = filters.reduce(function (options, filter) {
	        var type = 'include';
	        var value = filter;

	        if (filter.charAt(0) === '!') {
	          type = 'exclude';
	          value = filter.substr(1);
	        }

	        if (!options[type]) options[type] = [];
	        options[type].push(value);
	        return options;
	      }, {});

	      return list.filter(function (item) {
	        var value = item[prop];

	        var excluded = options.exclude && _.contains(options.exclude, value);
	        if (excluded) return false;

	        var included = !options.include || _.contains(options.include, value);
	        if (included) return true;

	        return false;
	      });
	    };
	  }

	  return propFilter;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 824 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana').filter('label', function () {
	    return function (str) {
	      var words = str.split(' ');
	      return words.map(capFirst).join(' ');
	    };
	  });

	  function capFirst(str) {
	    var i = str[0];
	    var r = new RegExp(i, 'i');
	    return str.replace(r, i.toUpperCase());
	  }
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 825 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	// Gets all fields of a given type.
	// You may also pass "*" to get all types
	// Or an array of types to get all fields of that type
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').filter('matchAny', function () {
	    return function (items, rules) {
	      if (!_.isArray(rules)) {
	        rules = [rules];
	      }

	      return _.filter(items, function (item) {
	        for (var i = 0; i < rules.length; i++) {
	          if (_.some([item], rules[i])) {
	            return true;
	          }
	        }

	        return false;
	      });
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 826 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(243);
	__webpack_require__(194);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var moment = __webpack_require__(243);
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').filter('moment', function (config) {
	    return function (datetime) {
	      var format = config.get('dateFormat');
	      if (moment.isMoment(datetime)) return datetime.format(format);
	      if (_.isDate(datetime)) return moment(datetime).format(format);
	      return datetime;
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(263);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var rison = __webpack_require__(263);
	  var module = __webpack_require__(215).get('kibana');

	  module.filter('rison', function () {
	    return function (str) {
	      return rison.encode(str);
	    };
	  });

	  module.filter('risonDecode', function () {
	    return function (str) {
	      return rison.decode(str);
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 828 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana').filter('startFrom', function () {
	    return function (input, start) {
	      if (!input) return [];
	      start = +start; //parse to int
	      return input.slice(start);
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 829 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(212);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var angular = __webpack_require__(212);
	  var module = __webpack_require__(215).get('kibana');

	  // Simple filter to allow using ng-bind-html without explicitly calling $sce.trustAsHtml in a controller
	  // (See http://goo.gl/mpj9o2)
	  module.filter('trustAsHtml', function ($sce) {
	    return $sce.trustAsHtml;
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 830 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	// Filters out all duplicate items in an array
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').filter('unique', function () {
	    return function (arr) {
	      var list = _.unique(arr);
	      return list;
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 831 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana').filter('uriescape', function () {
	    return function (str) {
	      return encodeURIComponent(str);
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 832 */,
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */,
/* 837 */,
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */,
/* 845 */,
/* 846 */,
/* 847 */,
/* 848 */,
/* 849 */,
/* 850 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(314);
	__webpack_require__(215);
	__webpack_require__(851);
	__webpack_require__(852);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var ConfigTemplate = __webpack_require__(314);

	  __webpack_require__(215).get('kibana')
	  // TODO: all of this really belongs in the timepicker
	  .directive('chromeContext', function (timefilter, globalState) {

	    var listenForUpdates = _.once(function ($scope) {
	      $scope.$listen(timefilter, 'update', function (newVal, oldVal) {
	        globalState.time = _.clone(timefilter.time);
	        globalState.refreshInterval = _.clone(timefilter.refreshInterval);
	        globalState.save();
	      });
	    });

	    return {
	      link: function link($scope) {
	        listenForUpdates($scope);

	        // chrome is responsible for timepicker ui and state transfer...
	        $scope.timefilter = timefilter;
	        $scope.pickerTemplate = new ConfigTemplate({
	          filter: __webpack_require__(851),
	          interval: __webpack_require__(852)
	        });

	        $scope.toggleRefresh = function () {
	          timefilter.refreshInterval.pause = !timefilter.refreshInterval.pause;
	        };
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 851 */
/***/ function(module, exports) {

	module.exports = "<kbn-timepicker\r\n  from=\"timefilter.time.from\"\r\n  to=\"timefilter.time.to\"\r\n  mode=\"timefilter.time.mode\"\r\n  active-tab=\"'filter'\"\r\n  interval=\"timefilter.refreshInterval\">\r\n</kbn-timepicker>\r\n"

/***/ },
/* 852 */
/***/ function(module, exports) {

	module.exports = "<kbn-timepicker\r\n  from=\"timefilter.time.from\"\r\n  to=\"timefilter.time.to\"\r\n  mode=\"timefilter.time.mode\"\r\n  active-tab=\"'interval'\"\r\n  interval=\"timefilter.refreshInterval\">\r\n</kbn-timepicker>\r\n"

/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);

	  __webpack_require__(215).get('kibana').config(function ($provide) {

	    function strictEquality(a, b) {
	      // are the values equal? or, are they both NaN?
	      return a === b || a !== a && b !== b;
	    }

	    function errorNotAssignable(source, target) {
	      throw Error('Unable to accept change to bound $scope property "' + source + '"' + ' because source expression "' + target + '" is not assignable!');
	    }

	    $provide.decorator('$rootScope', function ($delegate, $parse) {
	      /**
	       * Two-way bind a value from scope to another property on scope. This
	       * allow values on scope that work like they do in an isolate scope, but
	       * without requiring one.
	       *
	       * @param  {expression} to - the location on scope to bind to
	       * @param  {expression} from - the location on scope to bind from
	       * @param  {Scope} $sourceScope - the scope to read "from" expression from
	       * @return {undefined}
	       */
	      $delegate.constructor.prototype.$bind = function (to, from, $sourceScope) {
	        var $source = $sourceScope || this.$parent;
	        var $target = this;

	        // parse expressions
	        var $to = $parse(to);
	        if (!$to.assign) errorNotAssignable(to, from);
	        var $from = $parse(from);

	        // bind scopes to expressions
	        var getTarget = function getTarget() {
	          return $to($target);
	        };
	        var setTarget = function setTarget(v) {
	          return $to.assign($target, v);
	        };
	        var getSource = function getSource() {
	          return $from($source);
	        };
	        var setSource = function setSource(v) {
	          return $from.assignOrFail($source, v);
	        };

	        // to support writing from the child to the parent we need to know
	        // which source has changed. Track the source value and anytime it
	        // changes (even if the target value changed too) push from source
	        // to target. If the source hasn't changed then the change is from
	        // the target and push accordingly
	        var lastSourceVal = getSource();

	        $from.assignOrFail = $from.assign || function () {
	          // revert the change and throw an error, child writes aren't supported
	          $to($target, lastSourceVal = $from($source));
	          errorNotAssignable(from, to);
	        };

	        // if we are syncing down a literal, then we use loose equality check
	        var strict = !$from.literal;
	        var compare = strict ? strictEquality : angular.equals;

	        // push the initial value down, start off in sync
	        setTarget(lastSourceVal);

	        $target.$watch(function () {
	          var sourceVal = getSource();
	          var targetVal = getTarget();

	          var outOfSync = !compare(sourceVal, targetVal);
	          var sourceChanged = outOfSync && !compare(sourceVal, lastSourceVal);

	          if (sourceChanged) setTarget(sourceVal);else if (outOfSync) setSource(targetVal);

	          return lastSourceVal = sourceVal;
	        }, null, !strict);
	      };

	      return $delegate;
	    });
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 854 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function BoundToConfigObjProvider($rootScope, config) {
	    var _ = __webpack_require__(194);

	    /**
	     * Create an object with properties that may be bound to config values.
	     * The input object is basically cloned unless one of it's own properties
	     * resolved to a string value that starts with an equal sign. When that is
	     * found, that property is forever bound to the corresponding config key.
	     *
	     * example:
	     *
	     * // name is cloned, height is bound to the defaultHeight config key
	     * { name: 'john', height: '=defaultHeight' };
	     *
	     * @param  {Object} input
	     * @return {Object}
	     */
	    function BoundToConfigObj(input) {
	      var self = this;

	      _.forOwn(input, function (val, prop) {
	        if (!_.isString(val) || val.charAt(0) !== '=') {
	          self[prop] = val;
	          return;
	        }

	        var configKey = val.substr(1);

	        update();
	        $rootScope.$on('init:config', update);
	        $rootScope.$on('change:config.' + configKey, update);
	        function update() {
	          self[prop] = config.get(configKey);
	        }
	      });
	    }

	    return BoundToConfigObj;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(212);
	__webpack_require__(194);
	__webpack_require__(856);
	__webpack_require__(860);
	__webpack_require__(861);
	__webpack_require__(862);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana/config', ['kibana/notify']);

	  __webpack_require__(217).addSetupWork(function (config) {
	    return config.init();
	  });

	  // service for delivering config variables to everywhere else
	  module.service('config', function (Private, Notifier, kbnVersion, kbnIndex, $rootScope, buildNum) {
	    var config = this;

	    var angular = __webpack_require__(212);
	    var _ = __webpack_require__(194);
	    var defaults = Private(__webpack_require__(856));
	    var DelayedUpdater = Private(__webpack_require__(860));
	    var vals = Private(__webpack_require__(861));

	    var notify = new Notifier({
	      location: 'Config'
	    });

	    // active or previous instance of DelayedUpdater. This will log and then process an
	    // update once it is requested by calling #set() or #clear().
	    var updater = undefined;

	    var DocSource = Private(__webpack_require__(862));
	    var doc = new DocSource().index(kbnIndex).type('config').id(kbnVersion);

	    /******
	     * PUBLIC API
	     ******/

	    /**
	     * Executes once and returns a promise that is resolved once the
	     * config has loaded for the first time.
	     *
	     * @return {Promise} - Resolved when the config loads initially
	     */
	    config.init = _.once(function () {
	      var complete = notify.lifecycle('config init');

	      return (function getDoc() {

	        // used to apply an entire es response to the vals, silentAndLocal will prevent
	        // event/notifications/writes from occuring.
	        var applyMassUpdate = function applyMassUpdate(resp, silentAndLocal) {
	          _.union(_.keys(resp._source), _.keys(vals)).forEach(function (key) {
	            change(key, resp._source[key], silentAndLocal);
	          });
	        };

	        return doc.fetch().then(function initDoc(resp) {
	          if (!resp.found) {
	            return doc.doIndex({
	              buildNum: buildNum
	            }).then(getDoc);
	          } else {
	            // apply update, and keep it quiet the first time
	            applyMassUpdate(resp, true);

	            // don't keep it quiet other times
	            doc.onUpdate(function (resp) {
	              applyMassUpdate(resp, false);
	            });
	          }
	        });
	      })().then(function () {
	        $rootScope.$broadcast('init:config');
	      }).then(complete, complete.failure);
	    });

	    config.get = function (key, defaultVal) {
	      var keyVal = undefined;

	      if (vals[key] == null) {
	        if (defaultVal == null) {
	          keyVal = defaults[key].value;
	        } else {
	          keyVal = _.cloneDeep(defaultVal);
	        }
	      } else {
	        keyVal = vals[key];
	      }

	      if (defaults[key] && defaults[key].type === 'json') {
	        return JSON.parse(keyVal);
	      }
	      return keyVal;
	    };

	    // sets a value in the config
	    config.set = function (key, val) {
	      if (_.isPlainObject(val)) {
	        return change(key, angular.toJson(val));
	      } else {
	        return change(key, val);
	      }
	    };

	    // clears a value from the config
	    config.clear = function (key) {
	      return change(key);
	    };
	    // alias for clear
	    config['delete'] = config.clear;

	    config.close = function () {
	      if (updater) updater.fire();
	    };

	    /**
	     * A little helper for binding config variables to $scopes
	     *
	     * @param  {Scope} $scope - an angular $scope object
	     * @param  {string} key - the config key to bind to
	     * @param  {string} [property] - optional property name where the value should
	     *                             be stored. Defaults to the config key
	     * @return {function} - an unbind function
	     */
	    config.$bind = function ($scope, key, property) {
	      if (!property) property = key;

	      var update = function update() {
	        $scope[property] = config.get(key);
	      };

	      update();
	      return _.partial(_.invoke, [$scope.$on('change:config.' + key, update), $scope.$on('init:config', update)], 'call');
	    };

	    /*****
	     * PRIVATE API
	     *****/
	    function change(key, val, silentAndLocal) {
	      // if the previous updater has already fired, then start over with null
	      if (updater && updater.fired) updater = null;
	      // create a new updater
	      if (!updater) updater = new DelayedUpdater(doc);
	      // return a promise that will be resolved once the action is eventually done
	      return updater.update(key, val, silentAndLocal);
	    }

	    config._vals = function () {
	      return _.cloneDeep(vals);
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 856 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(857);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var moment = __webpack_require__(857);
	  var _ = __webpack_require__(194);

	  return function configDefaultsProvider() {
	    // wraped in provider so that a new instance is given to each app/test

	    return {
	      'buildNum': {
	        readonly: true
	      },
	      'query:queryString:options': {
	        value: '{ "analyze_wildcard": true }',
	        description: 'Options for the lucene query string parser',
	        type: 'json'
	      },
	      'sort:options': {
	        value: '{ "unmapped_type": "boolean" }',
	        description: 'Options the Elasticsearch sort parameter',
	        type: 'json'
	      },
	      'dateFormat': {
	        value: 'MMMM Do YYYY, HH:mm:ss.SSS',
	        description: 'When displaying a pretty formatted date, use this format'
	      },
	      'dateFormat:tz': {
	        value: 'Browser',
	        description: 'Which timezone should be used.  "Browser" will use the timezone detected by your browser.',
	        type: 'select',
	        options: _.union(['Browser'], moment.tz.names())
	      },
	      'dateFormat:scaled': {
	        type: 'json',
	        value: '[\n' + '  ["", "HH:mm:ss.SSS"],\n' + '  ["PT1S", "HH:mm:ss"],\n' + '  ["PT1M", "HH:mm"],\n' + '  ["PT1H",\n' + '      "YYYY-MM-DD HH:mm"],\n' + '  ["P1DT", "YYYY-MM-DD"],\n' + '  ["P1YT", "YYYY"]\n' + ']',
	        description: 'Values that define the format used in situations where timebased' + ' data is rendered in order, and formatted timestamps should adapt to the' + ' interval between measurements. Keys are' + ' <a href="http://en.wikipedia.org/wiki/ISO_8601#Time_intervals" target="_blank">' + 'ISO8601 intervals.</a>'
	      },
	      'defaultIndex': {
	        value: null,
	        description: 'The index to access if no index is set'
	      },
	      'metaFields': {
	        value: ['_source', '_id', '_type', '_index', '_score'],
	        description: 'Fields that exist outside of _source to merge into our document when displaying it'
	      },
	      'discover:sampleSize': {
	        value: 500,
	        description: 'The number of rows to show in the table'
	      },
	      'doc_table:highlight': {
	        value: true,
	        description: 'Highlight results in Discover and Saved Searches Dashboard.' + 'Highlighing makes request slow when working on big documents.'
	      },
	      'courier:maxSegmentCount': {
	        value: 30,
	        description: 'Requests in discover are split into segments to prevent massive requests from being sent to ' + 'elasticsearch. This setting attempts to prevent the list of segments from getting too long, which might ' + 'cause requests to take much longer to process'
	      },
	      'fields:popularLimit': {
	        value: 10,
	        description: 'The top N most popular fields to show'
	      },
	      'histogram:barTarget': {
	        value: 50,
	        description: 'Attempt to generate around this many bar when using "auto" interval in date histograms'
	      },
	      'histogram:maxBars': {
	        value: 100,
	        description: 'Never show more than this many bar in date histograms, scale values if needed'
	      },
	      'visualization:tileMap:maxPrecision': {
	        value: 7,
	        description: 'The maximum geoHash precision displayed on tile maps: 7 is high, 10 is very high, ' + '12 is the max. ' + '<a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/' + 'search-aggregations-bucket-geohashgrid-aggregation.html#_cell_dimensions_at_the_equator" target="_blank">' + 'Explanation of cell dimensions</a>'
	      },
	      'visualization:tileMap:WMSdefaults': {
	        value: JSON.stringify({
	          enabled: false,
	          url: 'https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WMSServer',
	          options: {
	            version: '1.3.0',
	            layers: '0',
	            format: 'image/png',
	            transparent: true,
	            attribution: 'Maps provided by USGS',
	            styles: ''
	          }
	        }, null, '  '),
	        type: 'json',
	        description: 'Default properties for the WMS map server support in the tile map'
	      },
	      'visualization:colorMapping': {
	        type: 'json',
	        value: JSON.stringify({
	          'Count': '#57c17b'
	        }),
	        description: 'Maps values to specified colors within visualizations'
	      },
	      'visualization:loadingDelay': {
	        value: '2s',
	        description: 'Time to wait before dimming visualizations during query'
	      },
	      'csv:separator': {
	        value: ',',
	        description: 'Separate exported values with this string'
	      },
	      'csv:quoteValues': {
	        value: true,
	        description: 'Should values be quoted in csv exports?'
	      },
	      'history:limit': {
	        value: 10,
	        description: 'In fields that have history (e.g. query inputs), show this many recent values'
	      },
	      'shortDots:enable': {
	        value: false,
	        description: 'Shorten long fields, for example, instead of foo.bar.baz, show f.b.baz'
	      },
	      'truncate:maxHeight': {
	        value: 115,
	        description: 'The maximum height that a cell in a table should occupy. Set to 0 to disable truncation'
	      },
	      'indexPattern:fieldMapping:lookBack': {
	        value: 5,
	        description: 'For index patterns containing timestamps in their names, look for this many recent matching ' + 'patterns from which to query the field mapping'
	      },
	      'format:defaultTypeMap': {
	        type: 'json',
	        value: ['{', '  "ip": { "id": "ip", "params": {} },', '  "date": { "id": "date", "params": {} },', '  "number": { "id": "number", "params": {} },', '  "_source": { "id": "_source", "params": {} },', '  "_default_": { "id": "string", "params": {} }', '}'].join('\n'),
	        description: 'Map of the format name to use by default for each field type. ' + '"_default_" is used if the field type is not mentioned explicitly'
	      },
	      'format:number:defaultPattern': {
	        type: 'string',
	        value: '0,0.[000]',
	        description: 'Default numeral format for the "number" format'
	      },
	      'format:bytes:defaultPattern': {
	        type: 'string',
	        value: '0,0.[000]b',
	        description: 'Default numeral format for the "bytes" format'
	      },
	      'format:percent:defaultPattern': {
	        type: 'string',
	        value: '0,0.[000]%',
	        description: 'Default numeral format for the "percent" format'
	      },
	      'format:currency:defaultPattern': {
	        type: 'string',
	        value: '($0,0.[00])',
	        description: 'Default numeral format for the "currency" format'
	      },
	      'savedObjects:perPage': {
	        type: 'number',
	        value: 5,
	        description: 'Number of objects to show per page in the load dialog'
	      },
	      'timepicker:timeDefaults': {
	        type: 'json',
	        value: ['{', '  "from": "now-15m",', '  "to": "now",', '  "mode": "quick"', '}'].join('\n'),
	        description: 'The timefilter selection to use when Kibana is started without one'
	      },
	      'timepicker:refreshIntervalDefaults': {
	        type: 'json',
	        value: ['{', '  "display": "Off",', '  "pause": false,', '  "value": 0', '}'].join('\n'),
	        description: 'The timefilter\'s default refresh interval'
	      },
	      'dashboard:defaultDarkTheme': {
	        value: false,
	        description: 'New dashboards use dark theme by default'
	      }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 857 */
/***/ function(module, exports, __webpack_require__) {

	var moment = module.exports = __webpack_require__(858);
	moment.tz.load(__webpack_require__(859));


/***/ },
/* 858 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//! moment-timezone.js
	//! version : 0.4.1
	//! author : Tim Wood
	//! license : MIT
	//! github.com/moment/moment-timezone

	(function (root, factory) {
		"use strict";

		/*global define*/
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(243)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));                 // AMD
		} else if (typeof exports === 'object') {
			module.exports = factory(require('moment')); // Node
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";

		// Do not load moment-timezone a second time.
		if (moment.tz !== undefined) {
			logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
			return moment;
		}

		var VERSION = "0.4.1",
			zones = {},
			links = {},
			names = {},

			momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];

		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}

		/************************************
			Unpacking
		************************************/

		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}

		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;

			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}

			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}

			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}

			return out * sign;
		}

		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}

		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}

			array[length - 1] = Infinity;
		}

		function mapIndices (source, indices) {
			var out = [], i;

			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}

			return out;
		}

		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');

			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);

			intToUntil(untils, indices.length);

			return {
				name    : data[0],
				abbrs   : mapIndices(data[1].split(' '), indices),
				offsets : mapIndices(offsets, indices),
				untils  : untils
			};
		}

		/************************************
			Zone object
		************************************/

		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}

		Zone.prototype = {
			_set : function (unpacked) {
				this.name    = unpacked.name;
				this.abbrs   = unpacked.abbrs;
				this.untils  = unpacked.untils;
				this.offsets = unpacked.offsets;
			},

			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;

				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},

			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;

				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];

					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}

					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}

				return offsets[max];
			},

			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},

			offset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};

		/************************************
			Global Methods
		************************************/

		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}

		function addZone (packed) {
			var i, name, normalized;

			if (typeof packed === "string") {
				packed = [packed];
			}

			for (i = 0; i < packed.length; i++) {
				name = packed[i].split('|')[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
			}
		}

		function getZone (name, caller) {
			name = normalizeName(name);

			var zone = zones[name];
			var link;

			if (zone instanceof Zone) {
				return zone;
			}

			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}

			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}

			return null;
		}

		function getNames () {
			var i, out = [];

			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}

			return out.sort();
		}

		function addLink (aliases) {
			var i, alias, normal0, normal1;

			if (typeof aliases === "string") {
				aliases = [aliases];
			}

			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');

				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);

				links[normal0] = normal1;
				names[normal0] = alias[0];

				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}

		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			tz.dataVersion = data.version;
		}

		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
					logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}

		function needsOffset (m) {
			return !!(m._a && (m._tzm === undefined));
		}

		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}

		/************************************
			moment.tz namespace
		************************************/

		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);

			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}

			out.tz(name);

			return out;
		}

		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;

		/************************************
			Interface with Moment.js
		************************************/

		var fn = moment.fn;

		moment.tz = tz;

		moment.defaultZone = null;

		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;

			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.offset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					mom.utcOffset(-offset, keepTime);
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};

		fn.tz = function (name) {
			if (name) {
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};

		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}

		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}

		fn.zoneName = abbrWrap(fn.zoneName);
		fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
		fn.utc      = resetZoneWrap(fn.utc);

		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};

		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
			// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
			// moment 2.7.0
			momentProperties._z = null;
		}

		// INJECT DATA

		return moment;
	}));


/***/ },
/* 859 */
/***/ function(module, exports) {

	module.exports = {
		"version": "2015g",
		"zones": [
			"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q",
			"Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE",
			"Africa/Addis_Ababa|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ",
			"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0",
			"Africa/Bangui|LMT WAT|-d.A -10|01|-22y0d.A",
			"Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E",
			"Africa/Blantyre|LMT CAT|-2a.k -20|01|-2GJea.k",
			"Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0",
			"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0",
			"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0",
			"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0",
			"Africa/Juba|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0",
			"Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m",
			"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0",
			"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00",
			"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00",
			"Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0",
			"America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Anguilla|LMT AST|46.4 40|01|-2kNvR.U",
			"America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0",
			"America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0",
			"America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0",
			"America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
			"America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0",
			"America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0",
			"America/Aruba|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d",
			"America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0",
			"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0",
			"America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0",
			"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0",
			"America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
			"America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0",
			"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0",
			"America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0",
			"America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0",
			"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Cambridge_Bay|zzz MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
			"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0",
			"America/Caracas|CMT VET VET|4r.E 4u 40|0121|-2kV7w.k 28KM2.k 1IwOu",
			"America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E",
			"America/Cayman|KMT EST EDT|57.b 50 40|0121212121212121212121212121212121212121212121|-2l1uQ.N 4duNQ.N 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0",
			"America/Creston|MST PST|70 80|010|-29DR0 43B0",
			"America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
			"America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0",
			"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0",
			"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0",
			"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0",
			"America/Ensenada|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0",
			"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0",
			"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0",
			"America/Guayaquil|QMT ECT|5e 50|01|-1yVSK",
			"America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf",
			"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0",
			"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0",
			"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Inuvik|zzz PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Iqaluit|zzz EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
			"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0",
			"America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0",
			"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp0 1Vb0 3dB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0",
			"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0",
			"America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0",
			"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0",
			"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Metlakatla|PST PWT PPT PDT|80 70 70 70|0120303030303030303030303030303030|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
			"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0",
			"America/Montreal|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
			"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Panama|CMT EST|5j.A 50|01|-2uduE.o",
			"America/Pangnirtung|zzz AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0",
			"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0",
			"America/Port-au-Prince|PPMT EST EDT|4N 50 40|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Porto_Acre|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0",
			"America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
			"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0",
			"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Rankin_Inlet|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
			"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0",
			"America/Resolute|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Santa_Isabel|LMT MST PST PDT PWT PPT|7D.s 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
			"America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0",
			"America/Santiago|SMT CLT CLT CLST CLST CLT|4G.K 50 40 40 30 30|01020313131313121242124242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424245|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
			"America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00",
			"America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
			"America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0",
			"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0",
			"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Yellowknife|zzz MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Antarctica/Casey|zzz AWST CAST|0 -80 -b0|012121|-2q00 1DjS0 T90 40P0 KL0",
			"Antarctica/Davis|zzz DAVT DAVT|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0",
			"Antarctica/DumontDUrville|zzz PMT DDUT|0 -a0 -a0|0102|-U0o0 cfq0 bFm0",
			"Antarctica/Macquarie|AEST AEDT zzz MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0",
			"Antarctica/Mawson|zzz MAWT MAWT|0 -60 -50|012|-CEo0 2fyk0",
			"Antarctica/McMurdo|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
			"Antarctica/Palmer|zzz ARST ART ART ARST CLT CLST CLT|0 30 40 30 20 40 30 30|012121212123435656565656565656565656565656565656565656565656565656565656565656567|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
			"Antarctica/Rothera|zzz ROTT|0 30|01|gOo0",
			"Antarctica/Syowa|zzz SYOT|0 -30|01|-vs00",
			"Antarctica/Troll|zzz UTC CEST|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Antarctica/Vostok|zzz VOST|0 -60|01|-tjA0",
			"Arctic/Longyearbyen|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Asia/Aden|LMT AST|-36.Q -30|01|-TvD6.Q",
			"Asia/Almaty|LMT ALMT ALMT ALMST|-57.M -50 -60 -70|0123232323232323232323232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3Cl0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
			"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
			"Asia/Anadyr|LMT ANAT ANAT ANAST ANAST ANAST ANAT|-bN.U -c0 -d0 -e0 -d0 -c0 -b0|01232414141414141414141561414141414141414141414141414141414141561|-1PcbN.U eUnN.U 23CL0 1db0 1cN0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
			"Asia/Aqtau|LMT FORT FORT SHET SHET SHEST AQTT AQTST AQTST AQTT|-3l.4 -40 -50 -50 -60 -60 -50 -60 -50 -40|012345353535353535353536767676898989898989898989896|-1Pc3l.4 eUnl.4 1jcL0 JDc0 1cL0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cN0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
			"Asia/Aqtobe|LMT AKTT AKTT AKTST AKTT AQTT AQTST|-3M.E -40 -50 -60 -60 -50 -60|01234323232323232323232565656565656565656565656565|-1Pc3M.E eUnM.E 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
			"Asia/Ashgabat|LMT ASHT ASHT ASHST ASHST TMT TMT|-3R.w -40 -50 -60 -50 -40 -50|012323232323232323232324156|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 ba0 xC0",
			"Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0",
			"Asia/Bahrain|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8",
			"Asia/Baku|LMT BAKT BAKT BAKST BAKST AZST AZT AZT AZST|-3j.o -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245657878787878787878787878787878787878787878787878787878787878787878787878787878787878787|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 10K0 c30 1cJ0 1cL0 8wu0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4",
			"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0",
			"Asia/Bishkek|LMT FRUT FRUT FRUST FRUST KGT KGST KGT|-4W.o -50 -60 -70 -60 -50 -60 -60|01232323232323232323232456565656565656565656565656567|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11c0 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 T8u",
			"Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E",
			"Asia/Calcutta|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0",
			"Asia/Chita|LMT YAKT YAKT YAKST YAKST YAKT IRKT|-7x.Q -80 -90 -a0 -90 -a0 -80|012323232323232323232324123232323232323232323232323232323232323256|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT CHOST|-7C -70 -80 -a0 -90 -80 -90|0123434343434343434343434343434343434343434343456565656565656565656565656565656565656565656565|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
			"Asia/Chongqing|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
			"Asia/Colombo|MMT IST IHST IST LKT LKT|-5j.w -5u -60 -6u -6u -60|01231451|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu",
			"Asia/Dacca|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00",
			"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0",
			"Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0",
			"Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c",
			"Asia/Dushanbe|LMT DUST DUST DUSST DUSST TJT|-4z.c -50 -60 -70 -60 -50|0123232323232323232323245|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 14N0",
			"Asia/Gaza|EET EET EEST IST IDT|-20 -30 -30 -20 -30|010101010102020202020202020202023434343434343434343434343430202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0",
			"Asia/Hebron|EET EET EEST IST IDT|-20 -30 -30 -20 -30|01010101010202020202020202020202343434343434343434343434343020202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0",
			"Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0",
			"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0",
			"Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
			"Asia/Irkutsk|IMT IRKT IRKT IRKST IRKST IRKT|-6V.5 -70 -80 -90 -80 -90|012323232323232323232324123232323232323232323232323232323232323252|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Istanbul|IMT EET EEST TRST TRT|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1df0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu",
			"Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu",
			"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0",
			"Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0",
			"Asia/Kamchatka|LMT PETT PETT PETST PETST|-ay.A -b0 -c0 -d0 -c0|01232323232323232323232412323232323232323232323232323232323232412|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
			"Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy01 1cL0 dK0X 11b0 1610 1jX0",
			"Asia/Kashgar|LMT XJT|-5O.k -60|01|-1GgtO.k",
			"Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g",
			"Asia/Khandyga|LMT YAKT YAKT YAKST YAKST VLAT VLAST VLAT YAKT|-92.d -80 -90 -a0 -90 -a0 -b0 -b0 -a0|01232323232323232323232412323232323232323232323232565656565656565782|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0",
			"Asia/Krasnoyarsk|LMT KRAT KRAT KRAST KRAST KRAT|-6b.q -60 -70 -80 -70 -80|012323232323232323232324123232323232323232323232323232323232323252|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u",
			"Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10",
			"Asia/Macao|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0",
			"Asia/Magadan|LMT MAGT MAGT MAGST MAGST MAGT|-a3.c -a0 -b0 -c0 -b0 -c0|012323232323232323232324123232323232323232323232323232323232323251|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0",
			"Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0",
			"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Asia/Novokuznetsk|LMT KRAT KRAT KRAST KRAST NOVST NOVT NOVT|-5M.M -60 -70 -80 -70 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232325672|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0 8Hz0",
			"Asia/Novosibirsk|LMT NOVT NOVT NOVST NOVST|-5v.E -60 -70 -80 -70|0123232323232323232323241232341414141414141414141414141414141414121|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Omsk|LMT OMST OMST OMSST OMSST OMST|-4R.u -50 -60 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232323252|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Oral|LMT URAT URAT URAST URAT URAST ORAT ORAST ORAT|-3p.o -40 -50 -60 -60 -50 -40 -50 -50|012343232323232323251516767676767676767676767676768|-1Pc3p.o eUnp.o 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
			"Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu",
			"Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|012341|-2um8n 97XR 12FXu jdA0 2Onc0",
			"Asia/Qyzylorda|LMT KIZT KIZT KIZST KIZT QYZT QYZT QYZST|-4l.Q -40 -50 -60 -60 -50 -60 -70|012343232323232323232325676767676767676767676767676|-1Pc4l.Q eUol.Q 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 dC0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
			"Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u",
			"Asia/Sakhalin|LMT JCST JST SAKT SAKST SAKST SAKT|-9u.M -90 -90 -b0 -c0 -b0 -a0|0123434343434343434343435634343434343565656565656565656565656565636|-2AGVu.M 1iaMu.M je00 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o10 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Samarkand|LMT SAMT SAMT SAMST TAST UZST UZT|-4r.R -40 -50 -60 -60 -60 -50|01234323232323232323232356|-1Pc4r.R eUor.R 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11x0 bf0",
			"Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0",
			"Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0",
			"Asia/Srednekolymsk|LMT MAGT MAGT MAGST MAGST MAGT SRET|-ae.Q -a0 -b0 -c0 -b0 -c0 -b0|012323232323232323232324123232323232323232323232323232323232323256|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0",
			"Asia/Tashkent|LMT TAST TAST TASST TASST UZST UZT|-4B.b -50 -60 -70 -60 -60 -50|01232323232323232323232456|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11y0 bf0",
			"Asia/Tbilisi|TBMT TBIT TBIT TBIST TBIST GEST GET GET GEST|-2X.b -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565787878787878787878567|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 3y0 19f0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cM0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0",
			"Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0",
			"Asia/Thimbu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A",
			"Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0",
			"Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
			"Asia/Ust-Nera|LMT YAKT YAKT MAGST MAGT MAGST MAGT MAGT VLAT VLAT|-9w.S -80 -90 -c0 -b0 -b0 -a0 -c0 -b0 -a0|0123434343434343434343456434343434343434343434343434343434343434789|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0",
			"Asia/Vladivostok|LMT VLAT VLAT VLAST VLAST VLAT|-8L.v -90 -a0 -b0 -a0 -b0|012323232323232323232324123232323232323232323232323232323232323252|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Yakutsk|LMT YAKT YAKT YAKST YAKST YAKT|-8C.W -80 -90 -a0 -90 -a0|012323232323232323232324123232323232323232323232323232323232323252|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Yekaterinburg|LMT PMT SVET SVET SVEST SVEST YEKT YEKST YEKT|-42.x -3J.5 -40 -50 -60 -50 -50 -60 -60|0123434343434343434343435267676767676767676767676767676767676767686|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Asia/Yerevan|LMT YERT YERT YERST YERST AMST AMT AMT AMST|-2W -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565657878787878787878787878787878787|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1am0 2r0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fb0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
			"Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0",
			"Atlantic/Faeroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Atlantic/Reykjavik|LMT IST ISST GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0",
			"Atlantic/South_Georgia|GST|20|0|",
			"Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10",
			"Australia/ACT|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0",
			"Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0",
			"Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
			"Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/LHI|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu",
			"Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0",
			"Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
			"Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
			"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Chile/EasterIsland|EMT EAST EASST EAST EASST EAST|7h.s 70 60 60 50 50|012121212121212121212121212123434343434343434343434343434343434343434343434343434343434343434345|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
			"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"EST|EST|50|0|",
			"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Eire|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Etc/GMT+0|GMT|0|0|",
			"Etc/GMT+1|GMT+1|10|0|",
			"Etc/GMT+10|GMT+10|a0|0|",
			"Etc/GMT+11|GMT+11|b0|0|",
			"Etc/GMT+12|GMT+12|c0|0|",
			"Etc/GMT+2|GMT+2|20|0|",
			"Etc/GMT+3|GMT+3|30|0|",
			"Etc/GMT+4|GMT+4|40|0|",
			"Etc/GMT+5|GMT+5|50|0|",
			"Etc/GMT+6|GMT+6|60|0|",
			"Etc/GMT+7|GMT+7|70|0|",
			"Etc/GMT+8|GMT+8|80|0|",
			"Etc/GMT+9|GMT+9|90|0|",
			"Etc/GMT-1|GMT-1|-10|0|",
			"Etc/GMT-10|GMT-10|-a0|0|",
			"Etc/GMT-11|GMT-11|-b0|0|",
			"Etc/GMT-12|GMT-12|-c0|0|",
			"Etc/GMT-13|GMT-13|-d0|0|",
			"Etc/GMT-14|GMT-14|-e0|0|",
			"Etc/GMT-2|GMT-2|-20|0|",
			"Etc/GMT-3|GMT-3|-30|0|",
			"Etc/GMT-4|GMT-4|-40|0|",
			"Etc/GMT-5|GMT-5|-50|0|",
			"Etc/GMT-6|GMT-6|-60|0|",
			"Etc/GMT-7|GMT-7|-70|0|",
			"Etc/GMT-8|GMT-8|-80|0|",
			"Etc/GMT-9|GMT-9|-90|0|",
			"Etc/UCT|UCT|0|0|",
			"Etc/UTC|UTC|0|0|",
			"Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Belfast|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Bratislava|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Busingen|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|0123232323232323232345454676767676767676767623232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1ty0 2bD0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET FET|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454545454676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 1cM0 1cM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1cp0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Minsk|MMT EET MSK CEST CET MSD EEST FET|-1O -20 -30 -20 -10 -40 -30 -30|012343432525252525252525252616161616161616161616161616161616161616172|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cK0 1cM0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hy0",
			"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Moscow|MMT MMT MST MDST MSD MSK MSM EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c20 imv.j 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 16K0 1iO0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1C10 Lz0 1zd0 On0 1C10 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Samara|LMT SAMT SAMT KUYT KUYST MSD MSK EEST KUYT SAMST SAMST|-3k.k -30 -40 -40 -50 -40 -30 -30 -30 -50 -40|012343434343434343435656782929292929292929292929292929292929292a12|-22WNk.k qHak.k bcn0 1Qqo0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cN0 8o0 14j0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
			"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0",
			"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646464647373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Volgograd|LMT TSAT STAT STAT VOLT VOLST VOLST VOLT MSD MSK MSK|-2V.E -30 -30 -40 -40 -50 -40 -30 -40 -30 -40|0123454545454545454546767489898989898989898989898989898989898989a9|-21IqV.E cLXV.E cEM0 1gqn0 Lco0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 2pz0 1cJ0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
			"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"HST|HST|a0|0|",
			"Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E",
			"Indian/Christmas|CXT|-70|0|",
			"Indian/Cocos|CCT|-6u|0|",
			"Indian/Kerguelen|zzz TFT|0 -50|01|-MG00",
			"Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M",
			"Indian/Maldives|MMT MVT|-4S -50|01|-olgS",
			"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0",
			"Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q",
			"Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0",
			"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"MST|MST|70|0|",
			"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"NZ-CHAT|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
			"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
			"Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0",
			"Pacific/Chuuk|CHUT|-a0|0|",
			"Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0",
			"Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0",
			"Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0",
			"Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0",
			"Pacific/Funafuti|TVT|-c0|0|",
			"Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A",
			"Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c",
			"Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M",
			"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0",
			"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0",
			"Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk",
			"Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0",
			"Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0",
			"Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG",
			"Pacific/Midway|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0",
			"Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu",
			"Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a",
			"Pacific/Norfolk|NMT NFT NFST NFT|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0",
			"Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0",
			"Pacific/Palau|PWT|-90|0|",
			"Pacific/Pitcairn|PNT PST|8u 80|01|18Vku",
			"Pacific/Pohnpei|PONT|-b0|0|",
			"Pacific/Port_Moresby|PGT|-a0|0|",
			"Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu",
			"Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I",
			"Pacific/Tarawa|GILT|-c0|0|",
			"Pacific/Tongatapu|TOT TOT TOST|-ck -d0 -e0|01212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0",
			"Pacific/Wake|WAKT|-c0|0|",
			"Pacific/Wallis|WFT|-c0|0|",
			"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
		],
		"links": [
			"Africa/Abidjan|Africa/Bamako",
			"Africa/Abidjan|Africa/Banjul",
			"Africa/Abidjan|Africa/Conakry",
			"Africa/Abidjan|Africa/Dakar",
			"Africa/Abidjan|Africa/Freetown",
			"Africa/Abidjan|Africa/Lome",
			"Africa/Abidjan|Africa/Nouakchott",
			"Africa/Abidjan|Africa/Ouagadougou",
			"Africa/Abidjan|Africa/Sao_Tome",
			"Africa/Abidjan|Africa/Timbuktu",
			"Africa/Abidjan|Atlantic/St_Helena",
			"Africa/Addis_Ababa|Africa/Asmara",
			"Africa/Addis_Ababa|Africa/Asmera",
			"Africa/Addis_Ababa|Africa/Dar_es_Salaam",
			"Africa/Addis_Ababa|Africa/Djibouti",
			"Africa/Addis_Ababa|Africa/Kampala",
			"Africa/Addis_Ababa|Africa/Mogadishu",
			"Africa/Addis_Ababa|Africa/Nairobi",
			"Africa/Addis_Ababa|Indian/Antananarivo",
			"Africa/Addis_Ababa|Indian/Comoro",
			"Africa/Addis_Ababa|Indian/Mayotte",
			"Africa/Bangui|Africa/Brazzaville",
			"Africa/Bangui|Africa/Douala",
			"Africa/Bangui|Africa/Kinshasa",
			"Africa/Bangui|Africa/Lagos",
			"Africa/Bangui|Africa/Libreville",
			"Africa/Bangui|Africa/Luanda",
			"Africa/Bangui|Africa/Malabo",
			"Africa/Bangui|Africa/Niamey",
			"Africa/Bangui|Africa/Porto-Novo",
			"Africa/Blantyre|Africa/Bujumbura",
			"Africa/Blantyre|Africa/Gaborone",
			"Africa/Blantyre|Africa/Harare",
			"Africa/Blantyre|Africa/Kigali",
			"Africa/Blantyre|Africa/Lubumbashi",
			"Africa/Blantyre|Africa/Lusaka",
			"Africa/Blantyre|Africa/Maputo",
			"Africa/Cairo|Egypt",
			"Africa/Johannesburg|Africa/Maseru",
			"Africa/Johannesburg|Africa/Mbabane",
			"Africa/Juba|Africa/Khartoum",
			"Africa/Tripoli|Libya",
			"America/Adak|America/Atka",
			"America/Adak|US/Aleutian",
			"America/Anchorage|US/Alaska",
			"America/Anguilla|America/Antigua",
			"America/Anguilla|America/Dominica",
			"America/Anguilla|America/Grenada",
			"America/Anguilla|America/Guadeloupe",
			"America/Anguilla|America/Marigot",
			"America/Anguilla|America/Montserrat",
			"America/Anguilla|America/Port_of_Spain",
			"America/Anguilla|America/St_Barthelemy",
			"America/Anguilla|America/St_Kitts",
			"America/Anguilla|America/St_Lucia",
			"America/Anguilla|America/St_Thomas",
			"America/Anguilla|America/St_Vincent",
			"America/Anguilla|America/Tortola",
			"America/Anguilla|America/Virgin",
			"America/Argentina/Buenos_Aires|America/Buenos_Aires",
			"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
			"America/Argentina/Catamarca|America/Catamarca",
			"America/Argentina/Cordoba|America/Cordoba",
			"America/Argentina/Cordoba|America/Rosario",
			"America/Argentina/Jujuy|America/Jujuy",
			"America/Argentina/Mendoza|America/Mendoza",
			"America/Aruba|America/Curacao",
			"America/Aruba|America/Kralendijk",
			"America/Aruba|America/Lower_Princes",
			"America/Atikokan|America/Coral_Harbour",
			"America/Chicago|US/Central",
			"America/Denver|America/Shiprock",
			"America/Denver|Navajo",
			"America/Denver|US/Mountain",
			"America/Detroit|US/Michigan",
			"America/Edmonton|Canada/Mountain",
			"America/Ensenada|America/Tijuana",
			"America/Ensenada|Mexico/BajaNorte",
			"America/Fort_Wayne|America/Indiana/Indianapolis",
			"America/Fort_Wayne|America/Indianapolis",
			"America/Fort_Wayne|US/East-Indiana",
			"America/Halifax|Canada/Atlantic",
			"America/Havana|Cuba",
			"America/Indiana/Knox|America/Knox_IN",
			"America/Indiana/Knox|US/Indiana-Starke",
			"America/Jamaica|Jamaica",
			"America/Kentucky/Louisville|America/Louisville",
			"America/Los_Angeles|US/Pacific",
			"America/Los_Angeles|US/Pacific-New",
			"America/Manaus|Brazil/West",
			"America/Mazatlan|Mexico/BajaSur",
			"America/Mexico_City|Mexico/General",
			"America/Montreal|America/Toronto",
			"America/Montreal|Canada/Eastern",
			"America/New_York|US/Eastern",
			"America/Noronha|Brazil/DeNoronha",
			"America/Phoenix|US/Arizona",
			"America/Porto_Acre|America/Rio_Branco",
			"America/Porto_Acre|Brazil/Acre",
			"America/Regina|Canada/East-Saskatchewan",
			"America/Regina|Canada/Saskatchewan",
			"America/Santiago|Chile/Continental",
			"America/Sao_Paulo|Brazil/East",
			"America/St_Johns|Canada/Newfoundland",
			"America/Vancouver|Canada/Pacific",
			"America/Whitehorse|Canada/Yukon",
			"America/Winnipeg|Canada/Central",
			"Antarctica/McMurdo|Antarctica/South_Pole",
			"Antarctica/McMurdo|NZ",
			"Antarctica/McMurdo|Pacific/Auckland",
			"Arctic/Longyearbyen|Atlantic/Jan_Mayen",
			"Arctic/Longyearbyen|Europe/Oslo",
			"Asia/Aden|Asia/Kuwait",
			"Asia/Aden|Asia/Riyadh",
			"Asia/Ashgabat|Asia/Ashkhabad",
			"Asia/Bahrain|Asia/Qatar",
			"Asia/Bangkok|Asia/Phnom_Penh",
			"Asia/Bangkok|Asia/Vientiane",
			"Asia/Calcutta|Asia/Kolkata",
			"Asia/Chongqing|Asia/Chungking",
			"Asia/Chongqing|Asia/Harbin",
			"Asia/Chongqing|Asia/Shanghai",
			"Asia/Chongqing|PRC",
			"Asia/Dacca|Asia/Dhaka",
			"Asia/Dubai|Asia/Muscat",
			"Asia/Ho_Chi_Minh|Asia/Saigon",
			"Asia/Hong_Kong|Hongkong",
			"Asia/Istanbul|Europe/Istanbul",
			"Asia/Istanbul|Turkey",
			"Asia/Jerusalem|Asia/Tel_Aviv",
			"Asia/Jerusalem|Israel",
			"Asia/Kashgar|Asia/Urumqi",
			"Asia/Kathmandu|Asia/Katmandu",
			"Asia/Macao|Asia/Macau",
			"Asia/Makassar|Asia/Ujung_Pandang",
			"Asia/Nicosia|Europe/Nicosia",
			"Asia/Seoul|ROK",
			"Asia/Singapore|Singapore",
			"Asia/Taipei|ROC",
			"Asia/Tehran|Iran",
			"Asia/Thimbu|Asia/Thimphu",
			"Asia/Tokyo|Japan",
			"Asia/Ulaanbaatar|Asia/Ulan_Bator",
			"Atlantic/Faeroe|Atlantic/Faroe",
			"Atlantic/Reykjavik|Iceland",
			"Australia/ACT|Australia/Canberra",
			"Australia/ACT|Australia/NSW",
			"Australia/ACT|Australia/Sydney",
			"Australia/Adelaide|Australia/South",
			"Australia/Brisbane|Australia/Queensland",
			"Australia/Broken_Hill|Australia/Yancowinna",
			"Australia/Darwin|Australia/North",
			"Australia/Hobart|Australia/Tasmania",
			"Australia/LHI|Australia/Lord_Howe",
			"Australia/Melbourne|Australia/Victoria",
			"Australia/Perth|Australia/West",
			"Chile/EasterIsland|Pacific/Easter",
			"Eire|Europe/Dublin",
			"Etc/GMT+0|Etc/GMT",
			"Etc/GMT+0|Etc/GMT-0",
			"Etc/GMT+0|Etc/GMT0",
			"Etc/GMT+0|Etc/Greenwich",
			"Etc/GMT+0|GMT",
			"Etc/GMT+0|GMT+0",
			"Etc/GMT+0|GMT-0",
			"Etc/GMT+0|GMT0",
			"Etc/GMT+0|Greenwich",
			"Etc/UCT|UCT",
			"Etc/UTC|Etc/Universal",
			"Etc/UTC|Etc/Zulu",
			"Etc/UTC|UTC",
			"Etc/UTC|Universal",
			"Etc/UTC|Zulu",
			"Europe/Belfast|Europe/Guernsey",
			"Europe/Belfast|Europe/Isle_of_Man",
			"Europe/Belfast|Europe/Jersey",
			"Europe/Belfast|Europe/London",
			"Europe/Belfast|GB",
			"Europe/Belfast|GB-Eire",
			"Europe/Belgrade|Europe/Ljubljana",
			"Europe/Belgrade|Europe/Podgorica",
			"Europe/Belgrade|Europe/Sarajevo",
			"Europe/Belgrade|Europe/Skopje",
			"Europe/Belgrade|Europe/Zagreb",
			"Europe/Bratislava|Europe/Prague",
			"Europe/Busingen|Europe/Vaduz",
			"Europe/Busingen|Europe/Zurich",
			"Europe/Chisinau|Europe/Tiraspol",
			"Europe/Helsinki|Europe/Mariehamn",
			"Europe/Lisbon|Portugal",
			"Europe/Moscow|W-SU",
			"Europe/Rome|Europe/San_Marino",
			"Europe/Rome|Europe/Vatican",
			"Europe/Warsaw|Poland",
			"Kwajalein|Pacific/Kwajalein",
			"NZ-CHAT|Pacific/Chatham",
			"Pacific/Chuuk|Pacific/Truk",
			"Pacific/Chuuk|Pacific/Yap",
			"Pacific/Guam|Pacific/Saipan",
			"Pacific/Honolulu|Pacific/Johnston",
			"Pacific/Honolulu|US/Hawaii",
			"Pacific/Midway|Pacific/Pago_Pago",
			"Pacific/Midway|Pacific/Samoa",
			"Pacific/Midway|US/Samoa",
			"Pacific/Pohnpei|Pacific/Ponape"
		]
	};

/***/ },
/* 860 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(861);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function DelayedUpdaterFactory(Private, $rootScope, Promise, Notifier) {
	    var notify = new Notifier();
	    var _ = __webpack_require__(194);
	    var angular = __webpack_require__(212);

	    var vals = Private(__webpack_require__(861));

	    return function DelayedUpdater(doc) {
	      var updater = this;
	      var queue = [];
	      var log = {};
	      var timer = undefined;

	      updater.fire = function () {
	        clearTimeout(timer);

	        // only fire once
	        if (updater.fired) return;
	        updater.fired = true;

	        var method = undefined;
	        var body = undefined;
	        var updated = [];
	        var deleted = [];

	        // seperate the log into lists
	        _Object$keys(log).forEach(function (key) {
	          if (log[key] === 'updated') updated.push(key);else deleted.push(key);
	        });

	        if (deleted.length) {
	          method = 'doIndex';
	          body = _.clone(vals);
	        } else {
	          method = 'doUpdate';
	          body = _.pick(vals, updated);
	        }

	        doc[method](vals).then(function (resp) {
	          queue.forEach(function (q) {
	            q.resolve(resp);
	          });
	        }, function (err) {
	          queue.forEach(function (q) {
	            q.reject(err);
	          });
	        })['finally'](function () {
	          $rootScope.$broadcast('change:config', updated.concat(deleted));
	        });
	      };

	      updater.update = function (key, val, silentAndLocal) {
	        var newVal = val;
	        var oldVal = vals[key];

	        if (angular.equals(newVal, oldVal)) {
	          return Promise.resolve();
	        } else if (newVal == null) {
	          delete vals[key];
	          log[key] = 'deleted';
	        } else {
	          vals[key] = newVal;
	          log[key] = 'updated';
	        }

	        if (silentAndLocal) return Promise.resolve();

	        var defer = Promise.defer();
	        queue.push(defer);
	        notify.log('config change: ' + key + ': ' + oldVal + ' -> ' + newVal);
	        $rootScope.$broadcast('change:config.' + key, newVal, oldVal);

	        // reset the fire timer
	        clearTimeout(timer);
	        timer = setTimeout(updater.fire, 200);
	        return defer.promise;
	      };
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 861 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function ConfigValsService() {
	    return {};
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 862 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(863);
	__webpack_require__(878);
	__webpack_require__(880);
	__webpack_require__(881);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  return function DocSourceFactory(Private, Promise, es, sessionStorage) {
	    var sendToEs = Private(__webpack_require__(863));
	    var SourceAbstract = Private(__webpack_require__(878));
	    var DocRequest = Private(__webpack_require__(880));
	    var docStrategy = Private(__webpack_require__(881));

	    _['class'](DocSource).inherits(SourceAbstract);
	    function DocSource(initialState) {
	      DocSource.Super.call(this, initialState, docStrategy);
	    }

	    DocSource.prototype.onUpdate = SourceAbstract.prototype.onResults;
	    DocSource.prototype.onResults = void 0;

	    /*****
	     * PUBLIC API
	     *****/

	    DocSource.prototype._createRequest = function (defer) {
	      return new DocRequest(this, defer);
	    };

	    /**
	     * List of methods that is turned into a chainable API in the constructor
	     * @type {Array}
	     */
	    DocSource.prototype._methods = ['index', 'type', 'id', 'sourceInclude', 'sourceExclude'];

	    /**
	     * Applies a partial update to the document
	     * @param  {object} fields - The fields to change and their new values (es doc field)
	     * @return {undefined}
	     */
	    DocSource.prototype.doUpdate = function (fields) {
	      if (!this._state.id) return this.doIndex(fields);
	      return sendToEs.call(this, 'update', false, { doc: fields });
	    };

	    /**
	     * Update the document stored
	     * @param  {[type]}   body [description]
	     * @return {[type]}        [description]
	     */
	    DocSource.prototype.doIndex = function (body) {
	      return sendToEs.call(this, 'index', false, body);
	    };

	    DocSource.prototype.doCreate = function (body) {
	      return sendToEs.call(this, 'create', false, body, []);
	    };

	    /*****
	     * PRIVATE API
	     *****/

	    /**
	     * Get the type of this SourceAbstract
	     * @return {string} - 'doc'
	     */
	    DocSource.prototype._getType = function () {
	      return 'doc';
	    };

	    /**
	     * Used to merge properties into the state within ._flatten().
	     * The state is passed in and modified by the function
	     *
	     * @param  {object} state - the current merged state
	     * @param  {*} val - the value at `key`
	     * @param  {*} key - The key of `val`
	     * @return {undefined}
	     */
	    DocSource.prototype._mergeProp = function (state, val, key) {
	      key = '_' + key;

	      if (val != null && state[key] == null) {
	        state[key] = val;
	      }
	    };

	    /**
	     * Creates a key based on the doc's index/type/id
	     * @return {string}
	     */
	    DocSource.prototype._versionKey = function () {
	      var state = this._state;

	      if (!state.index || !state.type || !state.id) return;
	      return 'DocVersion:' + [state.index, state.type, state.id].map(encodeURIComponent).join('/');
	    };

	    /**
	     * Get the cached version number, not the version that is
	     * stored/shared with other tabs
	     *
	     * @return {number} - the version number, or undefined
	     */
	    DocSource.prototype._getVersion = function () {
	      if (this._version) return this._version;else return this._getStoredVersion();
	    };

	    /**
	     * Fetches the stored version from storage
	     * @return {[type]} [description]
	     */
	    DocSource.prototype._getStoredVersion = function () {
	      var key = this._versionKey();
	      if (!key) return;

	      var v = sessionStorage.get(key);
	      this._version = v ? _.parseInt(v) : void 0;
	      return this._version;
	    };

	    /**
	     * Stores the version into storage
	     * @param  {number, NaN} version - the current version number, NaN works well forcing a refresh
	     * @return {undefined}
	     */
	    DocSource.prototype._storeVersion = function (version) {
	      if (!version) return this._clearVersion();

	      var key = this._versionKey();
	      if (!key) return;
	      this._version = version;
	      sessionStorage.set(key, version);
	    };

	    /**
	     * Clears the stored version for a DocSource
	     */
	    DocSource.prototype._clearVersion = function () {
	      var key = this._versionKey();
	      if (!key) return;
	      sessionStorage.remove(key);
	    };

	    return DocSource;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(236);
	__webpack_require__(864);
	__webpack_require__(865);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var errors = __webpack_require__(236);

	  return function (Promise, Private, es) {
	    var requestQueue = Private(__webpack_require__(864));
	    var courierFetch = Private(__webpack_require__(865));

	    /**
	     * Backend for doUpdate and doIndex
	     * @param  {String} method - the client method to call
	     * @param  {Boolean} validateVersion - should our knowledge
	     *                                   of the the docs current version be sent to es?
	     * @param  {String} body - HTTP request body
	     */
	    return function (method, validateVersion, body, ignore) {
	      var doc = this;
	      // straight assignment will causes undefined values
	      var params = _.pick(this._state, ['id', 'type', 'index']);
	      params.body = body;
	      params.ignore = ignore || [409];

	      if (validateVersion && params.id) {
	        params.version = doc._getVersion();
	      }

	      return es[method](params).then(function (resp) {
	        if (resp.status === 409) throw new errors.VersionConflict(resp);

	        doc._storeVersion(resp._version);
	        doc.id(resp._id);

	        var docFetchProm = undefined;
	        if (method !== 'index') {
	          docFetchProm = doc.fetch();
	        } else {
	          // we already know what the response will be
	          docFetchProm = Promise.resolve({
	            _id: resp._id,
	            _index: params.index,
	            _source: body,
	            _type: params.type,
	            _version: doc._getVersion(),
	            found: true
	          });
	        }

	        // notify pending request for this same document that we have updates
	        docFetchProm.then(function (fetchResp) {
	          // use the key to compair sources
	          var key = doc._versionKey();

	          // clear the queue and filter out the removed items, pushing the
	          // unmatched ones back in.
	          var respondTo = requestQueue.splice(0).filter(function (req) {
	            var isDoc = req.source._getType() === 'doc';
	            var keyMatches = isDoc && req.source._versionKey() === key;

	            // put some request back into the queue
	            if (!keyMatches) {
	              requestQueue.push(req);
	              return false;
	            }

	            return true;
	          });

	          return courierFetch.fakeFetchThese(respondTo, respondTo.map(function () {
	            return _.cloneDeep(fetchResp);
	          }));
	        });

	        return resp._id;
	      })['catch'](function (err) {
	        // cast the error
	        throw new errors.RequestFailure(err);
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 864 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function PendingRequestList() {
	    var _ = __webpack_require__(194);

	    /**
	     * Queue of pending requests, requests are removed as
	     * they are processed by fetch.[sourceType]().
	     * @type {Array}
	     */
	    var queue = [];

	    queue.getInactive = function () /* strategies */{
	      return queue.get.apply(queue, arguments).filter(function (req) {
	        return !req.started;
	      });
	    };

	    queue.getStartable = function () {
	      return queue.get.apply(queue, arguments).filter(function (req) {
	        return req.canStart();
	      });
	    };

	    queue.get = function () {
	      for (var _len = arguments.length, strategies = Array(_len), _key = 0; _key < _len; _key++) {
	        strategies[_key] = arguments[_key];
	      }

	      return queue.filter(function (req) {
	        var strategyMatch = !strategies.length;
	        if (!strategyMatch) {
	          strategyMatch = strategies.some(function (strategy) {
	            return req.strategy === strategy;
	          });
	        }

	        return strategyMatch;
	      });
	    };

	    return queue;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(864);
	__webpack_require__(866);
	__webpack_require__(876);
	__webpack_require__(875);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function fetchService(Private, Promise) {
	    var _ = __webpack_require__(194);

	    var requestQueue = Private(__webpack_require__(864));
	    var fetchThese = Private(__webpack_require__(866));

	    var callResponseHandlers = Private(__webpack_require__(876));
	    var INCOMPLETE = Private(__webpack_require__(875)).INCOMPLETE;

	    function fetchQueued(strategy) {
	      var requests = requestQueue.getStartable(strategy);
	      if (!requests.length) return Promise.resolve();else return fetchThese(requests);
	    }

	    this.fetchQueued = fetchQueued;

	    function fetchASource(source, strategy) {
	      var defer = Promise.defer();

	      fetchThese([source._createRequest(defer)]);

	      return defer.promise;
	    }

	    /**
	     * Fetch a single doc source
	     * @param {DocSource} source - The DocSource to request
	     * @async
	     */
	    this.doc = fetchASource;

	    /**
	     * Fetch a single search source
	     * @param {SearchSource} source - The SearchSource to request
	     * @async
	     */
	    this.search = fetchASource;

	    /**
	     * Fetch a list of requests
	     * @param {array} reqs - the requests to fetch
	     * @async
	     */
	    this.these = fetchThese;

	    /**
	     * Send responses to a list of requests, used when requests
	     * should be skipped (like when a doc is updated with an index).
	     *
	     * This logic is a simplified version of what fetch_these does, and
	     * could have been added elsewhere, but I would rather the logic be
	     * here than outside the courier/fetch module.
	     *
	     * @param {array[Request]} requests - the list of requests to respond to
	     * @param {array[any]} responses - the list of responses for each request
	     */
	    this.fakeFetchThese = function (requests, responses) {
	      return Promise.map(requests, function (req) {
	        return req.start();
	      }).then(function () {
	        return callResponseHandlers(requests, responses);
	      }).then(function (requestStates) {
	        if (_.contains(requestStates, INCOMPLETE)) {
	          throw new Error('responding to requests did not complete!');
	        }
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(867);
	__webpack_require__(868);
	__webpack_require__(869);
	__webpack_require__(876);
	__webpack_require__(877);
	__webpack_require__(875);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FetchTheseProvider(Private, Promise) {
	    var notify = Private(__webpack_require__(867));
	    var forEachStrategy = Private(__webpack_require__(868));

	    // core tasks
	    var callClient = Private(__webpack_require__(869));
	    var callResponseHandlers = Private(__webpack_require__(876));
	    var continueIncomplete = Private(__webpack_require__(877));

	    var ABORTED = Private(__webpack_require__(875)).ABORTED;
	    var DUPLICATE = Private(__webpack_require__(875)).DUPLICATE;
	    var INCOMPLETE = Private(__webpack_require__(875)).INCOMPLETE;

	    function fetchThese(requests) {
	      return forEachStrategy(requests, function (strategy, reqsForStrategy) {
	        return fetchWithStrategy(strategy, reqsForStrategy.map(function (req) {
	          if (!req.started) return req;
	          return req.retry();
	        }));
	      })['catch'](notify.fatal);
	    }

	    function fetchWithStrategy(strategy, requests) {
	      function replaceAbortedRequests() {
	        requests = requests.map(function (r) {
	          return r.aborted ? ABORTED : r;
	        });
	      }

	      replaceAbortedRequests();
	      return startRequests(requests).then(function () {
	        replaceAbortedRequests();
	        return callClient(strategy, requests);
	      }).then(function (responses) {
	        replaceAbortedRequests();
	        return callResponseHandlers(requests, responses);
	      }).then(function (responses) {
	        replaceAbortedRequests();
	        return continueIncomplete(strategy, requests, responses, fetchWithStrategy);
	      }).then(function (responses) {
	        replaceAbortedRequests();
	        return responses.map(function (resp) {
	          switch (resp) {
	            case ABORTED:
	              return null;
	            case DUPLICATE:
	            case INCOMPLETE:
	              throw new Error('Failed to clear incomplete or duplicate request from responses.');
	            default:
	              return resp;
	          }
	        });
	      });
	    }

	    function startRequests(requests) {
	      return Promise.map(requests, function (req) {
	        if (req === ABORTED) {
	          return req;
	        }

	        return new Promise(function (resolve) {
	          var action = req.started ? req['continue'] : req.start;
	          resolve(action.call(req));
	        })['catch'](function (err) {
	          return req.handleFailure(err);
	        });
	      });
	    }

	    return fetchThese;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchNotifier(Notifier) {
	    return new Notifier({
	      location: 'Courier Fetch'
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 868 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FetchForEachRequestStrategy(Private, Promise) {
	    var _ = __webpack_require__(194);

	    function forEachStrategy(requests, block) {
	      block = Promise.method(block);
	      var sets = [];

	      requests.forEach(function (req) {
	        var strategy = req.strategy;
	        var set = _.find(sets, { 0: strategy });
	        if (set) set[1].push(req);else sets.push([strategy, [req]]);
	      });

	      return Promise.all(sets.map(function (set) {
	        return block(set[0], set[1]);
	      }));
	    }

	    return forEachStrategy;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 869 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(870);
	__webpack_require__(874);
	__webpack_require__(875);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchCallClient(Private, Promise, es, esShardTimeout, sessionId) {
	    var _ = __webpack_require__(194);

	    var isRequest = Private(__webpack_require__(870));
	    var mergeDuplicateRequests = Private(__webpack_require__(874));

	    var ABORTED = Private(__webpack_require__(875)).ABORTED;
	    var DUPLICATE = Private(__webpack_require__(875)).DUPLICATE;

	    function callClient(strategy, requests) {
	      // merging docs can change status to DUPLICATE, capture new statuses
	      var statuses = mergeDuplicateRequests(requests);

	      // get the actual list of requests that we will be fetching
	      var executable = statuses.filter(isRequest);
	      var execCount = executable.length;

	      if (!execCount) return Promise.resolve([]);

	      // resolved by respond()
	      var esPromise = undefined;
	      var defer = Promise.defer();

	      // for each respond with either the response or ABORTED
	      var respond = function respond(responses) {
	        responses = responses || [];
	        return Promise.map(requests, function (req, i) {
	          switch (statuses[i]) {
	            case ABORTED:
	              return ABORTED;
	            case DUPLICATE:
	              return req._uniq.resp;
	            default:
	              return responses[_.findIndex(executable, req)];
	          }
	        }).then(function (res) {
	          return defer.resolve(res);
	        }, function (err) {
	          return defer.reject(err);
	        });
	      };

	      // handle a request being aborted while being fetched
	      var requestWasAborted = Promise.method(function (req, i) {
	        if (statuses[i] === ABORTED) {
	          defer.reject(new Error('Request was aborted twice?'));
	        }

	        execCount -= 1;
	        if (execCount > 0) {
	          // the multi-request still contains other requests
	          return;
	        }

	        if (esPromise && _.isFunction(esPromise.abort)) {
	          esPromise.abort();
	        }

	        esPromise = ABORTED;

	        return respond();
	      });

	      // attach abort handlers, close over request index
	      statuses.forEach(function (req, i) {
	        if (!isRequest(req)) return;
	        req.whenAborted(function () {
	          requestWasAborted(req, i)['catch'](defer.reject);
	        });
	      });

	      // Now that all of THAT^^^ is out of the way, lets actually
	      // call out to elasticsearch
	      Promise.map(executable, function (req) {
	        return Promise['try'](req.getFetchParams, void 0, req).then(function (fetchParams) {
	          return req.fetchParams = fetchParams;
	        });
	      }).then(function (reqsFetchParams) {
	        return strategy.reqsFetchParamsToBody(reqsFetchParams);
	      }).then(function (body) {
	        // while the strategy was converting, our request was aborted
	        if (esPromise === ABORTED) {
	          throw ABORTED;
	        }

	        return esPromise = es[strategy.clientMethod]({
	          timeout: esShardTimeout,
	          ignore_unavailable: true,
	          preference: sessionId,
	          body: body
	        });
	      }).then(function (clientResp) {
	        return strategy.getResponses(clientResp);
	      }).then(respond)['catch'](function (err) {
	        if (err === ABORTED) respond();else defer.reject(err);
	      });

	      // return our promise, but catch any errors we create and
	      // send them to the requests
	      return defer.promise['catch'](function (err) {
	        requests.forEach(function (req, i) {
	          if (statuses[i] !== ABORTED) {
	            req.handleFailure(err);
	          }
	        });
	      });
	    }

	    return callClient;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(871);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchIsRequestProvider(Private) {
	    var AbstractRequest = Private(__webpack_require__(871));

	    return function isRequest(obj) {
	      return obj instanceof AbstractRequest;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(243);
	__webpack_require__(236);
	__webpack_require__(864);
	__webpack_require__(872);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function AbstractReqProvider(Private, Promise) {
	    var _ = __webpack_require__(194);
	    var moment = __webpack_require__(243);
	    var errors = __webpack_require__(236);
	    var requestQueue = Private(__webpack_require__(864));
	    var requestErrorHandler = Private(__webpack_require__(872));

	    function AbstractReq(source, defer) {
	      if (!(this instanceof AbstractReq) || !this.constructor || this.constructor === AbstractReq) {
	        throw new Error('The AbstractReq class should not be called directly');
	      }

	      this.source = source;
	      this.defer = defer || Promise.defer();

	      requestQueue.push(this);
	    }

	    AbstractReq.prototype.canStart = function () {
	      return Boolean(!this.stopped && !this.source._fetchDisabled);
	    };

	    AbstractReq.prototype.start = function () {
	      if (this.started) {
	        throw new TypeError('Unable to start request because it has already started');
	      }

	      this.started = true;
	      this.moment = moment();

	      var source = this.source;
	      if (source.activeFetchCount) {
	        source.activeFetchCount += 1;
	      } else {
	        source.activeFetchCount = 1;
	      }

	      source.history = [this];
	    };

	    AbstractReq.prototype.getFetchParams = function () {
	      return this.source._flatten();
	    };

	    AbstractReq.prototype.transformResponse = function (resp) {
	      return resp;
	    };

	    AbstractReq.prototype.filterError = function (resp) {
	      return false;
	    };

	    AbstractReq.prototype.handleResponse = function (resp) {
	      this.success = true;
	      this.resp = resp;
	    };

	    AbstractReq.prototype.handleFailure = function (error) {
	      this.success = false;
	      this.resp = error && error.resp;
	      this.retry();
	      return requestErrorHandler(this, error);
	    };

	    AbstractReq.prototype.isIncomplete = function () {
	      return false;
	    };

	    AbstractReq.prototype['continue'] = function () {
	      throw new Error('Unable to continue ' + this.type + ' request');
	    };

	    AbstractReq.prototype.retry = function () {
	      var clone = this.clone();
	      this.abort();
	      return clone;
	    };

	    // don't want people overriding this, so it becomes a natural
	    // part of .abort() and .complete()
	    function stop(then) {
	      return function () {
	        if (this.stopped) return;

	        this.stopped = true;
	        this.source.activeFetchCount -= 1;
	        _.pull(requestQueue, this);
	        then.call(this);
	      };
	    }

	    AbstractReq.prototype.abort = stop(function () {
	      this.defer = null;
	      this.aborted = true;
	      if (this._whenAborted) _.callEach(this._whenAborted);
	    });

	    AbstractReq.prototype.whenAborted = function (cb) {
	      this._whenAborted = this._whenAborted || [];
	      this._whenAborted.push(cb);
	    };

	    AbstractReq.prototype.complete = stop(function () {
	      this.ms = this.moment.diff() * -1;
	      this.defer.resolve(this.resp);
	    });

	    AbstractReq.prototype.clone = function () {
	      return new this.constructor(this.source, this.defer);
	    };

	    return AbstractReq;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 872 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(873);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function RequestErrorHandlerFactory(Private, Notifier) {
	    var errHandlers = Private(__webpack_require__(873));

	    var notify = new Notifier({
	      location: 'Courier Fetch Error'
	    });

	    function handleError(req, error) {
	      var myHandlers = [];

	      errHandlers.splice(0).forEach(function (handler) {
	        (handler.source === req.source ? myHandlers : errHandlers).push(handler);
	      });

	      if (!myHandlers.length) {
	        notify.fatal(new Error('unhandled courier request error: ' + notify.describeError(error)));
	      } else {
	        myHandlers.forEach(function (handler) {
	          handler.defer.resolve(error);
	        });
	      }
	    }

	    return handleError;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 873 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function ErrorHandlerList() {
	    /**
	     * Queue of pending error handlers, they are removed as
	     * they are resolved.
	     * @type {Array}
	     */
	    return [];
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 874 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(870);
	__webpack_require__(875);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FetchMergeDuplicateRequests(Private) {
	    var isRequest = Private(__webpack_require__(870));
	    var DUPLICATE = Private(__webpack_require__(875)).DUPLICATE;

	    function mergeDuplicateRequests(requests) {
	      // dedupe requests
	      var index = {};
	      return requests.map(function (req) {
	        if (!isRequest(req)) return req;

	        var iid = req.source._instanceid;
	        if (!index[iid]) {
	          // this request is unique so far
	          index[iid] = req;
	          // keep the request
	          return req;
	        }

	        // the source was requested at least twice
	        req._uniq = index[iid];
	        return DUPLICATE;
	      });
	    }

	    return mergeDuplicateRequests;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 875 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchRequestStatus() {
	    return {
	      ABORTED: { CourierFetchRequestStatus: 'aborted' },
	      DUPLICATE: { CourierFetchRequestStatus: 'duplicate' },
	      INCOMPLETE: { CourierFetchRequestStatus: 'incomplete' }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 876 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(875);
	__webpack_require__(867);
	__webpack_require__(236);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchCallResponseHandlers(Private, Promise) {
	    var ABORTED = Private(__webpack_require__(875)).ABORTED;
	    var INCOMPLETE = Private(__webpack_require__(875)).INCOMPLETE;
	    var notify = Private(__webpack_require__(867));

	    var SearchTimeout = __webpack_require__(236).SearchTimeout;
	    var RequestFailure = __webpack_require__(236).RequestFailure;
	    var ShardFailure = __webpack_require__(236).ShardFailure;

	    function callResponseHandlers(requests, responses) {
	      return Promise.map(requests, function (req, i) {
	        if (req === ABORTED || req.aborted) {
	          return ABORTED;
	        }

	        var resp = responses[i];

	        if (resp.timed_out) {
	          notify.warning(new SearchTimeout());
	        }

	        if (resp._shards && resp._shards.failed) {
	          notify.warning(new ShardFailure(resp));
	        }

	        function progress() {
	          if (req.isIncomplete()) {
	            return INCOMPLETE;
	          }

	          req.complete();
	          return resp;
	        }

	        if (resp.error) {
	          if (req.filterError(resp)) {
	            return progress();
	          } else {
	            return req.handleFailure(new RequestFailure(null, resp));
	          }
	        }

	        return Promise['try'](function () {
	          return req.transformResponse(resp);
	        }).then(function () {
	          resp = arguments[0];
	          return req.handleResponse(resp);
	        }).then(progress);
	      });
	    }

	    return callResponseHandlers;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(875);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierFetchContinueIncompleteRequests(Private) {
	    var INCOMPLETE = Private(__webpack_require__(875)).INCOMPLETE;

	    function continueIncompleteRequests(strategy, requests, responses, fetchWithStrategy) {
	      var incomplete = [];

	      responses.forEach(function (resp, i) {
	        if (resp === INCOMPLETE) {
	          incomplete.push(requests[i]);
	        }
	      });

	      if (!incomplete.length) return responses;

	      return fetchWithStrategy(strategy, incomplete).then(function (completedResponses) {
	        return responses.map(function (prevResponse) {
	          if (prevResponse !== INCOMPLETE) return prevResponse;
	          return completedResponses.shift();
	        });
	      });
	    }

	    return continueIncompleteRequests;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 878 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(864);
	__webpack_require__(873);
	__webpack_require__(865);
	__webpack_require__(879);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);

	  return function SourceAbstractFactory(Private, Promise, PromiseEmitter) {
	    var requestQueue = Private(__webpack_require__(864));
	    var errorHandlers = Private(__webpack_require__(873));
	    var courierFetch = Private(__webpack_require__(865));

	    function SourceAbstract(initialState, strategy) {
	      var self = this;
	      self._instanceid = _.uniqueId('data_source');

	      self._state = (function () {
	        // state can be serialized as JSON, and passed back in to restore
	        if (initialState) {
	          if (typeof initialState === 'string') {
	            return JSON.parse(initialState);
	          } else {
	            return _.cloneDeep(initialState);
	          }
	        } else {
	          return {};
	        }
	      })();

	      // set internal state values
	      self._methods.forEach(function (name) {
	        self[name] = function (val) {
	          if (val == null) {
	            delete self._state[name];
	          } else {
	            self._state[name] = val;
	          }

	          return self;
	        };
	      });

	      self.history = [];
	      self._fetchStrategy = strategy;
	    }

	    /*****
	     * PUBLIC API
	     *****/

	    /**
	     * Get values from the state
	     * @param {string} name - The name of the property desired
	     * @return {any} - the value found
	     */
	    SourceAbstract.prototype.get = function (name) {
	      var self = this;
	      while (self) {
	        if (self._state[name] !== void 0) return self._state[name];
	        self = self.getParent();
	      }
	    };

	    /**
	     * Get the value from our own state, don't traverse up the chain
	     * @param {string} name - The name of the property desired
	     * @return {any} - the value found
	     */
	    SourceAbstract.prototype.getOwn = function (name) {
	      if (this._state[name] !== void 0) return this._state[name];
	    };

	    /**
	     * Change the entire state of a SourceAbstract
	     * @param {object|string} state - The SourceAbstract's new state, or a
	     *   string of the state value to set
	     */
	    SourceAbstract.prototype.set = function (state, val) {
	      var self = this;

	      if (typeof state === 'string') {
	        // the getter and setter methods check for undefined explicitly
	        // to identify getters and null to identify deletion
	        if (val === undefined) {
	          val = null;
	        }
	        self[state](val);
	      } else {
	        self._state = state;
	      }
	      return self;
	    };

	    /**
	     * Create a new dataSource object of the same type
	     * as this, which inherits this dataSource's properties
	     * @return {SourceAbstract}
	     */
	    SourceAbstract.prototype.extend = function () {
	      return new this.Class().inherits(this);
	    };

	    /**
	     * return a simple, encodable object representing the state of the SourceAbstract
	     * @return {[type]} [description]
	     */
	    SourceAbstract.prototype.toJSON = function () {
	      return _.clone(this._state);
	    };

	    /**
	     * Create a string representation of the object
	     * @return {[type]} [description]
	     */
	    SourceAbstract.prototype.toString = function () {
	      return angular.toJson(this.toJSON());
	    };

	    /**
	     * Put a request in to the courier that this Source should
	     * be fetched on the next run of the courier
	     * @return {Promise}
	     */
	    SourceAbstract.prototype.onResults = function (handler) {
	      var self = this;

	      return new PromiseEmitter(function (resolve, reject) {
	        var defer = Promise.defer();
	        defer.promise.then(resolve, reject);

	        self._createRequest(defer);
	      }, handler);
	    };

	    /**
	     * Noop
	     */
	    SourceAbstract.prototype.getParent = function () {
	      return this._parent;
	    };

	    /**
	     * similar to onResults, but allows a seperate loopy code path
	     * for error handling.
	     *
	     * @return {Promise}
	     */
	    SourceAbstract.prototype.onError = function (handler) {
	      var self = this;

	      return new PromiseEmitter(function (resolve, reject) {
	        var defer = Promise.defer();
	        defer.promise.then(resolve, reject);

	        errorHandlers.push({
	          source: self,
	          defer: defer
	        });
	      }, handler);
	    };

	    /**
	     * Fetch just this source ASAP
	     *
	     * ONLY USE IF YOU WILL BE USING THE RESULTS
	     * provided by the returned promise, otherwise
	     * call #fetchQueued()
	     *
	     * @async
	     */
	    SourceAbstract.prototype.fetch = function () {
	      var self = this;
	      var req = _.first(self._myStartableQueued());

	      if (!req) {
	        req = self._createRequest();
	      }

	      courierFetch.these([req]);

	      return req.defer.promise;
	    };

	    /**
	     * Fetch all pending requests for this source ASAP
	     * @async
	     */
	    SourceAbstract.prototype.fetchQueued = function () {
	      return courierFetch.these(this._myStartableQueued());
	    };

	    /**
	     * Cancel all pending requests for this dataSource
	     * @return {undefined}
	     */
	    SourceAbstract.prototype.cancelQueued = function () {
	      var _this = this;

	      requestQueue.get(this._fetchStrategy).filter(function (req) {
	        return req.source === _this;
	      }).forEach(function (req) {
	        return req.abort();
	      });
	    };

	    /**
	     * Completely destroy the SearchSource.
	     * @return {undefined}
	     */
	    SourceAbstract.prototype.destroy = function () {
	      this.cancelQueued();
	    };

	    /*****
	     * PRIVATE API
	     *****/

	    SourceAbstract.prototype._myStartableQueued = function () {
	      var _this2 = this;

	      return requestQueue.getStartable(this._fetchStrategy).filter(function (req) {
	        return req.source === _this2;
	      });
	    };

	    SourceAbstract.prototype._createRequest = function () {
	      throw new Error('_createRequest must be implemented by subclass');
	    };

	    /**
	     * Walk the inheritance chain of a source and return it's
	     * flat representaion (taking into account merging rules)
	     * @returns {Promise}
	     * @resolved {Object|null} - the flat state of the SourceAbstract
	     */
	    SourceAbstract.prototype._flatten = function () {
	      var type = this._getType();

	      // the merged state of this dataSource and it's ancestors
	      var flatState = {};

	      // function used to write each property from each state object in the chain to flat state
	      var root = this;

	      // start the chain at this source
	      var current = this;

	      // call the ittr and return it's promise
	      return (function ittr() {
	        // itterate the _state object (not array) and
	        // pass each key:value pair to source._mergeProp. if _mergeProp
	        // returns a promise, then wait for it to complete and call _mergeProp again
	        return Promise.all(_.map(current._state, function ittr(value, key) {
	          if (Promise.is(value)) {
	            return value.then(function (value) {
	              return ittr(value, key);
	            });
	          }

	          var prom = root._mergeProp(flatState, value, key);
	          return Promise.is(prom) ? prom : null;
	        })).then(function () {
	          // move to this sources parent
	          var parent = current.getParent();
	          // keep calling until we reach the top parent
	          if (parent) {
	            current = parent;
	            return ittr();
	          }
	        });
	      })().then(function () {
	        if (type === 'search') {
	          (function () {
	            // This is down here to prevent the circular dependency
	            var decorateQuery = Private(__webpack_require__(879));

	            flatState.body = flatState.body || {};

	            // defaults for the query
	            if (!flatState.body.query) {
	              flatState.body.query = {
	                'match_all': {}
	              };
	            }

	            if (flatState.body.size === 0) {
	              flatState.search_type = 'count';
	            } else {
	              var computedFields = flatState.index.getComputedFields();
	              flatState.body.fields = computedFields.fields;
	              flatState.body.script_fields = flatState.body.script_fields || {};
	              flatState.body.fielddata_fields = flatState.body.fielddata_fields || [];

	              _.extend(flatState.body.script_fields, computedFields.scriptFields);
	              flatState.body.fielddata_fields = _.union(flatState.body.fielddata_fields, computedFields.fielddataFields);
	            }

	            decorateQuery(flatState.body.query);

	            /**
	             * Create a filter that can be reversed for filters with negate set
	             * @param {boolean} reverse This will reverse the filter. If true then
	             *                          anything where negate is set will come
	             *                          through otherwise it will filter out
	             * @returns {function}
	             */
	            var filterNegate = function filterNegate(reverse) {
	              return function (filter) {
	                if (_.isUndefined(filter.meta) || _.isUndefined(filter.meta.negate)) return !reverse;
	                return filter.meta && filter.meta.negate === reverse;
	              };
	            };

	            /**
	             * Clean out any invalid attributes from the filters
	             * @param {object} filter The filter to clean
	             * @returns {object}
	             */
	            var cleanFilter = function cleanFilter(filter) {
	              return _.omit(filter, ['meta']);
	            };

	            // switch to filtered query if there are filters
	            if (flatState.filters) {
	              if (flatState.filters.length) {
	                _.each(flatState.filters, function (filter) {
	                  if (filter.query) {
	                    decorateQuery(filter.query);
	                  }
	                });

	                flatState.body.query = {
	                  filtered: {
	                    query: flatState.body.query,
	                    filter: {
	                      bool: {
	                        must: _(flatState.filters).filter(filterNegate(false)).map(cleanFilter).value(),
	                        must_not: _(flatState.filters).filter(filterNegate(true)).map(cleanFilter).value()
	                      }
	                    }
	                  }
	                };
	              }
	              delete flatState.filters;
	            }
	          })();
	        }

	        return flatState;
	      });
	    };

	    return SourceAbstract;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 879 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function DecorateQuery(config) {
	    /**
	     * Decorate queries with default parameters
	     * @param {query} query object
	     * @returns {object}
	     */
	    return function (query) {
	      var queryOptions = config.get('query:queryString:options');

	      if (_.has(query, 'query_string.query')) {
	        _.extend(query.query_string, queryOptions);
	      }

	      return query;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 880 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(881);
	__webpack_require__(871);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function DocRequestProvider(Private) {
	    var _ = __webpack_require__(194);

	    var docStrategy = Private(__webpack_require__(881));
	    var AbstractRequest = Private(__webpack_require__(871));

	    _['class'](DocRequest).inherits(AbstractRequest);
	    function DocRequest(source, defer) {
	      DocRequest.Super.call(this, source, defer);

	      this.type = 'doc';
	      this.strategy = docStrategy;
	    }

	    DocRequest.prototype.canStart = function () {
	      var parent = DocRequest.Super.prototype.canStart.call(this);
	      if (!parent) return false;

	      var version = this.source._version;
	      var storedVersion = this.source._getStoredVersion();

	      // conditions that equal "fetch This DOC!"
	      var unknown = !version && !storedVersion;
	      var mismatch = version !== storedVersion;

	      return Boolean(mismatch || unknown && !this.started);
	    };

	    DocRequest.prototype.handleResponse = function (resp) {
	      if (resp.found) {
	        this.source._storeVersion(resp._version);
	      } else {
	        this.source._clearVersion();
	      }

	      return DocRequest.Super.prototype.handleResponse.call(this, resp);
	    };

	    return DocRequest;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 881 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FetchStrategyForDoc(Promise) {
	    return {
	      clientMethod: 'mget',

	      /**
	       * Flatten a series of requests into as ES request body
	       * @param  {array} requests - an array of flattened requests
	       * @return {Promise} - a promise that is fulfilled by the request body
	       */
	      reqsFetchParamsToBody: function reqsFetchParamsToBody(reqsFetchParams) {
	        return Promise.resolve({
	          docs: reqsFetchParams
	        });
	      },

	      /**
	       * Fetch the multiple responses from the ES Response
	       * @param  {object} resp - The response sent from Elasticsearch
	       * @return {array} - the list of responses
	       */
	      getResponses: function getResponses(resp) {
	        return resp.docs;
	      }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 882 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(236);
	__webpack_require__(194);
	__webpack_require__(883);
	__webpack_require__(272);
	__webpack_require__(885);
	__webpack_require__(886);
	__webpack_require__(215);
	__webpack_require__(862);
	__webpack_require__(912);
	__webpack_require__(914);
	__webpack_require__(864);
	__webpack_require__(873);
	__webpack_require__(865);
	__webpack_require__(920);
	__webpack_require__(922);
	__webpack_require__(919);
	__webpack_require__(923);
	__webpack_require__(925);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var errors = __webpack_require__(236);
	  var _ = __webpack_require__(194);

	  __webpack_require__(883);
	  __webpack_require__(272);
	  __webpack_require__(885);
	  __webpack_require__(886);

	  __webpack_require__(215).get('kibana/courier').service('courier', function ($rootScope, Private, Promise, indexPatterns, Notifier) {
	    function Courier() {
	      var self = this;

	      var DocSource = Private(__webpack_require__(862));
	      var SearchSource = Private(__webpack_require__(912));
	      var searchStrategy = Private(__webpack_require__(914));

	      var requestQueue = Private(__webpack_require__(864));
	      var errorHandlers = Private(__webpack_require__(873));

	      var fetch = Private(__webpack_require__(865));
	      var docLooper = self.docLooper = Private(__webpack_require__(920));
	      var searchLooper = self.searchLooper = Private(__webpack_require__(922));

	      // expose some internal modules
	      self.setRootSearchSource = Private(__webpack_require__(919)).set;

	      self.SavedObject = Private(__webpack_require__(923));
	      self.indexPatterns = indexPatterns;
	      self.redirectWhenMissing = Private(__webpack_require__(925));

	      self.DocSource = DocSource;
	      self.SearchSource = SearchSource;

	      var HastyRefresh = errors.HastyRefresh;

	      /**
	       * update the time between automatic search requests
	       *
	       * @chainable
	       */
	      self.fetchInterval = function (ms) {
	        searchLooper.ms(ms);
	        return this;
	      };

	      /**
	       * Start fetching search requests on an interval
	       * @chainable
	       */
	      self.start = function () {
	        searchLooper.start();
	        docLooper.start();
	        return this;
	      };

	      /**
	       * Process the pending request queue right now, returns
	       * a promise that resembles the success of the fetch completing,
	       * individual errors are routed to their respective requests.
	       */
	      self.fetch = function () {
	        fetch.fetchQueued(searchStrategy).then(function () {
	          searchLooper.restart();
	        });
	      };

	      /**
	       * is the currior currently fetching search
	       * results automatically?
	       *
	       * @return {boolean}
	       */
	      self.started = function () {
	        return searchLooper.started();
	      };

	      /**
	       * stop the courier from fetching more search
	       * results, does not stop vaidating docs.
	       *
	       * @chainable
	       */
	      self.stop = function () {
	        searchLooper.stop();
	        return this;
	      };

	      /**
	       * create a source object that is a child of this courier
	       *
	       * @param {string} type - the type of Source to create
	       */
	      self.createSource = function (type) {
	        switch (type) {
	          case 'doc':
	            return new DocSource();
	          case 'search':
	            return new SearchSource();
	        }
	      };

	      /**
	       * Abort all pending requests
	       * @return {[type]} [description]
	       */
	      self.close = function () {
	        searchLooper.stop();
	        docLooper.stop();

	        _.invoke(requestQueue, 'abort');

	        if (requestQueue.length) {
	          throw new Error('Aborting all pending requests failed.');
	        }
	      };

	      // Listen for refreshInterval changes
	      $rootScope.$watchCollection('timefilter.refreshInterval', function () {
	        var refreshValue = _.get($rootScope, 'timefilter.refreshInterval.value');
	        var refreshPause = _.get($rootScope, 'timefilter.refreshInterval.pause');
	        if (_.isNumber(refreshValue) && !refreshPause) {
	          self.fetchInterval(refreshValue);
	        } else {
	          self.fetchInterval(0);
	        }
	      });

	      var onFatalDefer = Promise.defer();
	      onFatalDefer.promise.then(self.close);
	      Notifier.fatalCallbacks.push(onFatalDefer.resolve);
	    }

	    return new Courier();
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 883 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(884);
	__webpack_require__(194);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(884);
	  var _ = __webpack_require__(194);

	  var es = undefined; // share the client amoungst all apps
	  __webpack_require__(215).get('kibana', ['elasticsearch', 'kibana/config']).service('es', function (esFactory, esUrl, $q, esApiVersion, esRequestTimeout) {
	    if (es) return es;

	    es = esFactory({
	      host: esUrl,
	      log: 'info',
	      requestTimeout: esRequestTimeout,
	      apiVersion: esApiVersion,
	      plugins: [function (Client, config) {

	        // esFactory automatically injects the AngularConnector to the config
	        // https://github.com/elastic/elasticsearch-js/blob/master/src/lib/connectors/angular.js
	        _['class'](CustomAngularConnector).inherits(config.connectionClass);
	        function CustomAngularConnector(host, config) {
	          CustomAngularConnector.Super.call(this, host, config);

	          this.request = _.wrap(this.request, function (request, params, cb) {
	            if (String(params.method).toUpperCase() === 'GET') {
	              params.query = _.defaults({ _: Date.now() }, params.query);
	            }

	            return request.call(this, params, cb);
	          });
	        }

	        config.connectionClass = CustomAngularConnector;
	      }]
	    });

	    return es;
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 884 */
/***/ function(module, exports) {

	/*! elasticsearch - v8.0.1 - 2015-08-26
	 * http://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html
	 * Copyright (c) 2015 Elasticsearch BV; Licensed Apache-2.0 */

	;(function () {
	/* prevent lodash from detecting external amd loaders */var define; 
	;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

	},{}],2:[function(require,module,exports){


	//
	// The shims in this file are not fully implemented shims for the ES5
	// features, but do work for the particular usecases there is in
	// the other modules.
	//

	var toString = Object.prototype.toString;
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	// Array.isArray is supported in IE9
	function isArray(xs) {
	  return toString.call(xs) === '[object Array]';
	}
	exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

	// Array.prototype.indexOf is supported in IE9
	exports.indexOf = function indexOf(xs, x) {
	  if (xs.indexOf) return xs.indexOf(x);
	  for (var i = 0; i < xs.length; i++) {
	    if (x === xs[i]) return i;
	  }
	  return -1;
	};

	// Array.prototype.filter is supported in IE9
	exports.filter = function filter(xs, fn) {
	  if (xs.filter) return xs.filter(fn);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    if (fn(xs[i], i, xs)) res.push(xs[i]);
	  }
	  return res;
	};

	// Array.prototype.forEach is supported in IE9
	exports.forEach = function forEach(xs, fn, self) {
	  if (xs.forEach) return xs.forEach(fn, self);
	  for (var i = 0; i < xs.length; i++) {
	    fn.call(self, xs[i], i, xs);
	  }
	};

	// Array.prototype.map is supported in IE9
	exports.map = function map(xs, fn) {
	  if (xs.map) return xs.map(fn);
	  var out = new Array(xs.length);
	  for (var i = 0; i < xs.length; i++) {
	    out[i] = fn(xs[i], i, xs);
	  }
	  return out;
	};

	// Array.prototype.reduce is supported in IE9
	exports.reduce = function reduce(array, callback, opt_initialValue) {
	  if (array.reduce) return array.reduce(callback, opt_initialValue);
	  var value, isValueSet = false;

	  if (2 < arguments.length) {
	    value = opt_initialValue;
	    isValueSet = true;
	  }
	  for (var i = 0, l = array.length; l > i; ++i) {
	    if (array.hasOwnProperty(i)) {
	      if (isValueSet) {
	        value = callback(value, array[i], i, array);
	      }
	      else {
	        value = array[i];
	        isValueSet = true;
	      }
	    }
	  }

	  return value;
	};

	// String.prototype.substr - negative index don't work in IE8
	if ('ab'.substr(-1) !== 'b') {
	  exports.substr = function (str, start, length) {
	    // did we get a negative start, calculate how much it is from the beginning of the string
	    if (start < 0) start = str.length + start;

	    // call the original function
	    return str.substr(start, length);
	  };
	} else {
	  exports.substr = function (str, start, length) {
	    return str.substr(start, length);
	  };
	}

	// String.prototype.trim is supported in IE9
	exports.trim = function (str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	};

	// Function.prototype.bind is supported in IE9
	exports.bind = function () {
	  var args = Array.prototype.slice.call(arguments);
	  var fn = args.shift();
	  if (fn.bind) return fn.bind.apply(fn, args);
	  var self = args.shift();
	  return function () {
	    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
	  };
	};

	// Object.create is supported in IE9
	function create(prototype, properties) {
	  var object;
	  if (prototype === null) {
	    object = { '__proto__' : null };
	  }
	  else {
	    if (typeof prototype !== 'object') {
	      throw new TypeError(
	        'typeof prototype[' + (typeof prototype) + '] != \'object\''
	      );
	    }
	    var Type = function () {};
	    Type.prototype = prototype;
	    object = new Type();
	    object.__proto__ = prototype;
	  }
	  if (typeof properties !== 'undefined' && Object.defineProperties) {
	    Object.defineProperties(object, properties);
	  }
	  return object;
	}
	exports.create = typeof Object.create === 'function' ? Object.create : create;

	// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
	// they do show a description and number property on Error objects
	function notObject(object) {
	  return ((typeof object != "object" && typeof object != "function") || object === null);
	}

	function keysShim(object) {
	  if (notObject(object)) {
	    throw new TypeError("Object.keys called on a non-object");
	  }

	  var result = [];
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result.push(name);
	    }
	  }
	  return result;
	}

	// getOwnPropertyNames is almost the same as Object.keys one key feature
	//  is that it returns hidden properties, since that can't be implemented,
	//  this feature gets reduced so it just shows the length property on arrays
	function propertyShim(object) {
	  if (notObject(object)) {
	    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
	  }

	  var result = keysShim(object);
	  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
	    result.push('length');
	  }
	  return result;
	}

	var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
	var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
	  Object.getOwnPropertyNames : propertyShim;

	if (new Error().hasOwnProperty('description')) {
	  var ERROR_PROPERTY_FILTER = function (obj, array) {
	    if (toString.call(obj) === '[object Error]') {
	      array = exports.filter(array, function (name) {
	        return name !== 'description' && name !== 'number' && name !== 'message';
	      });
	    }
	    return array;
	  };

	  exports.keys = function (object) {
	    return ERROR_PROPERTY_FILTER(object, keys(object));
	  };
	  exports.getOwnPropertyNames = function (object) {
	    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
	  };
	} else {
	  exports.keys = keys;
	  exports.getOwnPropertyNames = getOwnPropertyNames;
	}

	// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
	function valueObject(value, key) {
	  return { value: value[key] };
	}

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
	  try {
	    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
	    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	  } catch (e) {
	    // IE8 dom element issue - use a try catch and default to valueObject
	    exports.getOwnPropertyDescriptor = function (value, key) {
	      try {
	        return Object.getOwnPropertyDescriptor(value, key);
	      } catch (e) {
	        return valueObject(value, key);
	      }
	    };
	  }
	} else {
	  exports.getOwnPropertyDescriptor = valueObject;
	}

	},{}],3:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// UTILITY
	var util = require('util');
	var shims = require('_shims');
	var pSlice = Array.prototype.slice;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  this.message = options.message || getMessage(this);
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  try {
	    var ka = shims.keys(a),
	        kb = shims.keys(b),
	        key, i;
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};
	},{"_shims":2,"util":8}],4:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = require('util');

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!util.isNumber(n) || n < 0)
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (util.isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        throw TypeError('Uncaught, unspecified "error" event.');
	      }
	      return false;
	    }
	  }

	  handler = this._events[type];

	  if (util.isUndefined(handler))
	    return false;

	  if (util.isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (util.isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!util.isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              util.isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (util.isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (util.isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!util.isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      console.trace();
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!util.isFunction(listener))
	    throw TypeError('listener must be a function');

	  function g() {
	    this.removeListener(type, g);
	    listener.apply(this, arguments);
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!util.isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (util.isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (util.isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (util.isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (util.isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (util.isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	},{"util":8}],5:[function(require,module,exports){
	var process=require("__browserify_process");// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = require('util');
	var shims = require('_shims');

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (!util.isString(path)) {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(shims.filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = shims.substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(shims.filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(shims.filter(paths, function(p, index) {
	    if (!util.isString(p)) {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	},{"__browserify_process":13,"_shims":2,"util":8}],6:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// Query String Utilities

	var QueryString = exports;
	var util = require('util');
	var shims = require('_shims');
	var Buffer = require('buffer').Buffer;

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}


	function charCode(c) {
	  return c.charCodeAt(0);
	}


	// a safe fast alternative to decodeURIComponent
	QueryString.unescapeBuffer = function(s, decodeSpaces) {
	  var out = new Buffer(s.length);
	  var state = 'CHAR'; // states: CHAR, HEX0, HEX1
	  var n, m, hexchar;

	  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {
	    var c = s.charCodeAt(inIndex);
	    switch (state) {
	      case 'CHAR':
	        switch (c) {
	          case charCode('%'):
	            n = 0;
	            m = 0;
	            state = 'HEX0';
	            break;
	          case charCode('+'):
	            if (decodeSpaces) c = charCode(' ');
	            // pass thru
	          default:
	            out[outIndex++] = c;
	            break;
	        }
	        break;

	      case 'HEX0':
	        state = 'HEX1';
	        hexchar = c;
	        if (charCode('0') <= c && c <= charCode('9')) {
	          n = c - charCode('0');
	        } else if (charCode('a') <= c && c <= charCode('f')) {
	          n = c - charCode('a') + 10;
	        } else if (charCode('A') <= c && c <= charCode('F')) {
	          n = c - charCode('A') + 10;
	        } else {
	          out[outIndex++] = charCode('%');
	          out[outIndex++] = c;
	          state = 'CHAR';
	          break;
	        }
	        break;

	      case 'HEX1':
	        state = 'CHAR';
	        if (charCode('0') <= c && c <= charCode('9')) {
	          m = c - charCode('0');
	        } else if (charCode('a') <= c && c <= charCode('f')) {
	          m = c - charCode('a') + 10;
	        } else if (charCode('A') <= c && c <= charCode('F')) {
	          m = c - charCode('A') + 10;
	        } else {
	          out[outIndex++] = charCode('%');
	          out[outIndex++] = hexchar;
	          out[outIndex++] = c;
	          break;
	        }
	        out[outIndex++] = 16 * n + m;
	        break;
	    }
	  }

	  // TODO support returning arbitrary buffers.

	  return out.slice(0, outIndex - 1);
	};


	QueryString.unescape = function(s, decodeSpaces) {
	  return QueryString.unescapeBuffer(s, decodeSpaces).toString();
	};


	QueryString.escape = function(str) {
	  return encodeURIComponent(str);
	};

	var stringifyPrimitive = function(v) {
	  if (util.isString(v))
	    return v;
	  if (util.isBoolean(v))
	    return v ? 'true' : 'false';
	  if (util.isNumber(v))
	    return isFinite(v) ? v : '';
	  return '';
	};


	QueryString.stringify = QueryString.encode = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (util.isNull(obj)) {
	    obj = undefined;
	  }

	  if (util.isObject(obj)) {
	    return shims.map(shims.keys(obj), function(k) {
	      var ks = QueryString.escape(stringifyPrimitive(k)) + eq;
	      if (util.isArray(obj[k])) {
	        return shims.map(obj[k], function(v) {
	          return ks + QueryString.escape(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + QueryString.escape(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return QueryString.escape(stringifyPrimitive(name)) + eq +
	         QueryString.escape(stringifyPrimitive(obj));
	};

	// Parse a key=val string.
	QueryString.parse = QueryString.decode = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (!util.isString(qs) || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && util.isNumber(options.maxKeys)) {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    try {
	      k = decodeURIComponent(kstr);
	      v = decodeURIComponent(vstr);
	    } catch (e) {
	      k = QueryString.unescape(kstr, true);
	      v = QueryString.unescape(vstr, true);
	    }

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (util.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};
	},{"_shims":2,"buffer":10,"util":8}],7:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = { encode : function (s) { return s } };
	var util = require('util');
	var shims = require('_shims');

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = require('querystring');

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = shims.trim(rest);

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      shims.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && shims.substr(protocol, -1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  shims.forEach(shims.keys(this), function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    shims.forEach(shims.keys(relative), function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      shims.forEach(shims.keys(relative), function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (shims.substr(srcPath.join('/'), -1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	},{"_shims":2,"querystring":6,"util":8}],8:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var shims = require('_shims');

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  shims.forEach(array, function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = shims.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = shims.getOwnPropertyNames(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }

	  shims.forEach(keys, function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }

	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (shims.indexOf(ctx.seen, desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = shims.reduce(output, function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return shims.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) && objectToString(e) === '[object Error]';
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.binarySlice === 'function'
	  ;
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = function(ctor, superCtor) {
	  ctor.super_ = superCtor;
	  ctor.prototype = shims.create(superCtor.prototype, {
	    constructor: {
	      value: ctor,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	};

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = shims.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	},{"_shims":2}],9:[function(require,module,exports){
	exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isBE ? 0 : (nBytes - 1),
	      d = isBE ? 1 : -1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isBE ? (nBytes - 1) : 0,
	      d = isBE ? -1 : 1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

	  buffer[offset + i - d] |= s * 128;
	};

	},{}],10:[function(require,module,exports){
	var assert;
	exports.Buffer = Buffer;
	exports.SlowBuffer = Buffer;
	Buffer.poolSize = 8192;
	exports.INSPECT_MAX_BYTES = 50;

	function stringtrim(str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	}

	function Buffer(subject, encoding, offset) {
	  if(!assert) assert= require('assert');
	  if (!(this instanceof Buffer)) {
	    return new Buffer(subject, encoding, offset);
	  }
	  this.parent = this;
	  this.offset = 0;

	  // Work-around: node's base64 implementation
	  // allows for non-padded strings while base64-js
	  // does not..
	  if (encoding == "base64" && typeof subject == "string") {
	    subject = stringtrim(subject);
	    while (subject.length % 4 != 0) {
	      subject = subject + "="; 
	    }
	  }

	  var type;

	  // Are we slicing?
	  if (typeof offset === 'number') {
	    this.length = coerce(encoding);
	    // slicing works, with limitations (no parent tracking/update)
	    // check https://github.com/toots/buffer-browserify/issues/19
	    for (var i = 0; i < this.length; i++) {
	        this[i] = subject.get(i+offset);
	    }
	  } else {
	    // Find the length
	    switch (type = typeof subject) {
	      case 'number':
	        this.length = coerce(subject);
	        break;

	      case 'string':
	        this.length = Buffer.byteLength(subject, encoding);
	        break;

	      case 'object': // Assume object is an array
	        this.length = coerce(subject.length);
	        break;

	      default:
	        throw new TypeError('First argument needs to be a number, ' +
	                            'array or string.');
	    }

	    // Treat array-ish objects as a byte array.
	    if (isArrayIsh(subject)) {
	      for (var i = 0; i < this.length; i++) {
	        if (subject instanceof Buffer) {
	          this[i] = subject.readUInt8(i);
	        }
	        else {
	          // Round-up subject[i] to a UInt8.
	          // e.g.: ((-432 % 256) + 256) % 256 = (-176 + 256) % 256
	          //                                  = 80
	          this[i] = ((subject[i] % 256) + 256) % 256;
	        }
	      }
	    } else if (type == 'string') {
	      // We are a string
	      this.length = this.write(subject, 0, encoding);
	    } else if (type === 'number') {
	      for (var i = 0; i < this.length; i++) {
	        this[i] = 0;
	      }
	    }
	  }
	}

	Buffer.prototype.get = function get(i) {
	  if (i < 0 || i >= this.length) throw new Error('oob');
	  return this[i];
	};

	Buffer.prototype.set = function set(i, v) {
	  if (i < 0 || i >= this.length) throw new Error('oob');
	  return this[i] = v;
	};

	Buffer.byteLength = function (str, encoding) {
	  switch (encoding || "utf8") {
	    case 'hex':
	      return str.length / 2;

	    case 'utf8':
	    case 'utf-8':
	      return utf8ToBytes(str).length;

	    case 'ascii':
	    case 'binary':
	      return str.length;

	    case 'base64':
	      return base64ToBytes(str).length;

	    default:
	      throw new Error('Unknown encoding');
	  }
	};

	Buffer.prototype.utf8Write = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
	};

	Buffer.prototype.asciiWrite = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
	};

	Buffer.prototype.binaryWrite = Buffer.prototype.asciiWrite;

	Buffer.prototype.base64Write = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
	};

	Buffer.prototype.base64Slice = function (start, end) {
	  var bytes = Array.prototype.slice.apply(this, arguments)
	  return require("base64-js").fromByteArray(bytes);
	};

	Buffer.prototype.utf8Slice = function () {
	  var bytes = Array.prototype.slice.apply(this, arguments);
	  var res = "";
	  var tmp = "";
	  var i = 0;
	  while (i < bytes.length) {
	    if (bytes[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
	      tmp = "";
	    } else
	      tmp += "%" + bytes[i].toString(16);

	    i++;
	  }

	  return res + decodeUtf8Char(tmp);
	}

	Buffer.prototype.asciiSlice = function () {
	  var bytes = Array.prototype.slice.apply(this, arguments);
	  var ret = "";
	  for (var i = 0; i < bytes.length; i++)
	    ret += String.fromCharCode(bytes[i]);
	  return ret;
	}

	Buffer.prototype.binarySlice = Buffer.prototype.asciiSlice;

	Buffer.prototype.inspect = function() {
	  var out = [],
	      len = this.length;
	  for (var i = 0; i < len; i++) {
	    out[i] = toHex(this[i]);
	    if (i == exports.INSPECT_MAX_BYTES) {
	      out[i + 1] = '...';
	      break;
	    }
	  }
	  return '<Buffer ' + out.join(' ') + '>';
	};


	Buffer.prototype.hexSlice = function(start, end) {
	  var len = this.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; i++) {
	    out += toHex(this[i]);
	  }
	  return out;
	};


	Buffer.prototype.toString = function(encoding, start, end) {
	  encoding = String(encoding || 'utf8').toLowerCase();
	  start = +start || 0;
	  if (typeof end == 'undefined') end = this.length;

	  // Fastpath empty strings
	  if (+end == start) {
	    return '';
	  }

	  switch (encoding) {
	    case 'hex':
	      return this.hexSlice(start, end);

	    case 'utf8':
	    case 'utf-8':
	      return this.utf8Slice(start, end);

	    case 'ascii':
	      return this.asciiSlice(start, end);

	    case 'binary':
	      return this.binarySlice(start, end);

	    case 'base64':
	      return this.base64Slice(start, end);

	    case 'ucs2':
	    case 'ucs-2':
	      return this.ucs2Slice(start, end);

	    default:
	      throw new Error('Unknown encoding');
	  }
	};


	Buffer.prototype.hexWrite = function(string, offset, length) {
	  offset = +offset || 0;
	  var remaining = this.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = +length;
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2) {
	    throw new Error('Invalid hex string');
	  }
	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; i++) {
	    var b = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(b)) throw new Error('Invalid hex string');
	    this[offset + i] = b;
	  }
	  Buffer._charsWritten = i * 2;
	  return i;
	};


	Buffer.prototype.write = function(string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length;
	      length = undefined;
	    }
	  } else {  // legacy
	    var swap = encoding;
	    encoding = offset;
	    offset = length;
	    length = swap;
	  }

	  offset = +offset || 0;
	  var remaining = this.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = +length;
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase();

	  switch (encoding) {
	    case 'hex':
	      return this.hexWrite(string, offset, length);

	    case 'utf8':
	    case 'utf-8':
	      return this.utf8Write(string, offset, length);

	    case 'ascii':
	      return this.asciiWrite(string, offset, length);

	    case 'binary':
	      return this.binaryWrite(string, offset, length);

	    case 'base64':
	      return this.base64Write(string, offset, length);

	    case 'ucs2':
	    case 'ucs-2':
	      return this.ucs2Write(string, offset, length);

	    default:
	      throw new Error('Unknown encoding');
	  }
	};

	// slice(start, end)
	function clamp(index, len, defaultValue) {
	  if (typeof index !== 'number') return defaultValue;
	  index = ~~index;  // Coerce to integer.
	  if (index >= len) return len;
	  if (index >= 0) return index;
	  index += len;
	  if (index >= 0) return index;
	  return 0;
	}

	Buffer.prototype.slice = function(start, end) {
	  var len = this.length;
	  start = clamp(start, len, 0);
	  end = clamp(end, len, len);
	  return new Buffer(this, end - start, +start);
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function(target, target_start, start, end) {
	  var source = this;
	  start || (start = 0);
	  if (end === undefined || isNaN(end)) {
	    end = this.length;
	  }
	  target_start || (target_start = 0);

	  if (end < start) throw new Error('sourceEnd < sourceStart');

	  // Copy 0 bytes; we're done
	  if (end === start) return 0;
	  if (target.length == 0 || source.length == 0) return 0;

	  if (target_start < 0 || target_start >= target.length) {
	    throw new Error('targetStart out of bounds');
	  }

	  if (start < 0 || start >= source.length) {
	    throw new Error('sourceStart out of bounds');
	  }

	  if (end < 0 || end > source.length) {
	    throw new Error('sourceEnd out of bounds');
	  }

	  // Are we oob?
	  if (end > this.length) {
	    end = this.length;
	  }

	  if (target.length - target_start < end - start) {
	    end = target.length - target_start + start;
	  }

	  var temp = [];
	  for (var i=start; i<end; i++) {
	    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
	    temp.push(this[i]);
	  }

	  for (var i=target_start; i<target_start+temp.length; i++) {
	    target[i] = temp[i-target_start];
	  }
	};

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill(value, start, end) {
	  value || (value = 0);
	  start || (start = 0);
	  end || (end = this.length);

	  if (typeof value === 'string') {
	    value = value.charCodeAt(0);
	  }
	  if (!(typeof value === 'number') || isNaN(value)) {
	    throw new Error('value is not a number');
	  }

	  if (end < start) throw new Error('end < start');

	  // Fill 0 bytes; we're done
	  if (end === start) return 0;
	  if (this.length == 0) return 0;

	  if (start < 0 || start >= this.length) {
	    throw new Error('start out of bounds');
	  }

	  if (end < 0 || end > this.length) {
	    throw new Error('end out of bounds');
	  }

	  for (var i = start; i < end; i++) {
	    this[i] = value;
	  }
	}

	// Static methods
	Buffer.isBuffer = function isBuffer(b) {
	  return b instanceof Buffer;
	};

	Buffer.concat = function (list, totalLength) {
	  if (!isArray(list)) {
	    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
	      list should be an Array.");
	  }

	  if (list.length === 0) {
	    return new Buffer(0);
	  } else if (list.length === 1) {
	    return list[0];
	  }

	  if (typeof totalLength !== 'number') {
	    totalLength = 0;
	    for (var i = 0; i < list.length; i++) {
	      var buf = list[i];
	      totalLength += buf.length;
	    }
	  }

	  var buffer = new Buffer(totalLength);
	  var pos = 0;
	  for (var i = 0; i < list.length; i++) {
	    var buf = list[i];
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer;
	};

	Buffer.isEncoding = function(encoding) {
	  switch ((encoding + '').toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	    case 'raw':
	      return true;

	    default:
	      return false;
	  }
	};

	// helpers

	function coerce(length) {
	  // Coerce length to a number (possibly NaN), round up
	  // in case it's fractional (e.g. 123.456) then do a
	  // double negate to coerce a NaN to 0. Easy, right?
	  length = ~~Math.ceil(+length);
	  return length < 0 ? 0 : length;
	}

	function isArray(subject) {
	  return (Array.isArray ||
	    function(subject){
	      return {}.toString.apply(subject) == '[object Array]'
	    })
	    (subject)
	}

	function isArrayIsh(subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	         subject && typeof subject === 'object' &&
	         typeof subject.length === 'number';
	}

	function toHex(n) {
	  if (n < 16) return '0' + n.toString(16);
	  return n.toString(16);
	}

	function utf8ToBytes(str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++)
	    if (str.charCodeAt(i) <= 0x7F)
	      byteArray.push(str.charCodeAt(i));
	    else {
	      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
	      for (var j = 0; j < h.length; j++)
	        byteArray.push(parseInt(h[j], 16));
	    }

	  return byteArray;
	}

	function asciiToBytes(str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++ )
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push( str.charCodeAt(i) & 0xFF );

	  return byteArray;
	}

	function base64ToBytes(str) {
	  return require("base64-js").toByteArray(str);
	}

	function blitBuffer(src, dst, offset, length) {
	  var pos, i = 0;
	  while (i < length) {
	    if ((i+offset >= dst.length) || (i >= src.length))
	      break;

	    dst[i + offset] = src[i];
	    i++;
	  }
	  return i;
	}

	function decodeUtf8Char(str) {
	  try {
	    return decodeURIComponent(str);
	  } catch (err) {
	    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
	  }
	}

	// read/write bit-twiddling

	Buffer.prototype.readUInt8 = function(offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return;

	  return buffer[offset];
	};

	function readUInt16(buffer, offset, isBigEndian, noAssert) {
	  var val = 0;


	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return 0;

	  if (isBigEndian) {
	    val = buffer[offset] << 8;
	    if (offset + 1 < buffer.length) {
	      val |= buffer[offset + 1];
	    }
	  } else {
	    val = buffer[offset];
	    if (offset + 1 < buffer.length) {
	      val |= buffer[offset + 1] << 8;
	    }
	  }

	  return val;
	}

	Buffer.prototype.readUInt16LE = function(offset, noAssert) {
	  return readUInt16(this, offset, false, noAssert);
	};

	Buffer.prototype.readUInt16BE = function(offset, noAssert) {
	  return readUInt16(this, offset, true, noAssert);
	};

	function readUInt32(buffer, offset, isBigEndian, noAssert) {
	  var val = 0;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return 0;

	  if (isBigEndian) {
	    if (offset + 1 < buffer.length)
	      val = buffer[offset + 1] << 16;
	    if (offset + 2 < buffer.length)
	      val |= buffer[offset + 2] << 8;
	    if (offset + 3 < buffer.length)
	      val |= buffer[offset + 3];
	    val = val + (buffer[offset] << 24 >>> 0);
	  } else {
	    if (offset + 2 < buffer.length)
	      val = buffer[offset + 2] << 16;
	    if (offset + 1 < buffer.length)
	      val |= buffer[offset + 1] << 8;
	    val |= buffer[offset];
	    if (offset + 3 < buffer.length)
	      val = val + (buffer[offset + 3] << 24 >>> 0);
	  }

	  return val;
	}

	Buffer.prototype.readUInt32LE = function(offset, noAssert) {
	  return readUInt32(this, offset, false, noAssert);
	};

	Buffer.prototype.readUInt32BE = function(offset, noAssert) {
	  return readUInt32(this, offset, true, noAssert);
	};


	/*
	 * Signed integer types, yay team! A reminder on how two's complement actually
	 * works. The first bit is the signed bit, i.e. tells us whether or not the
	 * number should be positive or negative. If the two's complement value is
	 * positive, then we're done, as it's equivalent to the unsigned representation.
	 *
	 * Now if the number is positive, you're pretty much done, you can just leverage
	 * the unsigned translations and return those. Unfortunately, negative numbers
	 * aren't quite that straightforward.
	 *
	 * At first glance, one might be inclined to use the traditional formula to
	 * translate binary numbers between the positive and negative values in two's
	 * complement. (Though it doesn't quite work for the most negative value)
	 * Mainly:
	 *  - invert all the bits
	 *  - add one to the result
	 *
	 * Of course, this doesn't quite work in Javascript. Take for example the value
	 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
	 * course, Javascript will do the following:
	 *
	 * > ~0xff80
	 * -65409
	 *
	 * Whoh there, Javascript, that's not quite right. But wait, according to
	 * Javascript that's perfectly correct. When Javascript ends up seeing the
	 * constant 0xff80, it has no notion that it is actually a signed number. It
	 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
	 * binary negation, it casts it into a signed value, (positive 0xff80). Then
	 * when you perform binary negation on that, it turns it into a negative number.
	 *
	 * Instead, we're going to have to use the following general formula, that works
	 * in a rather Javascript friendly way. I'm glad we don't support this kind of
	 * weird numbering scheme in the kernel.
	 *
	 * (BIT-MAX - (unsigned)val + 1) * -1
	 *
	 * The astute observer, may think that this doesn't make sense for 8-bit numbers
	 * (really it isn't necessary for them). However, when you get 16-bit numbers,
	 * you do. Let's go back to our prior example and see how this will look:
	 *
	 * (0xffff - 0xff80 + 1) * -1
	 * (0x007f + 1) * -1
	 * (0x0080) * -1
	 */
	Buffer.prototype.readInt8 = function(offset, noAssert) {
	  var buffer = this;
	  var neg;

	  if (!noAssert) {
	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return;

	  neg = buffer[offset] & 0x80;
	  if (!neg) {
	    return (buffer[offset]);
	  }

	  return ((0xff - buffer[offset] + 1) * -1);
	};

	function readInt16(buffer, offset, isBigEndian, noAssert) {
	  var neg, val;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  val = readUInt16(buffer, offset, isBigEndian, noAssert);
	  neg = val & 0x8000;
	  if (!neg) {
	    return val;
	  }

	  return (0xffff - val + 1) * -1;
	}

	Buffer.prototype.readInt16LE = function(offset, noAssert) {
	  return readInt16(this, offset, false, noAssert);
	};

	Buffer.prototype.readInt16BE = function(offset, noAssert) {
	  return readInt16(this, offset, true, noAssert);
	};

	function readInt32(buffer, offset, isBigEndian, noAssert) {
	  var neg, val;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  val = readUInt32(buffer, offset, isBigEndian, noAssert);
	  neg = val & 0x80000000;
	  if (!neg) {
	    return (val);
	  }

	  return (0xffffffff - val + 1) * -1;
	}

	Buffer.prototype.readInt32LE = function(offset, noAssert) {
	  return readInt32(this, offset, false, noAssert);
	};

	Buffer.prototype.readInt32BE = function(offset, noAssert) {
	  return readInt32(this, offset, true, noAssert);
	};

	function readFloat(buffer, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
	      23, 4);
	}

	Buffer.prototype.readFloatLE = function(offset, noAssert) {
	  return readFloat(this, offset, false, noAssert);
	};

	Buffer.prototype.readFloatBE = function(offset, noAssert) {
	  return readFloat(this, offset, true, noAssert);
	};

	function readDouble(buffer, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset + 7 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
	      52, 8);
	}

	Buffer.prototype.readDoubleLE = function(offset, noAssert) {
	  return readDouble(this, offset, false, noAssert);
	};

	Buffer.prototype.readDoubleBE = function(offset, noAssert) {
	  return readDouble(this, offset, true, noAssert);
	};


	/*
	 * We have to make sure that the value is a valid integer. This means that it is
	 * non-negative. It has no fractional component and that it does not exceed the
	 * maximum allowed value.
	 *
	 *      value           The number to check for validity
	 *
	 *      max             The maximum value
	 */
	function verifuint(value, max) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value >= 0,
	      'specified a negative value for writing an unsigned value');

	  assert.ok(value <= max, 'value is larger than maximum value for type');

	  assert.ok(Math.floor(value) === value, 'value has a fractional component');
	}

	Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xff);
	  }

	  if (offset < buffer.length) {
	    buffer[offset] = value;
	  }
	};

	function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xffff);
	  }

	  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
	    buffer[offset + i] =
	        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
	            (isBigEndian ? 1 - i : i) * 8;
	  }

	}

	Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
	  writeUInt16(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
	  writeUInt16(this, value, offset, true, noAssert);
	};

	function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xffffffff);
	  }

	  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
	    buffer[offset + i] =
	        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
	  writeUInt32(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
	  writeUInt32(this, value, offset, true, noAssert);
	};


	/*
	 * We now move onto our friends in the signed number category. Unlike unsigned
	 * numbers, we're going to have to worry a bit more about how we put values into
	 * arrays. Since we are only worrying about signed 32-bit values, we're in
	 * slightly better shape. Unfortunately, we really can't do our favorite binary
	 * & in this system. It really seems to do the wrong thing. For example:
	 *
	 * > -32 & 0xff
	 * 224
	 *
	 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
	 * this aren't treated as a signed number. Ultimately a bad thing.
	 *
	 * What we're going to want to do is basically create the unsigned equivalent of
	 * our representation and pass that off to the wuint* functions. To do that
	 * we're going to do the following:
	 *
	 *  - if the value is positive
	 *      we can pass it directly off to the equivalent wuint
	 *  - if the value is negative
	 *      we do the following computation:
	 *         mb + val + 1, where
	 *         mb   is the maximum unsigned value in that byte size
	 *         val  is the Javascript negative integer
	 *
	 *
	 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
	 * you do out the computations:
	 *
	 * 0xffff - 128 + 1
	 * 0xffff - 127
	 * 0xff80
	 *
	 * You can then encode this value as the signed version. This is really rather
	 * hacky, but it should work and get the job done which is our goal here.
	 */

	/*
	 * A series of checks to make sure we actually have a signed 32-bit number
	 */
	function verifsint(value, max, min) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value <= max, 'value larger than maximum allowed value');

	  assert.ok(value >= min, 'value smaller than minimum allowed value');

	  assert.ok(Math.floor(value) === value, 'value has a fractional component');
	}

	function verifIEEE754(value, max, min) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value <= max, 'value larger than maximum allowed value');

	  assert.ok(value >= min, 'value smaller than minimum allowed value');
	}

	Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7f, -0x80);
	  }

	  if (value >= 0) {
	    buffer.writeUInt8(value, offset, noAssert);
	  } else {
	    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
	  }
	};

	function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7fff, -0x8000);
	  }

	  if (value >= 0) {
	    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
	  } else {
	    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
	  }
	}

	Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
	  writeInt16(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
	  writeInt16(this, value, offset, true, noAssert);
	};

	function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7fffffff, -0x80000000);
	  }

	  if (value >= 0) {
	    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
	  } else {
	    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
	  }
	}

	Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
	  writeInt32(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
	  writeInt32(this, value, offset, true, noAssert);
	};

	function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }

	  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
	      23, 4);
	}

	Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
	  writeFloat(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
	  writeFloat(this, value, offset, true, noAssert);
	};

	function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 7 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }

	  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
	      52, 8);
	}

	Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
	  writeDouble(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
	  writeDouble(this, value, offset, true, noAssert);
	};

	},{"./buffer_ieee754":9,"assert":3,"base64-js":11}],11:[function(require,module,exports){
	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

	},{}],12:[function(require,module,exports){
	require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isBE ? 0 : (nBytes - 1),
	      d = isBE ? 1 : -1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isBE ? (nBytes - 1) : 0,
	      d = isBE ? -1 : 1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

	  buffer[offset + i - d] |= s * 128;
	};

	},{}],"q9TxCC":[function(require,module,exports){
	var assert;
	exports.Buffer = Buffer;
	exports.SlowBuffer = Buffer;
	Buffer.poolSize = 8192;
	exports.INSPECT_MAX_BYTES = 50;

	function stringtrim(str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	}

	function Buffer(subject, encoding, offset) {
	  if(!assert) assert= require('assert');
	  if (!(this instanceof Buffer)) {
	    return new Buffer(subject, encoding, offset);
	  }
	  this.parent = this;
	  this.offset = 0;

	  // Work-around: node's base64 implementation
	  // allows for non-padded strings while base64-js
	  // does not..
	  if (encoding == "base64" && typeof subject == "string") {
	    subject = stringtrim(subject);
	    while (subject.length % 4 != 0) {
	      subject = subject + "="; 
	    }
	  }

	  var type;

	  // Are we slicing?
	  if (typeof offset === 'number') {
	    this.length = coerce(encoding);
	    // slicing works, with limitations (no parent tracking/update)
	    // check https://github.com/toots/buffer-browserify/issues/19
	    for (var i = 0; i < this.length; i++) {
	        this[i] = subject.get(i+offset);
	    }
	  } else {
	    // Find the length
	    switch (type = typeof subject) {
	      case 'number':
	        this.length = coerce(subject);
	        break;

	      case 'string':
	        this.length = Buffer.byteLength(subject, encoding);
	        break;

	      case 'object': // Assume object is an array
	        this.length = coerce(subject.length);
	        break;

	      default:
	        throw new Error('First argument needs to be a number, ' +
	                        'array or string.');
	    }

	    // Treat array-ish objects as a byte array.
	    if (isArrayIsh(subject)) {
	      for (var i = 0; i < this.length; i++) {
	        if (subject instanceof Buffer) {
	          this[i] = subject.readUInt8(i);
	        }
	        else {
	          this[i] = subject[i];
	        }
	      }
	    } else if (type == 'string') {
	      // We are a string
	      this.length = this.write(subject, 0, encoding);
	    } else if (type === 'number') {
	      for (var i = 0; i < this.length; i++) {
	        this[i] = 0;
	      }
	    }
	  }
	}

	Buffer.prototype.get = function get(i) {
	  if (i < 0 || i >= this.length) throw new Error('oob');
	  return this[i];
	};

	Buffer.prototype.set = function set(i, v) {
	  if (i < 0 || i >= this.length) throw new Error('oob');
	  return this[i] = v;
	};

	Buffer.byteLength = function (str, encoding) {
	  switch (encoding || "utf8") {
	    case 'hex':
	      return str.length / 2;

	    case 'utf8':
	    case 'utf-8':
	      return utf8ToBytes(str).length;

	    case 'ascii':
	    case 'binary':
	      return str.length;

	    case 'base64':
	      return base64ToBytes(str).length;

	    default:
	      throw new Error('Unknown encoding');
	  }
	};

	Buffer.prototype.utf8Write = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
	};

	Buffer.prototype.asciiWrite = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
	};

	Buffer.prototype.binaryWrite = Buffer.prototype.asciiWrite;

	Buffer.prototype.base64Write = function (string, offset, length) {
	  var bytes, pos;
	  return Buffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
	};

	Buffer.prototype.base64Slice = function (start, end) {
	  var bytes = Array.prototype.slice.apply(this, arguments)
	  return require("base64-js").fromByteArray(bytes);
	};

	Buffer.prototype.utf8Slice = function () {
	  var bytes = Array.prototype.slice.apply(this, arguments);
	  var res = "";
	  var tmp = "";
	  var i = 0;
	  while (i < bytes.length) {
	    if (bytes[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
	      tmp = "";
	    } else
	      tmp += "%" + bytes[i].toString(16);

	    i++;
	  }

	  return res + decodeUtf8Char(tmp);
	}

	Buffer.prototype.asciiSlice = function () {
	  var bytes = Array.prototype.slice.apply(this, arguments);
	  var ret = "";
	  for (var i = 0; i < bytes.length; i++)
	    ret += String.fromCharCode(bytes[i]);
	  return ret;
	}

	Buffer.prototype.binarySlice = Buffer.prototype.asciiSlice;

	Buffer.prototype.inspect = function() {
	  var out = [],
	      len = this.length;
	  for (var i = 0; i < len; i++) {
	    out[i] = toHex(this[i]);
	    if (i == exports.INSPECT_MAX_BYTES) {
	      out[i + 1] = '...';
	      break;
	    }
	  }
	  return '<Buffer ' + out.join(' ') + '>';
	};


	Buffer.prototype.hexSlice = function(start, end) {
	  var len = this.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; i++) {
	    out += toHex(this[i]);
	  }
	  return out;
	};


	Buffer.prototype.toString = function(encoding, start, end) {
	  encoding = String(encoding || 'utf8').toLowerCase();
	  start = +start || 0;
	  if (typeof end == 'undefined') end = this.length;

	  // Fastpath empty strings
	  if (+end == start) {
	    return '';
	  }

	  switch (encoding) {
	    case 'hex':
	      return this.hexSlice(start, end);

	    case 'utf8':
	    case 'utf-8':
	      return this.utf8Slice(start, end);

	    case 'ascii':
	      return this.asciiSlice(start, end);

	    case 'binary':
	      return this.binarySlice(start, end);

	    case 'base64':
	      return this.base64Slice(start, end);

	    case 'ucs2':
	    case 'ucs-2':
	      return this.ucs2Slice(start, end);

	    default:
	      throw new Error('Unknown encoding');
	  }
	};


	Buffer.prototype.hexWrite = function(string, offset, length) {
	  offset = +offset || 0;
	  var remaining = this.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = +length;
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2) {
	    throw new Error('Invalid hex string');
	  }
	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; i++) {
	    var byte = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(byte)) throw new Error('Invalid hex string');
	    this[offset + i] = byte;
	  }
	  Buffer._charsWritten = i * 2;
	  return i;
	};


	Buffer.prototype.write = function(string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length;
	      length = undefined;
	    }
	  } else {  // legacy
	    var swap = encoding;
	    encoding = offset;
	    offset = length;
	    length = swap;
	  }

	  offset = +offset || 0;
	  var remaining = this.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = +length;
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase();

	  switch (encoding) {
	    case 'hex':
	      return this.hexWrite(string, offset, length);

	    case 'utf8':
	    case 'utf-8':
	      return this.utf8Write(string, offset, length);

	    case 'ascii':
	      return this.asciiWrite(string, offset, length);

	    case 'binary':
	      return this.binaryWrite(string, offset, length);

	    case 'base64':
	      return this.base64Write(string, offset, length);

	    case 'ucs2':
	    case 'ucs-2':
	      return this.ucs2Write(string, offset, length);

	    default:
	      throw new Error('Unknown encoding');
	  }
	};

	// slice(start, end)
	function clamp(index, len, defaultValue) {
	  if (typeof index !== 'number') return defaultValue;
	  index = ~~index;  // Coerce to integer.
	  if (index >= len) return len;
	  if (index >= 0) return index;
	  index += len;
	  if (index >= 0) return index;
	  return 0;
	}

	Buffer.prototype.slice = function(start, end) {
	  var len = this.length;
	  start = clamp(start, len, 0);
	  end = clamp(end, len, len);
	  return new Buffer(this, end - start, +start);
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function(target, target_start, start, end) {
	  var source = this;
	  start || (start = 0);
	  if (end === undefined || isNaN(end)) {
	    end = this.length;
	  }
	  target_start || (target_start = 0);

	  if (end < start) throw new Error('sourceEnd < sourceStart');

	  // Copy 0 bytes; we're done
	  if (end === start) return 0;
	  if (target.length == 0 || source.length == 0) return 0;

	  if (target_start < 0 || target_start >= target.length) {
	    throw new Error('targetStart out of bounds');
	  }

	  if (start < 0 || start >= source.length) {
	    throw new Error('sourceStart out of bounds');
	  }

	  if (end < 0 || end > source.length) {
	    throw new Error('sourceEnd out of bounds');
	  }

	  // Are we oob?
	  if (end > this.length) {
	    end = this.length;
	  }

	  if (target.length - target_start < end - start) {
	    end = target.length - target_start + start;
	  }

	  var temp = [];
	  for (var i=start; i<end; i++) {
	    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
	    temp.push(this[i]);
	  }

	  for (var i=target_start; i<target_start+temp.length; i++) {
	    target[i] = temp[i-target_start];
	  }
	};

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill(value, start, end) {
	  value || (value = 0);
	  start || (start = 0);
	  end || (end = this.length);

	  if (typeof value === 'string') {
	    value = value.charCodeAt(0);
	  }
	  if (!(typeof value === 'number') || isNaN(value)) {
	    throw new Error('value is not a number');
	  }

	  if (end < start) throw new Error('end < start');

	  // Fill 0 bytes; we're done
	  if (end === start) return 0;
	  if (this.length == 0) return 0;

	  if (start < 0 || start >= this.length) {
	    throw new Error('start out of bounds');
	  }

	  if (end < 0 || end > this.length) {
	    throw new Error('end out of bounds');
	  }

	  for (var i = start; i < end; i++) {
	    this[i] = value;
	  }
	}

	// Static methods
	Buffer.isBuffer = function isBuffer(b) {
	  return b instanceof Buffer || b instanceof Buffer;
	};

	Buffer.concat = function (list, totalLength) {
	  if (!isArray(list)) {
	    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
	      list should be an Array.");
	  }

	  if (list.length === 0) {
	    return new Buffer(0);
	  } else if (list.length === 1) {
	    return list[0];
	  }

	  if (typeof totalLength !== 'number') {
	    totalLength = 0;
	    for (var i = 0; i < list.length; i++) {
	      var buf = list[i];
	      totalLength += buf.length;
	    }
	  }

	  var buffer = new Buffer(totalLength);
	  var pos = 0;
	  for (var i = 0; i < list.length; i++) {
	    var buf = list[i];
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer;
	};

	Buffer.isEncoding = function(encoding) {
	  switch ((encoding + '').toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	    case 'raw':
	      return true;

	    default:
	      return false;
	  }
	};

	// helpers

	function coerce(length) {
	  // Coerce length to a number (possibly NaN), round up
	  // in case it's fractional (e.g. 123.456) then do a
	  // double negate to coerce a NaN to 0. Easy, right?
	  length = ~~Math.ceil(+length);
	  return length < 0 ? 0 : length;
	}

	function isArray(subject) {
	  return (Array.isArray ||
	    function(subject){
	      return {}.toString.apply(subject) == '[object Array]'
	    })
	    (subject)
	}

	function isArrayIsh(subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	         subject && typeof subject === 'object' &&
	         typeof subject.length === 'number';
	}

	function toHex(n) {
	  if (n < 16) return '0' + n.toString(16);
	  return n.toString(16);
	}

	function utf8ToBytes(str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++)
	    if (str.charCodeAt(i) <= 0x7F)
	      byteArray.push(str.charCodeAt(i));
	    else {
	      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
	      for (var j = 0; j < h.length; j++)
	        byteArray.push(parseInt(h[j], 16));
	    }

	  return byteArray;
	}

	function asciiToBytes(str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++ )
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push( str.charCodeAt(i) & 0xFF );

	  return byteArray;
	}

	function base64ToBytes(str) {
	  return require("base64-js").toByteArray(str);
	}

	function blitBuffer(src, dst, offset, length) {
	  var pos, i = 0;
	  while (i < length) {
	    if ((i+offset >= dst.length) || (i >= src.length))
	      break;

	    dst[i + offset] = src[i];
	    i++;
	  }
	  return i;
	}

	function decodeUtf8Char(str) {
	  try {
	    return decodeURIComponent(str);
	  } catch (err) {
	    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
	  }
	}

	// read/write bit-twiddling

	Buffer.prototype.readUInt8 = function(offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return;

	  return buffer[offset];
	};

	function readUInt16(buffer, offset, isBigEndian, noAssert) {
	  var val = 0;


	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return 0;

	  if (isBigEndian) {
	    val = buffer[offset] << 8;
	    if (offset + 1 < buffer.length) {
	      val |= buffer[offset + 1];
	    }
	  } else {
	    val = buffer[offset];
	    if (offset + 1 < buffer.length) {
	      val |= buffer[offset + 1] << 8;
	    }
	  }

	  return val;
	}

	Buffer.prototype.readUInt16LE = function(offset, noAssert) {
	  return readUInt16(this, offset, false, noAssert);
	};

	Buffer.prototype.readUInt16BE = function(offset, noAssert) {
	  return readUInt16(this, offset, true, noAssert);
	};

	function readUInt32(buffer, offset, isBigEndian, noAssert) {
	  var val = 0;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return 0;

	  if (isBigEndian) {
	    if (offset + 1 < buffer.length)
	      val = buffer[offset + 1] << 16;
	    if (offset + 2 < buffer.length)
	      val |= buffer[offset + 2] << 8;
	    if (offset + 3 < buffer.length)
	      val |= buffer[offset + 3];
	    val = val + (buffer[offset] << 24 >>> 0);
	  } else {
	    if (offset + 2 < buffer.length)
	      val = buffer[offset + 2] << 16;
	    if (offset + 1 < buffer.length)
	      val |= buffer[offset + 1] << 8;
	    val |= buffer[offset];
	    if (offset + 3 < buffer.length)
	      val = val + (buffer[offset + 3] << 24 >>> 0);
	  }

	  return val;
	}

	Buffer.prototype.readUInt32LE = function(offset, noAssert) {
	  return readUInt32(this, offset, false, noAssert);
	};

	Buffer.prototype.readUInt32BE = function(offset, noAssert) {
	  return readUInt32(this, offset, true, noAssert);
	};


	/*
	 * Signed integer types, yay team! A reminder on how two's complement actually
	 * works. The first bit is the signed bit, i.e. tells us whether or not the
	 * number should be positive or negative. If the two's complement value is
	 * positive, then we're done, as it's equivalent to the unsigned representation.
	 *
	 * Now if the number is positive, you're pretty much done, you can just leverage
	 * the unsigned translations and return those. Unfortunately, negative numbers
	 * aren't quite that straightforward.
	 *
	 * At first glance, one might be inclined to use the traditional formula to
	 * translate binary numbers between the positive and negative values in two's
	 * complement. (Though it doesn't quite work for the most negative value)
	 * Mainly:
	 *  - invert all the bits
	 *  - add one to the result
	 *
	 * Of course, this doesn't quite work in Javascript. Take for example the value
	 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
	 * course, Javascript will do the following:
	 *
	 * > ~0xff80
	 * -65409
	 *
	 * Whoh there, Javascript, that's not quite right. But wait, according to
	 * Javascript that's perfectly correct. When Javascript ends up seeing the
	 * constant 0xff80, it has no notion that it is actually a signed number. It
	 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
	 * binary negation, it casts it into a signed value, (positive 0xff80). Then
	 * when you perform binary negation on that, it turns it into a negative number.
	 *
	 * Instead, we're going to have to use the following general formula, that works
	 * in a rather Javascript friendly way. I'm glad we don't support this kind of
	 * weird numbering scheme in the kernel.
	 *
	 * (BIT-MAX - (unsigned)val + 1) * -1
	 *
	 * The astute observer, may think that this doesn't make sense for 8-bit numbers
	 * (really it isn't necessary for them). However, when you get 16-bit numbers,
	 * you do. Let's go back to our prior example and see how this will look:
	 *
	 * (0xffff - 0xff80 + 1) * -1
	 * (0x007f + 1) * -1
	 * (0x0080) * -1
	 */
	Buffer.prototype.readInt8 = function(offset, noAssert) {
	  var buffer = this;
	  var neg;

	  if (!noAssert) {
	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  if (offset >= buffer.length) return;

	  neg = buffer[offset] & 0x80;
	  if (!neg) {
	    return (buffer[offset]);
	  }

	  return ((0xff - buffer[offset] + 1) * -1);
	};

	function readInt16(buffer, offset, isBigEndian, noAssert) {
	  var neg, val;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  val = readUInt16(buffer, offset, isBigEndian, noAssert);
	  neg = val & 0x8000;
	  if (!neg) {
	    return val;
	  }

	  return (0xffff - val + 1) * -1;
	}

	Buffer.prototype.readInt16LE = function(offset, noAssert) {
	  return readInt16(this, offset, false, noAssert);
	};

	Buffer.prototype.readInt16BE = function(offset, noAssert) {
	  return readInt16(this, offset, true, noAssert);
	};

	function readInt32(buffer, offset, isBigEndian, noAssert) {
	  var neg, val;

	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  val = readUInt32(buffer, offset, isBigEndian, noAssert);
	  neg = val & 0x80000000;
	  if (!neg) {
	    return (val);
	  }

	  return (0xffffffff - val + 1) * -1;
	}

	Buffer.prototype.readInt32LE = function(offset, noAssert) {
	  return readInt32(this, offset, false, noAssert);
	};

	Buffer.prototype.readInt32BE = function(offset, noAssert) {
	  return readInt32(this, offset, true, noAssert);
	};

	function readFloat(buffer, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
	      23, 4);
	}

	Buffer.prototype.readFloatLE = function(offset, noAssert) {
	  return readFloat(this, offset, false, noAssert);
	};

	Buffer.prototype.readFloatBE = function(offset, noAssert) {
	  return readFloat(this, offset, true, noAssert);
	};

	function readDouble(buffer, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset + 7 < buffer.length,
	        'Trying to read beyond buffer length');
	  }

	  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
	      52, 8);
	}

	Buffer.prototype.readDoubleLE = function(offset, noAssert) {
	  return readDouble(this, offset, false, noAssert);
	};

	Buffer.prototype.readDoubleBE = function(offset, noAssert) {
	  return readDouble(this, offset, true, noAssert);
	};


	/*
	 * We have to make sure that the value is a valid integer. This means that it is
	 * non-negative. It has no fractional component and that it does not exceed the
	 * maximum allowed value.
	 *
	 *      value           The number to check for validity
	 *
	 *      max             The maximum value
	 */
	function verifuint(value, max) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value >= 0,
	      'specified a negative value for writing an unsigned value');

	  assert.ok(value <= max, 'value is larger than maximum value for type');

	  assert.ok(Math.floor(value) === value, 'value has a fractional component');
	}

	Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xff);
	  }

	  if (offset < buffer.length) {
	    buffer[offset] = value;
	  }
	};

	function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xffff);
	  }

	  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
	    buffer[offset + i] =
	        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
	            (isBigEndian ? 1 - i : i) * 8;
	  }

	}

	Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
	  writeUInt16(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
	  writeUInt16(this, value, offset, true, noAssert);
	};

	function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'trying to write beyond buffer length');

	    verifuint(value, 0xffffffff);
	  }

	  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
	    buffer[offset + i] =
	        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
	  writeUInt32(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
	  writeUInt32(this, value, offset, true, noAssert);
	};


	/*
	 * We now move onto our friends in the signed number category. Unlike unsigned
	 * numbers, we're going to have to worry a bit more about how we put values into
	 * arrays. Since we are only worrying about signed 32-bit values, we're in
	 * slightly better shape. Unfortunately, we really can't do our favorite binary
	 * & in this system. It really seems to do the wrong thing. For example:
	 *
	 * > -32 & 0xff
	 * 224
	 *
	 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
	 * this aren't treated as a signed number. Ultimately a bad thing.
	 *
	 * What we're going to want to do is basically create the unsigned equivalent of
	 * our representation and pass that off to the wuint* functions. To do that
	 * we're going to do the following:
	 *
	 *  - if the value is positive
	 *      we can pass it directly off to the equivalent wuint
	 *  - if the value is negative
	 *      we do the following computation:
	 *         mb + val + 1, where
	 *         mb   is the maximum unsigned value in that byte size
	 *         val  is the Javascript negative integer
	 *
	 *
	 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
	 * you do out the computations:
	 *
	 * 0xffff - 128 + 1
	 * 0xffff - 127
	 * 0xff80
	 *
	 * You can then encode this value as the signed version. This is really rather
	 * hacky, but it should work and get the job done which is our goal here.
	 */

	/*
	 * A series of checks to make sure we actually have a signed 32-bit number
	 */
	function verifsint(value, max, min) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value <= max, 'value larger than maximum allowed value');

	  assert.ok(value >= min, 'value smaller than minimum allowed value');

	  assert.ok(Math.floor(value) === value, 'value has a fractional component');
	}

	function verifIEEE754(value, max, min) {
	  assert.ok(typeof (value) == 'number',
	      'cannot write a non-number as a number');

	  assert.ok(value <= max, 'value larger than maximum allowed value');

	  assert.ok(value >= min, 'value smaller than minimum allowed value');
	}

	Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
	  var buffer = this;

	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7f, -0x80);
	  }

	  if (value >= 0) {
	    buffer.writeUInt8(value, offset, noAssert);
	  } else {
	    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
	  }
	};

	function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 1 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7fff, -0x8000);
	  }

	  if (value >= 0) {
	    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
	  } else {
	    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
	  }
	}

	Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
	  writeInt16(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
	  writeInt16(this, value, offset, true, noAssert);
	};

	function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifsint(value, 0x7fffffff, -0x80000000);
	  }

	  if (value >= 0) {
	    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
	  } else {
	    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
	  }
	}

	Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
	  writeInt32(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
	  writeInt32(this, value, offset, true, noAssert);
	};

	function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 3 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }

	  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
	      23, 4);
	}

	Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
	  writeFloat(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
	  writeFloat(this, value, offset, true, noAssert);
	};

	function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
	  if (!noAssert) {
	    assert.ok(value !== undefined && value !== null,
	        'missing value');

	    assert.ok(typeof (isBigEndian) === 'boolean',
	        'missing or invalid endian');

	    assert.ok(offset !== undefined && offset !== null,
	        'missing offset');

	    assert.ok(offset + 7 < buffer.length,
	        'Trying to write beyond buffer length');

	    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }

	  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
	      52, 8);
	}

	Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
	  writeDouble(this, value, offset, false, noAssert);
	};

	Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
	  writeDouble(this, value, offset, true, noAssert);
	};

	},{"./buffer_ieee754":1,"assert":6,"base64-js":4}],"buffer-browserify":[function(require,module,exports){
	module.exports=require('q9TxCC');
	},{}],4:[function(require,module,exports){
	(function (exports) {
		'use strict';

		var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

		function b64ToByteArray(b64) {
			var i, j, l, tmp, placeHolders, arr;
		
			if (b64.length % 4 > 0) {
				throw 'Invalid string. Length must be a multiple of 4';
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			placeHolders = b64.indexOf('=');
			placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

			// base64 is 4/3 + up to two characters of the original data
			arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length;

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
				arr.push((tmp & 0xFF0000) >> 16);
				arr.push((tmp & 0xFF00) >> 8);
				arr.push(tmp & 0xFF);
			}

			if (placeHolders === 2) {
				tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
				arr.push(tmp & 0xFF);
			} else if (placeHolders === 1) {
				tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
				arr.push((tmp >> 8) & 0xFF);
				arr.push(tmp & 0xFF);
			}

			return arr;
		}

		function uint8ToBase64(uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length;

			function tripletToBase64 (num) {
				return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
			};

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
				output += tripletToBase64(temp);
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1];
					output += lookup[temp >> 2];
					output += lookup[(temp << 4) & 0x3F];
					output += '==';
					break;
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
					output += lookup[temp >> 10];
					output += lookup[(temp >> 4) & 0x3F];
					output += lookup[(temp << 2) & 0x3F];
					output += '=';
					break;
			}

			return output;
		}

		module.exports.toByteArray = b64ToByteArray;
		module.exports.fromByteArray = uint8ToBase64;
	}());

	},{}],5:[function(require,module,exports){


	//
	// The shims in this file are not fully implemented shims for the ES5
	// features, but do work for the particular usecases there is in
	// the other modules.
	//

	var toString = Object.prototype.toString;
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	// Array.isArray is supported in IE9
	function isArray(xs) {
	  return toString.call(xs) === '[object Array]';
	}
	exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

	// Array.prototype.indexOf is supported in IE9
	exports.indexOf = function indexOf(xs, x) {
	  if (xs.indexOf) return xs.indexOf(x);
	  for (var i = 0; i < xs.length; i++) {
	    if (x === xs[i]) return i;
	  }
	  return -1;
	};

	// Array.prototype.filter is supported in IE9
	exports.filter = function filter(xs, fn) {
	  if (xs.filter) return xs.filter(fn);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    if (fn(xs[i], i, xs)) res.push(xs[i]);
	  }
	  return res;
	};

	// Array.prototype.forEach is supported in IE9
	exports.forEach = function forEach(xs, fn, self) {
	  if (xs.forEach) return xs.forEach(fn, self);
	  for (var i = 0; i < xs.length; i++) {
	    fn.call(self, xs[i], i, xs);
	  }
	};

	// Array.prototype.map is supported in IE9
	exports.map = function map(xs, fn) {
	  if (xs.map) return xs.map(fn);
	  var out = new Array(xs.length);
	  for (var i = 0; i < xs.length; i++) {
	    out[i] = fn(xs[i], i, xs);
	  }
	  return out;
	};

	// Array.prototype.reduce is supported in IE9
	exports.reduce = function reduce(array, callback, opt_initialValue) {
	  if (array.reduce) return array.reduce(callback, opt_initialValue);
	  var value, isValueSet = false;

	  if (2 < arguments.length) {
	    value = opt_initialValue;
	    isValueSet = true;
	  }
	  for (var i = 0, l = array.length; l > i; ++i) {
	    if (array.hasOwnProperty(i)) {
	      if (isValueSet) {
	        value = callback(value, array[i], i, array);
	      }
	      else {
	        value = array[i];
	        isValueSet = true;
	      }
	    }
	  }

	  return value;
	};

	// String.prototype.substr - negative index don't work in IE8
	if ('ab'.substr(-1) !== 'b') {
	  exports.substr = function (str, start, length) {
	    // did we get a negative start, calculate how much it is from the beginning of the string
	    if (start < 0) start = str.length + start;

	    // call the original function
	    return str.substr(start, length);
	  };
	} else {
	  exports.substr = function (str, start, length) {
	    return str.substr(start, length);
	  };
	}

	// String.prototype.trim is supported in IE9
	exports.trim = function (str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	};

	// Function.prototype.bind is supported in IE9
	exports.bind = function () {
	  var args = Array.prototype.slice.call(arguments);
	  var fn = args.shift();
	  if (fn.bind) return fn.bind.apply(fn, args);
	  var self = args.shift();
	  return function () {
	    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
	  };
	};

	// Object.create is supported in IE9
	function create(prototype, properties) {
	  var object;
	  if (prototype === null) {
	    object = { '__proto__' : null };
	  }
	  else {
	    if (typeof prototype !== 'object') {
	      throw new TypeError(
	        'typeof prototype[' + (typeof prototype) + '] != \'object\''
	      );
	    }
	    var Type = function () {};
	    Type.prototype = prototype;
	    object = new Type();
	    object.__proto__ = prototype;
	  }
	  if (typeof properties !== 'undefined' && Object.defineProperties) {
	    Object.defineProperties(object, properties);
	  }
	  return object;
	}
	exports.create = typeof Object.create === 'function' ? Object.create : create;

	// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
	// they do show a description and number property on Error objects
	function notObject(object) {
	  return ((typeof object != "object" && typeof object != "function") || object === null);
	}

	function keysShim(object) {
	  if (notObject(object)) {
	    throw new TypeError("Object.keys called on a non-object");
	  }

	  var result = [];
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result.push(name);
	    }
	  }
	  return result;
	}

	// getOwnPropertyNames is almost the same as Object.keys one key feature
	//  is that it returns hidden properties, since that can't be implemented,
	//  this feature gets reduced so it just shows the length property on arrays
	function propertyShim(object) {
	  if (notObject(object)) {
	    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
	  }

	  var result = keysShim(object);
	  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
	    result.push('length');
	  }
	  return result;
	}

	var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
	var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
	  Object.getOwnPropertyNames : propertyShim;

	if (new Error().hasOwnProperty('description')) {
	  var ERROR_PROPERTY_FILTER = function (obj, array) {
	    if (toString.call(obj) === '[object Error]') {
	      array = exports.filter(array, function (name) {
	        return name !== 'description' && name !== 'number' && name !== 'message';
	      });
	    }
	    return array;
	  };

	  exports.keys = function (object) {
	    return ERROR_PROPERTY_FILTER(object, keys(object));
	  };
	  exports.getOwnPropertyNames = function (object) {
	    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
	  };
	} else {
	  exports.keys = keys;
	  exports.getOwnPropertyNames = getOwnPropertyNames;
	}

	// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
	function valueObject(value, key) {
	  return { value: value[key] };
	}

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
	  try {
	    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
	    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	  } catch (e) {
	    // IE8 dom element issue - use a try catch and default to valueObject
	    exports.getOwnPropertyDescriptor = function (value, key) {
	      try {
	        return Object.getOwnPropertyDescriptor(value, key);
	      } catch (e) {
	        return valueObject(value, key);
	      }
	    };
	  }
	} else {
	  exports.getOwnPropertyDescriptor = valueObject;
	}

	},{}],6:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// UTILITY
	var util = require('util');
	var shims = require('_shims');
	var pSlice = Array.prototype.slice;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  this.message = options.message || getMessage(this);
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  try {
	    var ka = shims.keys(a),
	        kb = shims.keys(b),
	        key, i;
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};
	},{"_shims":5,"util":7}],7:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var shims = require('_shims');

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  shims.forEach(array, function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = shims.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = shims.getOwnPropertyNames(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }

	  shims.forEach(keys, function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }

	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (shims.indexOf(ctx.seen, desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = shims.reduce(output, function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return shims.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) && objectToString(e) === '[object Error]';
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return arg instanceof Buffer;
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = function(ctor, superCtor) {
	  ctor.super_ = superCtor;
	  ctor.prototype = shims.create(superCtor.prototype, {
	    constructor: {
	      value: ctor,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	};

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = shims.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	},{"_shims":5}]},{},[])
	;;module.exports=require("buffer-browserify")

	},{}],13:[function(require,module,exports){
	// shim for using process in browser

	var process = module.exports = {};

	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;

	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }

	    if (canPost) {
	        var queue = [];
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);

	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }

	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	}

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};

	},{}],14:[function(require,module,exports){
	var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash compat -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to fix the JScript `[[DontEnum]]` bug. */
	  var shadowProps = [
	    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	    'toLocaleString', 'toString', 'valueOf'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  var isHostObject = (function() {
	    try {
	      Object({ 'toString': 0 } + '');
	    } catch(e) {
	      return function() { return false; };
	    }
	    return function(value) {
	      // IE < 9 presents many host objects as `Object` objects that can coerce
	      // to strings despite having improperly defined `toString` methods.
	      return typeof value.toString != 'function' && typeof (value + '') == 'string';
	    };
	  }());

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        errorProto = Error.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to lookup a type array constructors by `toStringTag`. */
	    var ctorByTag = {};
	    ctorByTag[float32Tag] = context.Float32Array;
	    ctorByTag[float64Tag] = context.Float64Array;
	    ctorByTag[int8Tag] = context.Int8Array;
	    ctorByTag[int16Tag] = context.Int16Array;
	    ctorByTag[int32Tag] = context.Int32Array;
	    ctorByTag[uint8Tag] = Uint8Array;
	    ctorByTag[uint8ClampedTag] = context.Uint8ClampedArray;
	    ctorByTag[uint16Tag] = context.Uint16Array;
	    ctorByTag[uint32Tag] = context.Uint32Array;

	    /** Used to avoid iterating over non-enumerable properties in IE < 9. */
	    var nonEnumProps = {};
	    nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	    nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
	    nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
	    nonEnumProps[objectTag] = { 'constructor': true };

	    arrayEach(shadowProps, function(key) {
	      for (var tag in nonEnumProps) {
	        if (hasOwnProperty.call(nonEnumProps, tag)) {
	          var props = nonEnumProps[tag];
	          props[key] = hasOwnProperty.call(props, key);
	        }
	      }
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function(x) {
	      var Ctor = function() { this.x = x; },
	          object = { '0': x, 'length': x },
	          props = [];

	      Ctor.prototype = { 'valueOf': x, 'y': x };
	      for (var key in new Ctor) { props.push(key); }

	      /**
	       * Detect if `name` or `message` properties of `Error.prototype` are
	       * enumerable by default (IE < 9, Safari < 5.1).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
	        propertyIsEnumerable.call(errorProto, 'name');

	      /**
	       * Detect if `prototype` properties are enumerable by default.
	       *
	       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	       * (if the prototype or a property on the prototype has been set)
	       * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
	       * property to `true`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

	      /**
	       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	       *
	       * In IE < 9 an object's own properties, shadowing non-enumerable ones,
	       * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.nonEnumShadows = !/valueOf/.test(props);

	      /**
	       * Detect if own properties are iterated after inherited properties (IE < 9).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.ownLast = props[0] != 'x';

	      /**
	       * Detect if `Array#shift` and `Array#splice` augment array-like objects
	       * correctly.
	       *
	       * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
	       * `shift()` and `splice()` functions that fail to remove the last element,
	       * `value[0]`, of array-like objects even though the "length" property is
	       * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
	       * while `splice()` is buggy regardless of mode in IE < 9.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

	      /**
	       * Detect lack of support for accessing string characters by index.
	       *
	       * IE < 8 can't access characters by index. IE 8 can only access characters
	       * by index on string literals, not string objects.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
	    }(1, 0));

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf === baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      object = toObject(object);
	      if (pathKey !== undefined && pathKey in object) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = toObject(object)[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          object = toObject(object);
	          return object[key] === value && (value !== undefined || (key in object));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : toObject(object)[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf === baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          // Safari 5 mobile incorrectly has `Object` as the constructor of typed arrays.
	          if (Ctor instanceof Ctor) {
	            Ctor = ctorByTag[tag];
	          }
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object) || isString(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      if (lodash.support.unindexedChars && isString(value)) {
	        return value.split('');
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      if (lodash.support.unindexedChars && isString(value)) {
	        var index = -1,
	            length = value.length,
	            result = Object(value);

	        while (++index < length) {
	          result[index] = value.charAt(index);
	        }
	        return result;
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it's only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf === baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it's invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it's invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() === baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      if (isArrayLike(collection)) {
	        collection = toIterable(collection);
	      }
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `target` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it's
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it's invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it's
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with up to three argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it's invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with up to three argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 3))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it's an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it's invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with up to
	     * three arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 which returns 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it's invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      if (lodash.support.ownLast) {
	        baseForIn(value, function(subValue, key, object) {
	          result = hasOwnProperty.call(object, key);
	          return false;
	        });
	        return result !== false;
	      }
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return (lodash.support.unindexedChars && isString(value))
	        ? value.split('')
	        : arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it's invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it's invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object) || isString(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object == 'function' ? lodash.support.enumPrototypes : isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length,
	          support = lodash.support;

	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
	          isProto = proto === object,
	          result = Array(length),
	          skipIndexes = length > 0,
	          skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
	          skipProto = support.enumPrototypes && isFunction(object);

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      // lodash skips the `constructor` property when it infers it's iterating
	      // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
	      // attribute of an existing property and the `constructor` property of a
	      // prototype defaults to non-enumerable.
	      for (var key in object) {
	        if (!(skipProto && key == 'prototype') &&
	            !(skipErrorProps && (key == 'message' || key == 'name')) &&
	            !(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      if (support.nonEnumShadows && object !== objectProto) {
	        var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
	            nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

	        if (tag == objectTag) {
	          proto = objectProto;
	        }
	        length = shadowProps.length;
	        while (length--) {
	          key = shadowProps[length];
	          var nonEnum = nonEnums[key];
	          if (!(isProto && nonEnum) &&
	              (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
	            result.push(key);
	          }
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it's invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it's invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : toObject(object)[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : toObject(object)[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it's created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it's set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), (path + ''));
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it's
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it's invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it's invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var protoFunc = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          fixObjects = !support.spliceObjects && /^(?:pop|shift|splice)$/.test(methodName),
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      // Avoid array-like object bugs with `Array#shift` and `Array#splice` in
	      // IE < 9, Firefox < 10, and RingoJS.
	      var func = !fixObjects ? protoFunc : function() {
	        var result = protoFunc.apply(this, arguments);
	        if (this.length === 0) {
	          delete this[0];
	        }
	        return result;
	      };

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    define(function() {
	      return _;
	    });
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	},{}],15:[function(require,module,exports){
	var process=require("__browserify_process");/**
	 * Wrapper for the elasticsearch.js client, which will register the client constructor
	 * as a factory within angular that can be easily injected with Angular's awesome DI.
	 *
	 * It will also instruct the client to use Angular's $http service for it's ajax requests
	 */
	var AngularConnector = require('./lib/connectors/angular');
	var Client = require('./lib/client');

	process.angular_build = true;

	/* global angular */
	angular.module('elasticsearch', [])
	  .factory('esFactory', ['$injector', '$q', function ($injector, $q) {

	    var factory = function (config) {
	      config = config || {};
	      config.connectionClass = AngularConnector;
	      config.$injector = $injector;
	      config.defer = function () {
	        return $q.defer();
	      };
	      config.serializer = config.serializer || 'angular';
	      return new Client(config);
	    };

	    factory.errors = require('./lib/errors');
	    factory.ConnectionPool = require('./lib/connection_pool');
	    factory.Transport = require('./lib/transport');

	    return factory;
	  }]);

	},{"./lib/client":20,"./lib/connection_pool":23,"./lib/connectors/angular":24,"./lib/errors":26,"./lib/transport":39,"__browserify_process":13}],16:[function(require,module,exports){
	/* jshint maxlen: false */

	var ca = require('../client_action').makeFactoryWithModifier(function (spec) {
	  return require('../utils').merge(spec, {
	    params: {
	      filterPath: {
	        type: 'list',
	        name: 'filter_path'
	      }
	    }
	  });
	});
	var namespace = require('../client_action').namespaceFactory;
	var api = module.exports = {};

	api._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];

	/**
	 * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} [params.replication=sync] - Explicitely set the replication type
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String} params.type - Default document type for items which don't provide one
	 * @param {String} params.index - Default index for items which don't provide one
	 */
	api.bulk = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    replication: {
	      type: 'enum',
	      'default': 'sync',
	      options: [
	        'sync',
	        'async'
	      ]
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    type: {
	      type: 'string'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_bulk',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_bulk',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_bulk'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	api.cat = namespace();

	/**
	 * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.cat.prototype.aliases = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/aliases/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/aliases'
	    }
	  ]
	});

	/**
	 * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information
	 */
	api.cat.prototype.allocation = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/allocation/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/allocation'
	    }
	  ]
	});

	/**
	 * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.count = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/count/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/count'
	    }
	  ]
	});

	/**
	 * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return the fielddata size
	 */
	api.cat.prototype.fielddata = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    },
	    fields: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/fielddata/<%=fields%>',
	      req: {
	        fields: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/fielddata'
	    }
	  ]
	});

	/**
	 * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.ts=true] - Set to false to disable timestamping
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 */
	api.cat.prototype.health = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    ts: {
	      type: 'boolean',
	      'default': true
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat/health'
	  }
	});

	/**
	 * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.help - Return help information
	 */
	api.cat.prototype.help = ca({
	  params: {
	    help: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat'
	  }
	});

	/**
	 * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.pri - Set to true to return stats only for primary shards
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.indices = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    pri: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/indices/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/indices'
	    }
	  ]
	});

	/**
	 * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 */
	api.cat.prototype.master = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat/master'
	  }
	});

	/**
	 * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 */
	api.cat.prototype.nodes = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat/nodes'
	  }
	});

	/**
	 * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 */
	api.cat.prototype.pendingTasks = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat/pending_tasks'
	  }
	});

	/**
	 * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 */
	api.cat.prototype.plugins = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat/plugins'
	  }
	});

	/**
	 * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.recovery = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/recovery/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/recovery'
	    }
	  ]
	});

	/**
	 * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.segments = ca({
	  params: {
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/segments/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/segments'
	    }
	  ]
	});

	/**
	 * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.shards = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/shards/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/shards'
	    }
	  ]
	});

	/**
	 * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.v - Verbose mode. Display column headers
	 * @param {Boolean} params.fullId - Enables displaying the complete node ids
	 */
	api.cat.prototype.threadPool = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': false
	    },
	    fullId: {
	      type: 'boolean',
	      'default': false,
	      name: 'full_id'
	    }
	  },
	  url: {
	    fmt: '/_cat/thread_pool'
	  }
	});

	/**
	 * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.scrollId - A comma-separated list of scroll IDs to clear
	 */
	api.clearScroll = ca({
	  urls: [
	    {
	      fmt: '/_search/scroll/<%=scrollId%>',
	      req: {
	        scrollId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/scroll'
	    }
	  ],
	  method: 'DELETE'
	});

	api.cluster = namespace();

	/**
	 * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.getSettings = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/settings'
	  }
	});

	/**
	 * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.level=cluster] - Specify the level of detail for returned information
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Number} params.waitForActiveShards - Wait until the specified number of shards is active
	 * @param {String} params.waitForNodes - Wait until the specified number of nodes is available
	 * @param {Number} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished
	 * @param {String} params.waitForStatus - Wait until cluster is in a specific state
	 * @param {String} params.index - Limit the information returned to a specific index
	 */
	api.cluster.prototype.health = ca({
	  params: {
	    level: {
	      type: 'enum',
	      'default': 'cluster',
	      options: [
	        'cluster',
	        'indices',
	        'shards'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    },
	    waitForActiveShards: {
	      type: 'number',
	      name: 'wait_for_active_shards'
	    },
	    waitForNodes: {
	      type: 'string',
	      name: 'wait_for_nodes'
	    },
	    waitForRelocatingShards: {
	      type: 'number',
	      name: 'wait_for_relocating_shards'
	    },
	    waitForStatus: {
	      type: 'enum',
	      'default': null,
	      options: [
	        'green',
	        'yellow',
	        'red'
	      ],
	      name: 'wait_for_status'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/health/<%=index%>',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/health'
	    }
	  ]
	});

	/**
	 * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 */
	api.cluster.prototype.pendingTasks = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_cluster/pending_tasks'
	  }
	});

	/**
	 * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.putSettings = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/settings'
	  },
	  method: 'PUT'
	});

	/**
	 * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.dryRun - Simulate the operation only and return the resulting state
	 * @param {Boolean} params.explain - Return an explanation of why the commands can or cannot be executed
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.reroute = ca({
	  params: {
	    dryRun: {
	      type: 'boolean',
	      name: 'dry_run'
	    },
	    explain: {
	      type: 'boolean'
	    },
	    metric: {
	      type: 'list',
	      options: [
	        '_all',
	        'blocks',
	        'metadata',
	        'nodes',
	        'routing_table',
	        'master_node',
	        'version'
	      ]
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/reroute'
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics
	 */
	api.cluster.prototype.state = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/state/<%=metric%>/<%=index%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'blocks',
	            'metadata',
	            'nodes',
	            'routing_table',
	            'routing_nodes',
	            'master_node',
	            'version'
	          ]
	        },
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/state/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'blocks',
	            'metadata',
	            'nodes',
	            'routing_table',
	            'routing_nodes',
	            'master_node',
	            'version'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/state'
	    }
	  ]
	});

	/**
	 * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.cluster.prototype.stats = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/stats/nodes/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/stats'
	    }
	  ]
	});

	/**
	 * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.minScore - Include only documents with a specific `_score` value in the result
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to restrict the results
	 * @param {String, String[], Boolean} params.type - A comma-separated list of types to restrict the results
	 */
	api.count = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    minScore: {
	      type: 'number',
	      name: 'min_score'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_count',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_count',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_count'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.percolateIndex - The index to count percolate the document into. Defaults to index.
	 * @param {String} params.percolateType - The type to count percolate document into. Defaults to type.
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index of the document being count percolated.
	 * @param {String} params.type - The type of the document being count percolated.
	 * @param {String} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.
	 */
	api.countPercolate = ca({
	  params: {
	    routing: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    percolateIndex: {
	      type: 'string',
	      name: 'percolate_index'
	    },
	    percolateType: {
	      type: 'string',
	      name: 'percolate_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_percolate/count',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Specific write consistency setting for the operation
	 * @param {String} params.parent - ID of parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} [params.replication=sync] - Specific replication type
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api['delete'] = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    replication: {
	      type: 'enum',
	      'default': 'sync',
	      options: [
	        'sync',
	        'async'
	      ]
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {String} params.consistency - Specific write consistency setting for the operation
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} [params.replication=sync] - Specific replication type
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of types to restrict the operation
	 */
	api.deleteByQuery = ca({
	  params: {
	    analyzer: {
	      type: 'string'
	    },
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    replication: {
	      type: 'enum',
	      'default': 'sync',
	      options: [
	        'sync',
	        'async'
	      ]
	    },
	    q: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_query',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_query',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    }
	  ],
	  method: 'DELETE'
	});

	/**
	 * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.deleteScript = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.deleteTemplate = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)
	 */
	api.exists = ca({
	  params: {
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)
	 * @param {String} params.analyzer - The analyzer for the query string query
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The default field for query string query (default: _all)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.explain = ca({
	  params: {
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    fields: {
	      type: 'list'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)
	 * @param {String} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.fieldStats = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    level: {
	      type: 'enum',
	      'default': 'cluster',
	      options: [
	        'indices',
	        'cluster'
	      ]
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_field_stats',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_field_stats'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)
	 */
	api.get = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.getScript = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types
	 */
	api.getSource = ca({
	  params: {
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.getTemplate = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String} params.parent - ID of the parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} [params.replication=sync] - Specific replication type
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.index = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    replication: {
	      type: 'enum',
	      'default': 'sync',
	      options: [
	        'sync',
	        'async'
	      ]
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    timestamp: {
	      type: 'time'
	    },
	    ttl: {
	      type: 'duration'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	api.indices = namespace();

	/**
	 * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.analyzer - The name of the analyzer to use
	 * @param {String, String[], Boolean} params.charFilters - A comma-separated list of character filters to use for the analysis
	 * @param {String} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)
	 * @param {String, String[], Boolean} params.filters - A comma-separated list of filters to use for the analysis
	 * @param {String} params.index - The name of the index to scope the operation
	 * @param {Boolean} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)
	 * @param {String} params.text - The text on which the analysis should be performed (when request body is not used)
	 * @param {String} params.tokenizer - The name of the tokenizer to use for the analysis
	 * @param {String} [params.format=detailed] - Format of the output
	 */
	api.indices.prototype.analyze = ca({
	  params: {
	    analyzer: {
	      type: 'string'
	    },
	    charFilters: {
	      type: 'list',
	      name: 'char_filters'
	    },
	    field: {
	      type: 'string'
	    },
	    filters: {
	      type: 'list'
	    },
	    index: {
	      type: 'string'
	    },
	    preferLocal: {
	      type: 'boolean',
	      name: 'prefer_local'
	    },
	    text: {
	      type: 'string'
	    },
	    tokenizer: {
	      type: 'string'
	    },
	    format: {
	      type: 'enum',
	      'default': 'detailed',
	      options: [
	        'detailed',
	        'text'
	      ]
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_analyze',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_analyze'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.fieldData - Clear field data
	 * @param {Boolean} params.fielddata - Clear field data
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)
	 * @param {Boolean} params.filter - Clear filter caches
	 * @param {Boolean} params.filterCache - Clear filter caches
	 * @param {Boolean} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)
	 * @param {Boolean} params.id - Clear ID caches for parent/child
	 * @param {Boolean} params.idCache - Clear ID caches for parent/child
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index name to limit the operation
	 * @param {Boolean} params.recycler - Clear the recycler cache
	 * @param {Boolean} params.queryCache - Clear query cache
	 */
	api.indices.prototype.clearCache = ca({
	  params: {
	    fieldData: {
	      type: 'boolean',
	      name: 'field_data'
	    },
	    fielddata: {
	      type: 'boolean'
	    },
	    fields: {
	      type: 'list'
	    },
	    filter: {
	      type: 'boolean'
	    },
	    filterCache: {
	      type: 'boolean',
	      name: 'filter_cache'
	    },
	    filterKeys: {
	      type: 'boolean',
	      name: 'filter_keys'
	    },
	    id: {
	      type: 'boolean'
	    },
	    idCache: {
	      type: 'boolean',
	      name: 'id_cache'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    index: {
	      type: 'list'
	    },
	    recycler: {
	      type: 'boolean'
	    },
	    queryCache: {
	      type: 'boolean',
	      name: 'query_cache'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_cache/clear',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cache/clear'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.close = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_close',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.create = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices
	 */
	api.indices.prototype['delete'] = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit timestamp for the document
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices
	 * @param {String, String[], Boolean} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.
	 */
	api.indices.prototype.deleteAlias = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_alias/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.
	 */
	api.indices.prototype.deleteMapping = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/_mapping',
	    req: {
	      index: {
	        type: 'list'
	      },
	      type: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.deleteTemplate = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.
	 */
	api.indices.prototype.deleteWarmer = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    name: {
	      type: 'list'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_warmer/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to check
	 */
	api.indices.prototype.exists = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.indices.prototype.existsAlias = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': [
	        'open',
	        'closed'
	      ],
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_alias/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_alias',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    }
	  ],
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.existsTemplate = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` to check the types across all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to check
	 */
	api.indices.prototype.existsType = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      type: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)
	 * @param {Boolean} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string for all indices
	 */
	api.indices.prototype.flush = ca({
	  params: {
	    force: {
	      type: 'boolean'
	    },
	    waitIfOngoing: {
	      type: 'boolean',
	      name: 'wait_if_ongoing'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_flush',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_flush'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string for all indices
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 */
	api.indices.prototype.flushSynced = ca({
	  urls: [
	    {
	      fmt: '/<%=index%>/_flush/synced',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_flush/synced'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Ignore unavailable indexes (default: false)
	 * @param {Boolean} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)
	 * @param {String} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.feature - A comma-separated list of features
	 */
	api.indices.prototype.get = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=feature%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        feature: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    }
	  ]
	});

	/**
	 * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.indices.prototype.getAlias = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_alias/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_alias',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to filter
	 */
	api.indices.prototype.getAliases = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_aliases/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_aliases',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_aliases/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_aliases'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.includeDefaults - Whether the default mapping values should be returned as well
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types
	 * @param {String, String[], Boolean} params.field - A comma-separated list of fields
	 */
	api.indices.prototype.getFieldMapping = ca({
	  params: {
	    includeDefaults: {
	      type: 'boolean',
	      name: 'include_defaults'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mapping/field/<%=field%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>/field/<%=field%>',
	      req: {
	        type: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/field/<%=field%>',
	      req: {
	        field: {
	          type: 'list'
	        }
	      }
	    }
	  ]
	});

	/**
	 * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types
	 */
	api.indices.prototype.getMapping = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mapping',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>',
	      req: {
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.name - The name of the settings that should be included
	 */
	api.indices.prototype.getSettings = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': [
	        'open',
	        'closed'
	      ],
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_settings/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_settings',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.getTemplate = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_template/<%=name%>',
	      req: {
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_template'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.getUpgrade = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_upgrade',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_upgrade'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices
	 * @param {String, String[], Boolean} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types
	 */
	api.indices.prototype.getWarmer = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer'
	    }
	  ]
	});

	/**
	 * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.open = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'closed',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_open',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flush - Specify whether the index should be flushed after performing the operation (default: true)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)
	 * @param {Boolean} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {Boolean} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)
	 * @param {Boolean} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.optimize = ca({
	  params: {
	    flush: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    maxNumSegments: {
	      type: 'number',
	      name: 'max_num_segments'
	    },
	    onlyExpungeDeletes: {
	      type: 'boolean',
	      name: 'only_expunge_deletes'
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    },
	    waitForMerge: {
	      type: 'boolean',
	      name: 'wait_for_merge'
	    },
	    force: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_optimize',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_optimize'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit timestamp for the document
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.
	 * @param {String} params.name - The name of the alias to be created or updated
	 */
	api.indices.prototype.putAlias = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_alias/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.
	 * @param {String} params.type - The name of the document type
	 */
	api.indices.prototype.putMapping = ca({
	  params: {
	    ignoreConflicts: {
	      type: 'boolean',
	      name: 'ignore_conflicts'
	    },
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>',
	      req: {
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.putSettings = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_settings',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings'
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)
	 * @param {Boolean} params.create - Whether the index template should only be added if new or can also replace an existing one
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.putTemplate = ca({
	  params: {
	    order: {
	      type: 'number'
	    },
	    create: {
	      type: 'boolean',
	      'default': false
	    },
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices
	 * @param {String} params.name - The name of the warmer
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types
	 */
	api.indices.prototype.putWarmer = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer/<%=name%>',
	      req: {
	        name: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.detailed - Whether to display detailed information about shard recovery
	 * @param {Boolean} params.activeOnly - Display only those recoveries that are currently on-going
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.recovery = ca({
	  params: {
	    detailed: {
	      type: 'boolean',
	      'default': false
	    },
	    activeOnly: {
	      type: 'boolean',
	      'default': false,
	      name: 'active_only'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_recovery',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_recovery'
	    }
	  ]
	});

	/**
	 * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.force - Force a refresh even if not required
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.refresh = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    force: {
	      type: 'boolean',
	      'default': false
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_refresh',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_refresh'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.segments = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_segments',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_segments'
	    }
	  ]
	});

	/**
	 * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.groups - A comma-separated list of search groups for `search` index metric
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String} [params.level=indices] - Return stats aggregated at cluster, index or shard level
	 * @param {String, String[], Boolean} params.types - A comma-separated list of document types for the `indexing` index metric
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.metric - Limit the information returned the specific metrics.
	 */
	api.indices.prototype.stats = ca({
	  params: {
	    completionFields: {
	      type: 'list',
	      name: 'completion_fields'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    fields: {
	      type: 'list'
	    },
	    groups: {
	      type: 'list'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    level: {
	      type: 'enum',
	      'default': 'indices',
	      options: [
	        'cluster',
	        'indices',
	        'shards'
	      ]
	    },
	    types: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_stats/<%=metric%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'filter_cache',
	            'flush',
	            'get',
	            'id_cache',
	            'indexing',
	            'merge',
	            'percolate',
	            'query_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_stats/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'filter_cache',
	            'flush',
	            'get',
	            'id_cache',
	            'indexing',
	            'merge',
	            'percolate',
	            'query_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_stats',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_stats'
	    }
	  ]
	});

	/**
	 * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {Boolean} params.recovery - Return information about shard recovery
	 * @param {Boolean} params.snapshot - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.status = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    },
	    recovery: {
	      type: 'boolean'
	    },
	    snapshot: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_status',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_status'
	    }
	  ]
	});

	/**
	 * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Request timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 */
	api.indices.prototype.updateAliases = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_aliases'
	  },
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: true)
	 * @param {Boolean} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.upgrade = ca({
	  params: {
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      name: 'wait_for_completion'
	    },
	    onlyAncientSegments: {
	      type: 'boolean',
	      name: 'only_ancient_segments'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_upgrade',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_upgrade'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.explain - Return detailed information about the error
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {Boolean} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types
	 */
	api.indices.prototype.validateQuery = ca({
	  params: {
	    explain: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    rewrite: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_validate/query',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_validate/query',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_validate/query'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [info](http://www.elastic.co/guide/) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 */
	api.info = ca({
	  url: {
	    fmt: '/'
	  }
	});

	/**
	 * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.mget = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mget',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mget',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mget'
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.boostTerms - The boost factor
	 * @param {Number} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored
	 * @param {Number} params.maxQueryTerms - The maximum query terms to be included in the generated query
	 * @param {Number} params.maxWordLength - The minimum length of the word: longer words will be ignored
	 * @param {Number} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored
	 * @param {Number} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored
	 * @param {Number} params.minWordLength - The minimum length of the word: shorter words will be ignored
	 * @param {String, String[], Boolean} params.mltFields - Specific fields to perform the query against
	 * @param {Number} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)
	 * @param {String} params.routing - Specific routing value
	 * @param {Number} params.searchFrom - The offset from which to return results
	 * @param {String, String[], Boolean} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)
	 * @param {String} params.searchScroll - A scroll search request definition
	 * @param {Number} params.searchSize - The number of documents to return (default: 10)
	 * @param {String} params.searchSource - A specific search request definition (instead of using the request body)
	 * @param {String} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)
	 * @param {String, String[], Boolean} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)
	 * @param {String, String[], Boolean} params.stopWords - A list of stop words to be ignored
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)
	 */
	api.mlt = ca({
	  params: {
	    boostTerms: {
	      type: 'number',
	      name: 'boost_terms'
	    },
	    maxDocFreq: {
	      type: 'number',
	      name: 'max_doc_freq'
	    },
	    maxQueryTerms: {
	      type: 'number',
	      name: 'max_query_terms'
	    },
	    maxWordLength: {
	      type: 'number',
	      name: 'max_word_length'
	    },
	    minDocFreq: {
	      type: 'number',
	      name: 'min_doc_freq'
	    },
	    minTermFreq: {
	      type: 'number',
	      name: 'min_term_freq'
	    },
	    minWordLength: {
	      type: 'number',
	      name: 'min_word_length'
	    },
	    mltFields: {
	      type: 'list',
	      name: 'mlt_fields'
	    },
	    percentTermsToMatch: {
	      type: 'number',
	      name: 'percent_terms_to_match'
	    },
	    routing: {
	      type: 'string'
	    },
	    searchFrom: {
	      type: 'number',
	      name: 'search_from'
	    },
	    searchIndices: {
	      type: 'list',
	      name: 'search_indices'
	    },
	    searchScroll: {
	      type: 'string',
	      name: 'search_scroll'
	    },
	    searchSize: {
	      type: 'number',
	      name: 'search_size'
	    },
	    searchSource: {
	      type: 'string',
	      name: 'search_source'
	    },
	    searchType: {
	      type: 'string',
	      name: 'search_type'
	    },
	    searchTypes: {
	      type: 'list',
	      name: 'search_types'
	    },
	    stopWords: {
	      type: 'list',
	      name: 'stop_words'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The index of the document being count percolated to use as default
	 * @param {String} params.type - The type of the document being percolated to use as default.
	 */
	api.mpercolate = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mpercolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mpercolate',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mpercolate'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.searchType - Search operation type
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to use as default
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to use as default
	 */
	api.msearch = ca({
	  params: {
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'query_and_fetch',
	        'dfs_query_then_fetch',
	        'dfs_query_and_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_msearch',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_msearch',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_msearch'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set "ids" or "docs" in the request body
	 * @param {Boolean} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).
	 * @param {String} params.index - The index in which the document resides.
	 * @param {String} params.type - The type of the document.
	 * @param {String} params.id - The id of the document.
	 */
	api.mtermvectors = ca({
	  params: {
	    ids: {
	      type: 'list',
	      required: false
	    },
	    termStatistics: {
	      type: 'boolean',
	      'default': false,
	      required: false,
	      name: 'term_statistics'
	    },
	    fieldStatistics: {
	      type: 'boolean',
	      'default': true,
	      required: false,
	      name: 'field_statistics'
	    },
	    fields: {
	      type: 'list',
	      required: false
	    },
	    offsets: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    positions: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    payloads: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    preference: {
	      type: 'string',
	      required: false
	    },
	    routing: {
	      type: 'string',
	      required: false
	    },
	    parent: {
	      type: 'string',
	      required: false
	    },
	    realtime: {
	      type: 'boolean',
	      required: false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mtermvectors',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mtermvectors',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mtermvectors'
	    }
	  ],
	  method: 'POST'
	});

	api.nodes = namespace();

	/**
	 * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.interval - The interval for the second sampling of threads
	 * @param {Number} params.snapshots - Number of samples of thread stacktrace (default: 10)
	 * @param {Number} params.threads - Specify the number of threads to provide information for (default: 3)
	 * @param {Boolean} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)
	 * @param {String} params.type - The type to sample (default: cpu)
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.nodes.prototype.hotThreads = ca({
	  params: {
	    interval: {
	      type: 'time'
	    },
	    snapshots: {
	      type: 'number'
	    },
	    threads: {
	      type: 'number'
	    },
	    ignoreIdleThreads: {
	      type: 'boolean',
	      name: 'ignore_idle_threads'
	    },
	    type: {
	      type: 'enum',
	      options: [
	        'cpu',
	        'wait',
	        'block'
	      ]
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/hotthreads',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/hotthreads'
	    }
	  ]
	});

	/**
	 * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 * @param {String, String[], Boolean} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.
	 */
	api.nodes.prototype.info = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            'settings',
	            'os',
	            'process',
	            'jvm',
	            'thread_pool',
	            'network',
	            'transport',
	            'http',
	            'plugins'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            'settings',
	            'os',
	            'process',
	            'jvm',
	            'thread_pool',
	            'network',
	            'transport',
	            'http',
	            'plugins'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes'
	    }
	  ]
	});

	/**
	 * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.delay - Set the delay for the operation (default: 1s)
	 * @param {Boolean} params.exit - Exit the JVM as well (default: true)
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes
	 */
	api.nodes.prototype.shutdown = ca({
	  params: {
	    delay: {
	      type: 'time'
	    },
	    exit: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_shutdown'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)
	 * @param {Boolean} params.groups - A comma-separated list of search groups for `search` index metric
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String} [params.level=node] - Return indices stats aggregated at node, index or shard level
	 * @param {String, String[], Boolean} params.types - A comma-separated list of document types for the `indexing` index metric
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics
	 * @param {String, String[], Boolean} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.nodes.prototype.stats = ca({
	  params: {
	    completionFields: {
	      type: 'list',
	      name: 'completion_fields'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    fields: {
	      type: 'list'
	    },
	    groups: {
	      type: 'boolean'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    level: {
	      type: 'enum',
	      'default': 'node',
	      options: [
	        'node',
	        'indices',
	        'shards'
	      ]
	    },
	    types: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'network',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        },
	        indexMetric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'filter_cache',
	            'flush',
	            'get',
	            'id_cache',
	            'indexing',
	            'merge',
	            'percolate',
	            'query_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'network',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'network',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        },
	        indexMetric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'filter_cache',
	            'flush',
	            'get',
	            'id_cache',
	            'indexing',
	            'merge',
	            'percolate',
	            'query_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'network',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats'
	    }
	  ]
	});

	/**
	 * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.percolateFormat - Return an array of matching query IDs instead of objects
	 * @param {String} params.percolateIndex - The index to percolate the document into. Defaults to index.
	 * @param {String} params.percolateType - The type to percolate document into. Defaults to type.
	 * @param {String} params.percolateRouting - The routing value to use when percolating the existing document.
	 * @param {String} params.percolatePreference - Which shard to prefer when executing the percolate request.
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index of the document being percolated.
	 * @param {String} params.type - The type of the document being percolated.
	 * @param {String} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.
	 */
	api.percolate = ca({
	  params: {
	    routing: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    percolateFormat: {
	      type: 'enum',
	      options: [
	        'ids'
	      ],
	      name: 'percolate_format'
	    },
	    percolateIndex: {
	      type: 'string',
	      name: 'percolate_index'
	    },
	    percolateType: {
	      type: 'string',
	      name: 'percolate_type'
	    },
	    percolateRouting: {
	      type: 'string',
	      name: 'percolate_routing'
	    },
	    percolatePreference: {
	      type: 'string',
	      name: 'percolate_preference'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_percolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [ping](http://www.elastic.co/guide/) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 */
	api.ping = ca({
	  url: {
	    fmt: '/'
	  },
	  requestTimeout: 3000,
	  method: 'HEAD'
	});

	/**
	 * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.opType=index] - Explicit operation type
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.putScript = ca({
	  params: {
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.opType=index] - Explicit operation type
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.putTemplate = ca({
	  params: {
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.scrollId - The scroll ID
	 */
	api.scroll = ca({
	  params: {
	    scroll: {
	      type: 'duration'
	    },
	    scrollId: {
	      type: 'string',
	      name: 'scroll_id'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_search/scroll/<%=scrollId%>',
	      req: {
	        scrollId: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_search/scroll'
	    }
	  ],
	  paramAsBody: 'scrollId',
	  method: 'POST'
	});

	/**
	 * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.explain - Specify whether to return detailed information about score computation as part of a hit
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return as part of a hit
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit
	 * @param {Number} params.from - Starting offset (default: 0)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.searchType - Search operation type
	 * @param {Number} params.size - Number of hits to return (default: 10)
	 * @param {String, String[], Boolean} params.sort - A comma-separated list of <field>:<direction> pairs
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {String, String[], Boolean} params.stats - Specific 'tag' of the request for logging and statistical purposes
	 * @param {String} params.suggestField - Specify which field to use for suggestions
	 * @param {String} [params.suggestMode=missing] - Specify suggest mode
	 * @param {Number} params.suggestSize - How many suggestions to return in response
	 * @param {Text} params.suggestText - The source text for which the suggestions should be returned
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.trackScores - Whether to calculate and return scores even if they are not used for sorting
	 * @param {Boolean} params.version - Specify whether to return document version as part of a hit
	 * @param {Boolean} params.queryCache - Specify if query cache should be used for this request or not, defaults to index level setting
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types
	 */
	api.search = ca({
	  params: {
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    explain: {
	      type: 'boolean'
	    },
	    fields: {
	      type: 'list'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    from: {
	      type: 'number'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    preference: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    routing: {
	      type: 'list'
	    },
	    scroll: {
	      type: 'duration'
	    },
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'query_and_fetch',
	        'dfs_query_then_fetch',
	        'dfs_query_and_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    },
	    size: {
	      type: 'number'
	    },
	    sort: {
	      type: 'list'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    stats: {
	      type: 'list'
	    },
	    suggestField: {
	      type: 'string',
	      name: 'suggest_field'
	    },
	    suggestMode: {
	      type: 'enum',
	      'default': 'missing',
	      options: [
	        'missing',
	        'popular',
	        'always'
	      ],
	      name: 'suggest_mode'
	    },
	    suggestSize: {
	      type: 'number',
	      name: 'suggest_size'
	    },
	    suggestText: {
	      type: 'text',
	      name: 'suggest_text'
	    },
	    timeout: {
	      type: 'time'
	    },
	    trackScores: {
	      type: 'boolean',
	      name: 'track_scores'
	    },
	    version: {
	      type: 'boolean'
	    },
	    queryCache: {
	      type: 'boolean',
	      name: 'query_cache'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.minScore - Include only documents with a specific `_score` value in the result
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to restrict the results
	 * @param {String, String[], Boolean} params.type - A comma-separated list of types to restrict the results
	 */
	api.searchExists = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    minScore: {
	      type: 'number',
	      name: 'min_score'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search/exists',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search/exists',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/exists'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.searchShards = ca({
	  params: {
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    local: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search_shards',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search_shards',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_search_shards'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.searchType - Search operation type
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types
	 */
	api.searchTemplate = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'list'
	    },
	    scroll: {
	      type: 'duration'
	    },
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'query_and_fetch',
	        'dfs_query_then_fetch',
	        'dfs_query_and_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search/template',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search/template',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/template'
	    }
	  ],
	  method: 'POST'
	});

	api.snapshot = namespace();

	/**
	 * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.waitForCompletion - Should this request wait until the operation has completed before returning
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype.create = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      'default': false,
	      name: 'wait_for_completion'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.verify - Whether to verify the repository after creation
	 * @param {String} params.repository - A repository name
	 */
	api.snapshot.prototype.createRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    },
	    verify: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>',
	    req: {
	      repository: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype['delete'] = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String, String[], Boolean} params.repository - A comma-separated list of repository names
	 */
	api.snapshot.prototype.deleteRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>',
	    req: {
	      repository: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String, String[], Boolean} params.snapshot - A comma-separated list of snapshot names
	 */
	api.snapshot.prototype.get = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'list'
	      }
	    }
	  }
	});

	/**
	 * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.repository - A comma-separated list of repository names
	 */
	api.snapshot.prototype.getRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_snapshot/<%=repository%>',
	      req: {
	        repository: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot'
	    }
	  ]
	});

	/**
	 * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.waitForCompletion - Should this request wait until the operation has completed before returning
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype.restore = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      'default': false,
	      name: 'wait_for_completion'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String, String[], Boolean} params.snapshot - A comma-separated list of snapshot names
	 */
	api.snapshot.prototype.status = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',
	      req: {
	        repository: {
	          type: 'string'
	        },
	        snapshot: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot/<%=repository%>/_status',
	      req: {
	        repository: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot/_status'
	    }
	  ]
	});

	/**
	 * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String} params.repository - A repository name
	 */
	api.snapshot.prototype.verifyRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/_verify',
	    req: {
	      repository: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices
	 */
	api.suggest = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_suggest',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_suggest'
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.termStatistics - Specifies if total term frequency and document frequency should be returned.
	 * @param {Boolean} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return.
	 * @param {Boolean} [params.offsets=true] - Specifies if term offsets should be returned.
	 * @param {Boolean} [params.positions=true] - Specifies if term positions should be returned.
	 * @param {Boolean} [params.payloads=true] - Specifies if term payloads should be returned.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random).
	 * @param {String} params.routing - Specific routing value.
	 * @param {String} params.parent - Parent id of documents.
	 * @param {Boolean} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).
	 * @param {String} params.index - The index in which the document resides.
	 * @param {String} params.type - The type of the document.
	 * @param {String} params.id - The id of the document.
	 */
	api.termvector = ca({
	  params: {
	    termStatistics: {
	      type: 'boolean',
	      'default': false,
	      required: false,
	      name: 'term_statistics'
	    },
	    fieldStatistics: {
	      type: 'boolean',
	      'default': true,
	      required: false,
	      name: 'field_statistics'
	    },
	    fields: {
	      type: 'list',
	      required: false
	    },
	    offsets: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    positions: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    payloads: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    preference: {
	      type: 'string',
	      required: false
	    },
	    routing: {
	      type: 'string',
	      required: false
	    },
	    parent: {
	      type: 'string',
	      required: false
	    },
	    realtime: {
	      type: 'boolean',
	      required: false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_termvector',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.lang - The script language (default: groovy)
	 * @param {String} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} [params.replication=sync] - Specific replication type
	 * @param {Number} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)
	 * @param {String} params.routing - Specific routing value
	 * @param {Anything} params.script - The URL-encoded script definition (instead of using request body)
	 * @param {Anything} params.scriptId - The id of a stored script
	 * @param {Boolean} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.update = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    fields: {
	      type: 'list'
	    },
	    lang: {
	      type: 'string'
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    replication: {
	      type: 'enum',
	      'default': 'sync',
	      options: [
	        'sync',
	        'async'
	      ]
	    },
	    retryOnConflict: {
	      type: 'number',
	      name: 'retry_on_conflict'
	    },
	    routing: {
	      type: 'string'
	    },
	    script: {},
	    scriptId: {
	      name: 'script_id'
	    },
	    scriptedUpsert: {
	      type: 'boolean',
	      name: 'scripted_upsert'
	    },
	    timeout: {
	      type: 'time'
	    },
	    timestamp: {
	      type: 'time'
	    },
	    ttl: {
	      type: 'duration'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String} params.parent - ID of the parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} [params.replication=sync] - Specific replication type
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.create = ca.proxy(api.index, {
	  transform: function (params) {
	    params.op_type = 'create';
	  }
	});
	},{"../client_action":21,"../utils":41}],17:[function(require,module,exports){
	module.exports=require(16)
	},{"../client_action":21,"../utils":41}],18:[function(require,module,exports){
	/* jshint maxlen: false */

	var ca = require('../client_action').makeFactoryWithModifier(function (spec) {
	  return require('../utils').merge(spec, {
	    params: {
	      filterPath: {
	        type: 'list',
	        name: 'filter_path'
	      }
	    }
	  });
	});
	var namespace = require('../client_action').namespaceFactory;
	var api = module.exports = {};

	api._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];

	/**
	 * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String} params.type - Default document type for items which don't provide one
	 * @param {String, String[], Boolean} params.fields - Default comma-separated list of fields to return in the response for updates
	 * @param {String} params.index - Default index for items which don't provide one
	 */
	api.bulk = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    type: {
	      type: 'string'
	    },
	    fields: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_bulk',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_bulk',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_bulk'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	api.cat = namespace();

	/**
	 * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.cat.prototype.aliases = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/aliases/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/aliases'
	    }
	  ]
	});

	/**
	 * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information
	 */
	api.cat.prototype.allocation = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/allocation/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/allocation'
	    }
	  ]
	});

	/**
	 * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.count = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/count/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/count'
	    }
	  ]
	});

	/**
	 * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return the fielddata size
	 */
	api.cat.prototype.fielddata = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    },
	    fields: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/fielddata/<%=fields%>',
	      req: {
	        fields: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/fielddata'
	    }
	  ]
	});

	/**
	 * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.ts=true] - Set to false to disable timestamping
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.health = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    ts: {
	      type: 'boolean',
	      'default': true
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/health'
	  }
	});

	/**
	 * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.help - Return help information
	 */
	api.cat.prototype.help = ca({
	  params: {
	    help: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  url: {
	    fmt: '/_cat'
	  }
	});

	/**
	 * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} params.pri - Set to true to return stats only for primary shards
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.indices = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    pri: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/indices/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/indices'
	    }
	  ]
	});

	/**
	 * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.master = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/master'
	  }
	});

	/**
	 * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.nodeattrs = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/nodeattrs'
	  }
	});

	/**
	 * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.nodes = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/nodes'
	  }
	});

	/**
	 * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.pendingTasks = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/pending_tasks'
	  }
	});

	/**
	 * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 */
	api.cat.prototype.plugins = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  url: {
	    fmt: '/_cat/plugins'
	  }
	});

	/**
	 * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.bytes - The unit in which to display byte values
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.recovery = ca({
	  params: {
	    bytes: {
	      type: 'enum',
	      options: [
	        'b',
	        'k',
	        'm',
	        'g'
	      ]
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/recovery/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/recovery'
	    }
	  ]
	});

	/**
	 * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.segments = ca({
	  params: {
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/segments/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/segments'
	    }
	  ]
	});

	/**
	 * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to limit the returned information
	 */
	api.cat.prototype.shards = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cat/shards/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cat/shards'
	    }
	  ]
	});

	/**
	 * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String, String[], Boolean} params.h - Comma-separated list of column names to display
	 * @param {Boolean} params.help - Return help information
	 * @param {Boolean} [params.v=true] - Verbose mode. Display column headers
	 * @param {Boolean} params.fullId - Enables displaying the complete node ids
	 */
	api.cat.prototype.threadPool = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    h: {
	      type: 'list'
	    },
	    help: {
	      type: 'boolean',
	      'default': false
	    },
	    v: {
	      type: 'boolean',
	      'default': true
	    },
	    fullId: {
	      type: 'boolean',
	      'default': false,
	      name: 'full_id'
	    }
	  },
	  url: {
	    fmt: '/_cat/thread_pool'
	  }
	});

	/**
	 * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.scrollId - A comma-separated list of scroll IDs to clear
	 */
	api.clearScroll = ca({
	  urls: [
	    {
	      fmt: '/_search/scroll/<%=scrollId%>',
	      req: {
	        scrollId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/scroll'
	    }
	  ],
	  method: 'DELETE'
	});

	api.cluster = namespace();

	/**
	 * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.getSettings = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/settings'
	  }
	});

	/**
	 * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.level=cluster] - Specify the level of detail for returned information
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Number} params.waitForActiveShards - Wait until the specified number of shards is active
	 * @param {String} params.waitForNodes - Wait until the specified number of nodes is available
	 * @param {Number} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished
	 * @param {String} params.waitForStatus - Wait until cluster is in a specific state
	 * @param {String} params.index - Limit the information returned to a specific index
	 */
	api.cluster.prototype.health = ca({
	  params: {
	    level: {
	      type: 'enum',
	      'default': 'cluster',
	      options: [
	        'cluster',
	        'indices',
	        'shards'
	      ]
	    },
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    },
	    waitForActiveShards: {
	      type: 'number',
	      name: 'wait_for_active_shards'
	    },
	    waitForNodes: {
	      type: 'string',
	      name: 'wait_for_nodes'
	    },
	    waitForRelocatingShards: {
	      type: 'number',
	      name: 'wait_for_relocating_shards'
	    },
	    waitForStatus: {
	      type: 'enum',
	      'default': null,
	      options: [
	        'green',
	        'yellow',
	        'red'
	      ],
	      name: 'wait_for_status'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/health/<%=index%>',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/health'
	    }
	  ]
	});

	/**
	 * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 */
	api.cluster.prototype.pendingTasks = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_cluster/pending_tasks'
	  }
	});

	/**
	 * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.putSettings = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/settings'
	  },
	  method: 'PUT'
	});

	/**
	 * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.dryRun - Simulate the operation only and return the resulting state
	 * @param {Boolean} params.explain - Return an explanation of why the commands can or cannot be executed
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 */
	api.cluster.prototype.reroute = ca({
	  params: {
	    dryRun: {
	      type: 'boolean',
	      name: 'dry_run'
	    },
	    explain: {
	      type: 'boolean'
	    },
	    metric: {
	      type: 'list',
	      options: [
	        '_all',
	        'blocks',
	        'metadata',
	        'nodes',
	        'routing_table',
	        'master_node',
	        'version'
	      ]
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_cluster/reroute'
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics
	 */
	api.cluster.prototype.state = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/state/<%=metric%>/<%=index%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'blocks',
	            'metadata',
	            'nodes',
	            'routing_table',
	            'routing_nodes',
	            'master_node',
	            'version'
	          ]
	        },
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/state/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'blocks',
	            'metadata',
	            'nodes',
	            'routing_table',
	            'routing_nodes',
	            'master_node',
	            'version'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/state'
	    }
	  ]
	});

	/**
	 * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.cluster.prototype.stats = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_cluster/stats/nodes/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cluster/stats'
	    }
	  ]
	});

	/**
	 * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.minScore - Include only documents with a specific `_score` value in the result
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to restrict the results
	 * @param {String, String[], Boolean} params.type - A comma-separated list of types to restrict the results
	 */
	api.count = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    minScore: {
	      type: 'number',
	      name: 'min_score'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_count',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_count',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_count'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.percolateIndex - The index to count percolate the document into. Defaults to index.
	 * @param {String} params.percolateType - The type to count percolate document into. Defaults to type.
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index of the document being count percolated.
	 * @param {String} params.type - The type of the document being count percolated.
	 * @param {String} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.
	 */
	api.countPercolate = ca({
	  params: {
	    routing: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    percolateIndex: {
	      type: 'string',
	      name: 'percolate_index'
	    },
	    percolateType: {
	      type: 'string',
	      name: 'percolate_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_percolate/count',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Specific write consistency setting for the operation
	 * @param {String} params.parent - ID of parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api['delete'] = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.deleteScript = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.deleteTemplate = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)
	 */
	api.exists = ca({
	  params: {
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)
	 * @param {String} params.analyzer - The analyzer for the query string query
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The default field for query string query (default: _all)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.explain = ca({
	  params: {
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    fields: {
	      type: 'list'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)
	 * @param {String} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.fieldStats = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    level: {
	      type: 'enum',
	      'default': 'cluster',
	      options: [
	        'indices',
	        'cluster'
	      ]
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_field_stats',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_field_stats'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)
	 */
	api.get = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.getScript = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.parent - The ID of the parent document
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - The document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types
	 */
	api.getSource = ca({
	  params: {
	    parent: {
	      type: 'string'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.getTemplate = ca({
	  params: {
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  }
	});

	/**
	 * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String} params.parent - ID of the parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.index = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    routing: {
	      type: 'string'
	    },
	    timeout: {
	      type: 'time'
	    },
	    timestamp: {
	      type: 'time'
	    },
	    ttl: {
	      type: 'duration'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	api.indices = namespace();

	/**
	 * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.analyzer - The name of the analyzer to use
	 * @param {String, String[], Boolean} params.charFilters - A comma-separated list of character filters to use for the analysis
	 * @param {String} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)
	 * @param {String, String[], Boolean} params.filters - A comma-separated list of filters to use for the analysis
	 * @param {String} params.index - The name of the index to scope the operation
	 * @param {Boolean} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)
	 * @param {String, String[], Boolean} params.text - The text on which the analysis should be performed (when request body is not used)
	 * @param {String} params.tokenizer - The name of the tokenizer to use for the analysis
	 * @param {String} [params.format=detailed] - Format of the output
	 */
	api.indices.prototype.analyze = ca({
	  params: {
	    analyzer: {
	      type: 'string'
	    },
	    charFilters: {
	      type: 'list',
	      name: 'char_filters'
	    },
	    field: {
	      type: 'string'
	    },
	    filters: {
	      type: 'list'
	    },
	    index: {
	      type: 'string'
	    },
	    preferLocal: {
	      type: 'boolean',
	      name: 'prefer_local'
	    },
	    text: {
	      type: 'list'
	    },
	    tokenizer: {
	      type: 'string'
	    },
	    format: {
	      type: 'enum',
	      'default': 'detailed',
	      options: [
	        'detailed',
	        'text'
	      ]
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_analyze',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_analyze'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.fieldData - Clear field data
	 * @param {Boolean} params.fielddata - Clear field data
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)
	 * @param {Boolean} params.query - Clear query caches
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index name to limit the operation
	 * @param {Boolean} params.recycler - Clear the recycler cache
	 * @param {Boolean} params.request - Clear request cache
	 */
	api.indices.prototype.clearCache = ca({
	  params: {
	    fieldData: {
	      type: 'boolean',
	      name: 'field_data'
	    },
	    fielddata: {
	      type: 'boolean'
	    },
	    fields: {
	      type: 'list'
	    },
	    query: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    index: {
	      type: 'list'
	    },
	    recycler: {
	      type: 'boolean'
	    },
	    request: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_cache/clear',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_cache/clear'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.close = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_close',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.create = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    updateAllTypes: {
	      type: 'boolean',
	      name: 'update_all_types'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices
	 */
	api.indices.prototype['delete'] = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit timestamp for the document
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices
	 * @param {String, String[], Boolean} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.
	 */
	api.indices.prototype.deleteAlias = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_alias/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.deleteTemplate = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.
	 */
	api.indices.prototype.deleteWarmer = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    name: {
	      type: 'list'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_warmer/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to check
	 */
	api.indices.prototype.exists = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>',
	    req: {
	      index: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.indices.prototype.existsAlias = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': [
	        'open',
	        'closed'
	      ],
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_alias/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_alias',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    }
	  ],
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.existsTemplate = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` to check the types across all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to check
	 */
	api.indices.prototype.existsType = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      type: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'HEAD'
	});

	/**
	 * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)
	 * @param {Boolean} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string for all indices
	 */
	api.indices.prototype.flush = ca({
	  params: {
	    force: {
	      type: 'boolean'
	    },
	    waitIfOngoing: {
	      type: 'boolean',
	      name: 'wait_if_ongoing'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_flush',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_flush'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string for all indices
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 */
	api.indices.prototype.flushSynced = ca({
	  urls: [
	    {
	      fmt: '/<%=index%>/_flush/synced',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_flush/synced'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Ignore unavailable indexes (default: false)
	 * @param {Boolean} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)
	 * @param {String} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.human - Whether to return version and creation date values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.feature - A comma-separated list of features
	 */
	api.indices.prototype.get = ca({
	  params: {
	    local: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=feature%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        feature: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    }
	  ]
	});

	/**
	 * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to return
	 */
	api.indices.prototype.getAlias = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_alias/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_alias',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_alias'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to filter aliases
	 * @param {String, String[], Boolean} params.name - A comma-separated list of alias names to filter
	 */
	api.indices.prototype.getAliases = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_aliases/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_aliases',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_aliases/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_aliases'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.includeDefaults - Whether the default mapping values should be returned as well
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types
	 * @param {String, String[], Boolean} params.field - A comma-separated list of fields
	 */
	api.indices.prototype.getFieldMapping = ca({
	  params: {
	    includeDefaults: {
	      type: 'boolean',
	      name: 'include_defaults'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mapping/field/<%=field%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>/field/<%=field%>',
	      req: {
	        type: {
	          type: 'list'
	        },
	        field: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/field/<%=field%>',
	      req: {
	        field: {
	          type: 'list'
	        }
	      }
	    }
	  ]
	});

	/**
	 * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types
	 */
	api.indices.prototype.getMapping = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mapping',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>',
	      req: {
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Boolean} params.human - Whether to return version and creation date values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.name - The name of the settings that should be included
	 */
	api.indices.prototype.getSettings = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': [
	        'open',
	        'closed'
	      ],
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    local: {
	      type: 'boolean'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_settings/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_settings',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.getTemplate = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_template/<%=name%>',
	      req: {
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_template'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.getUpgrade = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_upgrade',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_upgrade'
	    }
	  ]
	});

	/**
	 * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices
	 * @param {String, String[], Boolean} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types
	 */
	api.indices.prototype.getWarmer = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer/<%=name%>',
	      req: {
	        name: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer'
	    }
	  ]
	});

	/**
	 * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 */
	api.indices.prototype.open = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'closed',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_open',
	    req: {
	      index: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-optimize.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flush - Specify whether the index should be flushed after performing the operation (default: true)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)
	 * @param {Boolean} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {Boolean} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.optimize = ca({
	  params: {
	    flush: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    maxNumSegments: {
	      type: 'number',
	      name: 'max_num_segments'
	    },
	    onlyExpungeDeletes: {
	      type: 'boolean',
	      name: 'only_expunge_deletes'
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    },
	    waitForMerge: {
	      type: 'boolean',
	      name: 'wait_for_merge'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_optimize',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_optimize'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit timestamp for the document
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.
	 * @param {String} params.name - The name of the alias to be created or updated
	 */
	api.indices.prototype.putAlias = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/_alias/<%=name%>',
	    req: {
	      index: {
	        type: 'list'
	      },
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.
	 * @param {String} params.type - The name of the document type
	 */
	api.indices.prototype.putMapping = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    updateAllTypes: {
	      type: 'boolean',
	      name: 'update_all_types'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_mapping/<%=type%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mapping/<%=type%>',
	      req: {
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.putSettings = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_settings',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_settings'
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Number} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)
	 * @param {Boolean} params.create - Whether the index template should only be added if new or can also replace an existing one
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {String} params.name - The name of the template
	 */
	api.indices.prototype.putTemplate = ca({
	  params: {
	    order: {
	      type: 'number'
	    },
	    create: {
	      type: 'boolean',
	      'default': false
	    },
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    }
	  },
	  url: {
	    fmt: '/_template/<%=name%>',
	    req: {
	      name: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.
	 * @param {Boolean} params.requestCache - Specify whether the request to be wamred shoyd use the request cache, defaults to index level setting
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices
	 * @param {String} params.name - The name of the warmer
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types
	 */
	api.indices.prototype.putWarmer = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    requestCache: {
	      type: 'boolean',
	      name: 'request_cache'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        },
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_warmer/<%=name%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        name: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_warmer/<%=name%>',
	      req: {
	        name: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.detailed - Whether to display detailed information about shard recovery
	 * @param {Boolean} params.activeOnly - Display only those recoveries that are currently on-going
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.recovery = ca({
	  params: {
	    detailed: {
	      type: 'boolean',
	      'default': false
	    },
	    activeOnly: {
	      type: 'boolean',
	      'default': false,
	      name: 'active_only'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_recovery',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_recovery'
	    }
	  ]
	});

	/**
	 * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.force - Force a refresh even if not required
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.refresh = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    force: {
	      type: 'boolean',
	      'default': false
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_refresh',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_refresh'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.segments = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_segments',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_segments'
	    }
	  ]
	});

	/**
	 * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.status - A comma-separated list of statuses used to filter on shards to get store information for
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.shardStores = ca({
	  params: {
	    status: {
	      type: 'list',
	      options: [
	        'green',
	        'yellow',
	        'red',
	        'all'
	      ]
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_shard_stores',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_shard_stores'
	    }
	  ]
	});

	/**
	 * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.groups - A comma-separated list of search groups for `search` index metric
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String} [params.level=indices] - Return stats aggregated at cluster, index or shard level
	 * @param {String, String[], Boolean} params.types - A comma-separated list of document types for the `indexing` index metric
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.metric - Limit the information returned the specific metrics.
	 */
	api.indices.prototype.stats = ca({
	  params: {
	    completionFields: {
	      type: 'list',
	      name: 'completion_fields'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    fields: {
	      type: 'list'
	    },
	    groups: {
	      type: 'list'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    level: {
	      type: 'enum',
	      'default': 'indices',
	      options: [
	        'cluster',
	        'indices',
	        'shards'
	      ]
	    },
	    types: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_stats/<%=metric%>',
	      req: {
	        index: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'query_cache',
	            'flush',
	            'get',
	            'indexing',
	            'merge',
	            'percolate',
	            'request_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_stats/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'query_cache',
	            'flush',
	            'get',
	            'indexing',
	            'merge',
	            'percolate',
	            'request_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_stats',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_stats'
	    }
	  ]
	});

	/**
	 * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.timeout - Request timeout
	 * @param {Date, Number} params.masterTimeout - Specify timeout for connection to master
	 */
	api.indices.prototype.updateAliases = ca({
	  params: {
	    timeout: {
	      type: 'time'
	    },
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_aliases'
	  },
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)
	 * @param {Boolean} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices
	 */
	api.indices.prototype.upgrade = ca({
	  params: {
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      name: 'wait_for_completion'
	    },
	    onlyAncientSegments: {
	      type: 'boolean',
	      name: 'only_ancient_segments'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_upgrade',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_upgrade'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.explain - Return detailed information about the error
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Anything} params.operationThreading - TODO: ?
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {Boolean} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types
	 */
	api.indices.prototype.validateQuery = ca({
	  params: {
	    explain: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    operationThreading: {
	      name: 'operation_threading'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    rewrite: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_validate/query',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_validate/query',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_validate/query'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [info](http://www.elastic.co/guide/) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 */
	api.info = ca({
	  url: {
	    fmt: '/'
	  }
	});

	/**
	 * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.realtime - Specify whether to perform the operation in realtime or search mode
	 * @param {Boolean} params.refresh - Refresh the shard containing the document before performing the operation
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.mget = ca({
	  params: {
	    fields: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    realtime: {
	      type: 'boolean'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mget',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mget',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mget'
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The index of the document being count percolated to use as default
	 * @param {String} params.type - The type of the document being percolated to use as default.
	 */
	api.mpercolate = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mpercolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mpercolate',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mpercolate'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.searchType - Search operation type
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to use as default
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to use as default
	 */
	api.msearch = ca({
	  params: {
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'query_and_fetch',
	        'dfs_query_then_fetch',
	        'dfs_query_and_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_msearch',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_msearch',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_msearch'
	    }
	  ],
	  needBody: true,
	  bulkBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set "ids" or "docs" in the request body
	 * @param {Boolean} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {String} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body "params" or "docs".
	 * @param {Boolean} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index in which the document resides.
	 * @param {String} params.type - The type of the document.
	 */
	api.mtermvectors = ca({
	  params: {
	    ids: {
	      type: 'list',
	      required: false
	    },
	    termStatistics: {
	      type: 'boolean',
	      'default': false,
	      required: false,
	      name: 'term_statistics'
	    },
	    fieldStatistics: {
	      type: 'boolean',
	      'default': true,
	      required: false,
	      name: 'field_statistics'
	    },
	    fields: {
	      type: 'list',
	      required: false
	    },
	    offsets: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    positions: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    payloads: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    preference: {
	      type: 'string',
	      required: false
	    },
	    routing: {
	      type: 'string',
	      required: false
	    },
	    parent: {
	      type: 'string',
	      required: false
	    },
	    realtime: {
	      type: 'boolean',
	      required: false
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_mtermvectors',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_mtermvectors',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_mtermvectors'
	    }
	  ],
	  method: 'POST'
	});

	api.nodes = namespace();

	/**
	 * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.interval - The interval for the second sampling of threads
	 * @param {Number} params.snapshots - Number of samples of thread stacktrace (default: 10)
	 * @param {Number} params.threads - Specify the number of threads to provide information for (default: 3)
	 * @param {Boolean} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)
	 * @param {String} params.type - The type to sample (default: cpu)
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.nodes.prototype.hotThreads = ca({
	  params: {
	    interval: {
	      type: 'time'
	    },
	    snapshots: {
	      type: 'number'
	    },
	    threads: {
	      type: 'number'
	    },
	    ignoreIdleThreads: {
	      type: 'boolean',
	      name: 'ignore_idle_threads'
	    },
	    type: {
	      type: 'enum',
	      options: [
	        'cpu',
	        'wait',
	        'block'
	      ]
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/hotthreads',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/hotthreads'
	    }
	  ]
	});

	/**
	 * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.flatSettings - Return settings in flat format (default: false)
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 * @param {String, String[], Boolean} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.
	 */
	api.nodes.prototype.info = ca({
	  params: {
	    flatSettings: {
	      type: 'boolean',
	      name: 'flat_settings'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            'settings',
	            'os',
	            'process',
	            'jvm',
	            'thread_pool',
	            'transport',
	            'http',
	            'plugins'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            'settings',
	            'os',
	            'process',
	            'jvm',
	            'thread_pool',
	            'transport',
	            'http',
	            'plugins'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes'
	    }
	  ]
	});

	/**
	 * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)
	 * @param {Boolean} params.groups - A comma-separated list of search groups for `search` index metric
	 * @param {Boolean} params.human - Whether to return time and byte values in human-readable format.
	 * @param {String} [params.level=node] - Return indices stats aggregated at node, index or shard level
	 * @param {String, String[], Boolean} params.types - A comma-separated list of document types for the `indexing` index metric
	 * @param {String, String[], Boolean} params.metric - Limit the information returned to the specified metrics
	 * @param {String, String[], Boolean} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.
	 * @param {String, String[], Boolean} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes
	 */
	api.nodes.prototype.stats = ca({
	  params: {
	    completionFields: {
	      type: 'list',
	      name: 'completion_fields'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    fields: {
	      type: 'list'
	    },
	    groups: {
	      type: 'boolean'
	    },
	    human: {
	      type: 'boolean',
	      'default': false
	    },
	    level: {
	      type: 'enum',
	      'default': 'node',
	      options: [
	        'node',
	        'indices',
	        'shards'
	      ]
	    },
	    types: {
	      type: 'list'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        },
	        indexMetric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'query_cache',
	            'flush',
	            'get',
	            'indexing',
	            'merge',
	            'percolate',
	            'request_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',
	      req: {
	        nodeId: {
	          type: 'list'
	        },
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        },
	        indexMetric: {
	          type: 'list',
	          options: [
	            '_all',
	            'completion',
	            'docs',
	            'fielddata',
	            'query_cache',
	            'flush',
	            'get',
	            'indexing',
	            'merge',
	            'percolate',
	            'request_cache',
	            'refresh',
	            'search',
	            'segments',
	            'store',
	            'warmer',
	            'suggest'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/<%=nodeId%>/stats',
	      req: {
	        nodeId: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats/<%=metric%>',
	      req: {
	        metric: {
	          type: 'list',
	          options: [
	            '_all',
	            'breaker',
	            'fs',
	            'http',
	            'indices',
	            'jvm',
	            'os',
	            'process',
	            'thread_pool',
	            'transport'
	          ]
	        }
	      }
	    },
	    {
	      fmt: '/_nodes/stats'
	    }
	  ]
	});

	/**
	 * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.percolateIndex - The index to percolate the document into. Defaults to index.
	 * @param {String} params.percolateType - The type to percolate document into. Defaults to type.
	 * @param {String} params.percolateRouting - The routing value to use when percolating the existing document.
	 * @param {String} params.percolatePreference - Which shard to prefer when executing the percolate request.
	 * @param {String} params.percolateFormat - Return an array of matching query IDs instead of objects
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index of the document being percolated.
	 * @param {String} params.type - The type of the document being percolated.
	 * @param {String} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.
	 */
	api.percolate = ca({
	  params: {
	    routing: {
	      type: 'list'
	    },
	    preference: {
	      type: 'string'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    percolateIndex: {
	      type: 'string',
	      name: 'percolate_index'
	    },
	    percolateType: {
	      type: 'string',
	      name: 'percolate_type'
	    },
	    percolateRouting: {
	      type: 'string',
	      name: 'percolate_routing'
	    },
	    percolatePreference: {
	      type: 'string',
	      name: 'percolate_preference'
	    },
	    percolateFormat: {
	      type: 'enum',
	      options: [
	        'ids'
	      ],
	      name: 'percolate_format'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_percolate',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [ping](http://www.elastic.co/guide/) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 */
	api.ping = ca({
	  url: {
	    fmt: '/'
	  },
	  requestTimeout: 3000,
	  method: 'HEAD'
	});

	/**
	 * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.opType=index] - Explicit operation type
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Script ID
	 * @param {String} params.lang - Script language
	 */
	api.putScript = ca({
	  params: {
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_scripts/<%=lang%>/<%=id%>',
	    req: {
	      lang: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} [params.opType=index] - Explicit operation type
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Template ID
	 */
	api.putTemplate = ca({
	  params: {
	    opType: {
	      type: 'enum',
	      'default': 'index',
	      options: [
	        'index',
	        'create'
	      ],
	      name: 'op_type'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/_search/template/<%=id%>',
	    req: {
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'PUT'
	});

	/**
	 * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.id - The id of the stored search template
	 */
	api.renderSearchTemplate = ca({
	  urls: [
	    {
	      fmt: '/_render/template/<%=id%>',
	      req: {
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_render/template'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.scrollId - The scroll ID
	 */
	api.scroll = ca({
	  params: {
	    scroll: {
	      type: 'duration'
	    },
	    scrollId: {
	      type: 'string',
	      name: 'scroll_id'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_search/scroll/<%=scrollId%>',
	      req: {
	        scrollId: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_search/scroll'
	    }
	  ],
	  paramAsBody: 'scrollId',
	  method: 'POST'
	});

	/**
	 * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.explain - Specify whether to return detailed information about score computation as part of a hit
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return as part of a hit
	 * @param {String, String[], Boolean} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit
	 * @param {Number} params.from - Starting offset (default: 0)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.searchType - Search operation type
	 * @param {Number} params.size - Number of hits to return (default: 10)
	 * @param {String, String[], Boolean} params.sort - A comma-separated list of <field>:<direction> pairs
	 * @param {String, String[], Boolean} params._source - True or false to return the _source field or not, or a list of fields to return
	 * @param {String, String[], Boolean} params._sourceExclude - A list of fields to exclude from the returned _source field
	 * @param {String, String[], Boolean} params._sourceInclude - A list of fields to extract and return from the _source field
	 * @param {Number} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.
	 * @param {String, String[], Boolean} params.stats - Specific 'tag' of the request for logging and statistical purposes
	 * @param {String} params.suggestField - Specify which field to use for suggestions
	 * @param {String} [params.suggestMode=missing] - Specify suggest mode
	 * @param {Number} params.suggestSize - How many suggestions to return in response
	 * @param {Text} params.suggestText - The source text for which the suggestions should be returned
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.trackScores - Whether to calculate and return scores even if they are not used for sorting
	 * @param {Boolean} params.version - Specify whether to return document version as part of a hit
	 * @param {Boolean} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types
	 */
	api.search = ca({
	  params: {
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    explain: {
	      type: 'boolean'
	    },
	    fields: {
	      type: 'list'
	    },
	    fielddataFields: {
	      type: 'list',
	      name: 'fielddata_fields'
	    },
	    from: {
	      type: 'number'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    },
	    preference: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    routing: {
	      type: 'list'
	    },
	    scroll: {
	      type: 'duration'
	    },
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'dfs_query_then_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    },
	    size: {
	      type: 'number'
	    },
	    sort: {
	      type: 'list'
	    },
	    _source: {
	      type: 'list'
	    },
	    _sourceExclude: {
	      type: 'list',
	      name: '_source_exclude'
	    },
	    _sourceInclude: {
	      type: 'list',
	      name: '_source_include'
	    },
	    terminateAfter: {
	      type: 'number',
	      name: 'terminate_after'
	    },
	    stats: {
	      type: 'list'
	    },
	    suggestField: {
	      type: 'string',
	      name: 'suggest_field'
	    },
	    suggestMode: {
	      type: 'enum',
	      'default': 'missing',
	      options: [
	        'missing',
	        'popular',
	        'always'
	      ],
	      name: 'suggest_mode'
	    },
	    suggestSize: {
	      type: 'number',
	      name: 'suggest_size'
	    },
	    suggestText: {
	      type: 'text',
	      name: 'suggest_text'
	    },
	    timeout: {
	      type: 'time'
	    },
	    trackScores: {
	      type: 'boolean',
	      name: 'track_scores'
	    },
	    version: {
	      type: 'boolean'
	    },
	    requestCache: {
	      type: 'boolean',
	      name: 'request_cache'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {Number} params.minScore - Include only documents with a specific `_score` value in the result
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String} params.q - Query in the Lucene query string syntax
	 * @param {String} params.analyzer - The analyzer to use for the query string
	 * @param {Boolean} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)
	 * @param {String} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)
	 * @param {String} params.df - The field to use as default where no field prefix is given in the query string
	 * @param {Boolean} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored
	 * @param {Boolean} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased
	 * @param {String, String[], Boolean} params.index - A comma-separated list of indices to restrict the results
	 * @param {String, String[], Boolean} params.type - A comma-separated list of types to restrict the results
	 */
	api.searchExists = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    minScore: {
	      type: 'number',
	      name: 'min_score'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    q: {
	      type: 'string'
	    },
	    analyzer: {
	      type: 'string'
	    },
	    analyzeWildcard: {
	      type: 'boolean',
	      name: 'analyze_wildcard'
	    },
	    defaultOperator: {
	      type: 'enum',
	      'default': 'OR',
	      options: [
	        'AND',
	        'OR'
	      ],
	      name: 'default_operator'
	    },
	    df: {
	      type: 'string'
	    },
	    lenient: {
	      type: 'boolean'
	    },
	    lowercaseExpandedTerms: {
	      type: 'boolean',
	      name: 'lowercase_expanded_terms'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search/exists',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search/exists',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/exists'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.searchShards = ca({
	  params: {
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    },
	    local: {
	      type: 'boolean'
	    },
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search_shards',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search_shards',
	      req: {
	        index: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_search_shards'
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String, String[], Boolean} params.routing - A comma-separated list of specific routing values
	 * @param {Duration} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search
	 * @param {String} params.searchType - Search operation type
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices
	 * @param {String, String[], Boolean} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types
	 */
	api.searchTemplate = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'list'
	    },
	    scroll: {
	      type: 'duration'
	    },
	    searchType: {
	      type: 'enum',
	      options: [
	        'query_then_fetch',
	        'query_and_fetch',
	        'dfs_query_then_fetch',
	        'dfs_query_and_fetch',
	        'count',
	        'scan'
	      ],
	      name: 'search_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/_search/template',
	      req: {
	        index: {
	          type: 'list'
	        },
	        type: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/_search/template',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_search/template'
	    }
	  ],
	  method: 'POST'
	});

	api.snapshot = namespace();

	/**
	 * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.waitForCompletion - Should this request wait until the operation has completed before returning
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype.create = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      'default': false,
	      name: 'wait_for_completion'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Boolean} params.verify - Whether to verify the repository after creation
	 * @param {String} params.repository - A repository name
	 */
	api.snapshot.prototype.createRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    },
	    verify: {
	      type: 'boolean'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>',
	    req: {
	      repository: {
	        type: 'string'
	      }
	    }
	  },
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype['delete'] = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String, String[], Boolean} params.repository - A comma-separated list of repository names
	 */
	api.snapshot.prototype.deleteRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>',
	    req: {
	      repository: {
	        type: 'list'
	      }
	    }
	  },
	  method: 'DELETE'
	});

	/**
	 * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String, String[], Boolean} params.snapshot - A comma-separated list of snapshot names
	 */
	api.snapshot.prototype.get = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'list'
	      }
	    }
	  }
	});

	/**
	 * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.local - Return local information, do not retrieve the state from master node (default: false)
	 * @param {String, String[], Boolean} params.repository - A comma-separated list of repository names
	 */
	api.snapshot.prototype.getRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    local: {
	      type: 'boolean'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_snapshot/<%=repository%>',
	      req: {
	        repository: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot'
	    }
	  ]
	});

	/**
	 * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Boolean} params.waitForCompletion - Should this request wait until the operation has completed before returning
	 * @param {String} params.repository - A repository name
	 * @param {String} params.snapshot - A snapshot name
	 */
	api.snapshot.prototype.restore = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    waitForCompletion: {
	      type: 'boolean',
	      'default': false,
	      name: 'wait_for_completion'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',
	    req: {
	      repository: {
	        type: 'string'
	      },
	      snapshot: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {String} params.repository - A repository name
	 * @param {String, String[], Boolean} params.snapshot - A comma-separated list of snapshot names
	 */
	api.snapshot.prototype.status = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    }
	  },
	  urls: [
	    {
	      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',
	      req: {
	        repository: {
	          type: 'string'
	        },
	        snapshot: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot/<%=repository%>/_status',
	      req: {
	        repository: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/_snapshot/_status'
	    }
	  ]
	});

	/**
	 * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Date, Number} params.masterTimeout - Explicit operation timeout for connection to master node
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {String} params.repository - A repository name
	 */
	api.snapshot.prototype.verifyRepository = ca({
	  params: {
	    masterTimeout: {
	      type: 'time',
	      name: 'master_timeout'
	    },
	    timeout: {
	      type: 'time'
	    }
	  },
	  url: {
	    fmt: '/_snapshot/<%=repository%>/_verify',
	    req: {
	      repository: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-suggesters.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)
	 * @param {Boolean} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)
	 * @param {String} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random)
	 * @param {String} params.routing - Specific routing value
	 * @param {String, String[], Boolean} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices
	 */
	api.suggest = ca({
	  params: {
	    ignoreUnavailable: {
	      type: 'boolean',
	      name: 'ignore_unavailable'
	    },
	    allowNoIndices: {
	      type: 'boolean',
	      name: 'allow_no_indices'
	    },
	    expandWildcards: {
	      type: 'enum',
	      'default': 'open',
	      options: [
	        'open',
	        'closed',
	        'none',
	        'all'
	      ],
	      name: 'expand_wildcards'
	    },
	    preference: {
	      type: 'string'
	    },
	    routing: {
	      type: 'string'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/_suggest',
	      req: {
	        index: {
	          type: 'list'
	        }
	      }
	    },
	    {
	      fmt: '/_suggest'
	    }
	  ],
	  needBody: true,
	  method: 'POST'
	});

	/**
	 * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {Boolean} params.termStatistics - Specifies if total term frequency and document frequency should be returned.
	 * @param {Boolean} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.
	 * @param {Boolean} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return.
	 * @param {Boolean} [params.offsets=true] - Specifies if term offsets should be returned.
	 * @param {Boolean} [params.positions=true] - Specifies if term positions should be returned.
	 * @param {Boolean} [params.payloads=true] - Specifies if term payloads should be returned.
	 * @param {String} params.preference - Specify the node or shard the operation should be performed on (default: random).
	 * @param {String} params.routing - Specific routing value.
	 * @param {String} params.parent - Parent id of documents.
	 * @param {Boolean} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.index - The index in which the document resides.
	 * @param {String} params.type - The type of the document.
	 * @param {String} params.id - The id of the document, when not specified a doc param should be supplied.
	 */
	api.termvectors = ca({
	  params: {
	    termStatistics: {
	      type: 'boolean',
	      'default': false,
	      required: false,
	      name: 'term_statistics'
	    },
	    fieldStatistics: {
	      type: 'boolean',
	      'default': true,
	      required: false,
	      name: 'field_statistics'
	    },
	    dfs: {
	      type: 'boolean',
	      'default': false,
	      required: false
	    },
	    fields: {
	      type: 'list',
	      required: false
	    },
	    offsets: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    positions: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    payloads: {
	      type: 'boolean',
	      'default': true,
	      required: false
	    },
	    preference: {
	      type: 'string',
	      required: false
	    },
	    routing: {
	      type: 'string',
	      required: false
	    },
	    parent: {
	      type: 'string',
	      required: false
	    },
	    realtime: {
	      type: 'boolean',
	      required: false
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'external',
	        'external_gte',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  urls: [
	    {
	      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        },
	        id: {
	          type: 'string'
	        }
	      }
	    },
	    {
	      fmt: '/<%=index%>/<%=type%>/_termvectors',
	      req: {
	        index: {
	          type: 'string'
	        },
	        type: {
	          type: 'string'
	        }
	      }
	    }
	  ],
	  method: 'POST'
	});

	/**
	 * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String, String[], Boolean} params.fields - A comma-separated list of fields to return in the response
	 * @param {String} params.lang - The script language (default: groovy)
	 * @param {String} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {Number} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)
	 * @param {String} params.routing - Specific routing value
	 * @param {Anything} params.script - The URL-encoded script definition (instead of using request body)
	 * @param {Anything} params.scriptId - The id of a stored script
	 * @param {Boolean} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.update = ca({
	  params: {
	    consistency: {
	      type: 'enum',
	      options: [
	        'one',
	        'quorum',
	        'all'
	      ]
	    },
	    fields: {
	      type: 'list'
	    },
	    lang: {
	      type: 'string'
	    },
	    parent: {
	      type: 'string'
	    },
	    refresh: {
	      type: 'boolean'
	    },
	    retryOnConflict: {
	      type: 'number',
	      name: 'retry_on_conflict'
	    },
	    routing: {
	      type: 'string'
	    },
	    script: {},
	    scriptId: {
	      name: 'script_id'
	    },
	    scriptedUpsert: {
	      type: 'boolean',
	      name: 'scripted_upsert'
	    },
	    timeout: {
	      type: 'time'
	    },
	    timestamp: {
	      type: 'time'
	    },
	    ttl: {
	      type: 'duration'
	    },
	    version: {
	      type: 'number'
	    },
	    versionType: {
	      type: 'enum',
	      options: [
	        'internal',
	        'force'
	      ],
	      name: 'version_type'
	    }
	  },
	  url: {
	    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',
	    req: {
	      index: {
	        type: 'string'
	      },
	      type: {
	        type: 'string'
	      },
	      id: {
	        type: 'string'
	      }
	    }
	  },
	  method: 'POST'
	});

	/**
	 * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request
	 *
	 * @param {Object} params - An object with parameters used to carry out this action
	 * @param {String} params.consistency - Explicit write consistency setting for the operation
	 * @param {String} params.parent - ID of the parent document
	 * @param {Boolean} params.refresh - Refresh the index after performing the operation
	 * @param {String} params.routing - Specific routing value
	 * @param {Date, Number} params.timeout - Explicit operation timeout
	 * @param {Date, Number} params.timestamp - Explicit timestamp for the document
	 * @param {Duration} params.ttl - Expiration time for the document
	 * @param {Number} params.version - Explicit version number for concurrency control
	 * @param {String} params.versionType - Specific version type
	 * @param {String} params.id - Document ID
	 * @param {String} params.index - The name of the index
	 * @param {String} params.type - The type of the document
	 */
	api.create = ca.proxy(api.index, {
	  transform: function (params) {
	    params.op_type = 'create';
	  }
	});
	},{"../client_action":21,"../utils":41}],19:[function(require,module,exports){
	module.exports = {
	  '2.0': require('./2_0'),
	  '1.7': require('./1_7'),
	  '1.6': require('./1_6')
	};

	},{"./1_6":16,"./1_7":17,"./2_0":18}],20:[function(require,module,exports){
	/**
	 * A client that makes requests to Elasticsearch via a {{#crossLink "Transport"}}Transport{{/crossLink}}
	 *
	 * Initializing a client might look something like:
	 *
	 * ```
	 * var client = new es.Client({
	 *   hosts: [
	 *     'es1.net:9200',
	 *     {
	 *       host: 'es2.net',
	 *       port: 9200
	 *     }
	 *   ],
	 *   sniffOnStart: true,
	 *   log: {
	 *     type: 'file',
	 *     level: 'warning'
	 *   }
	 * });
	 * ```
	 *
	 * @class Client
	 * @constructor
	 */

	module.exports = Client;

	var Transport = require('./transport');
	var clientAction = require('./client_action');
	var _ = require('./utils');

	function Client(config) {
	  config = config || {};

	  if (config.__reused) {
	    throw new Error('Do not reuse objects to configure the elasticsearch Client class: ' +
	      'https://github.com/elasticsearch/elasticsearch-js/issues/33');
	  } else {
	    config.__reused = true;
	  }

	  function EsApiClient() {
	    // our client will log minimally by default
	    if (!config.hasOwnProperty('log')) {
	      config.log = 'warning';
	    }

	    if (!config.hosts && !config.host) {
	      config.host = 'http://localhost:9200';
	    }

	    this.close = function () {
	      this.transport.close();
	    };

	    this.transport = new Transport(config);

	    _.each(EsApiClient.prototype, function (Fn, prop) {
	      if (Fn.prototype instanceof clientAction.ApiNamespace) {
	        this[prop] = new Fn(this.transport);
	      }
	    }, this);

	    delete this._namespaces;
	  }


	  EsApiClient.prototype = _.funcEnum(config, 'apiVersion', Client.apis, '1.7');
	  if (!config.sniffEndpoint && EsApiClient.prototype === Client.apis['0.90']) {
	    config.sniffEndpoint = '/_cluster/nodes';
	  }

	  var Constructor = EsApiClient;

	  if (config.plugins) {
	    Constructor.prototype = _.cloneDeep(Constructor.prototype);

	    _.each(config.plugins, function (setup) {
	      Constructor = setup(Constructor, config, {
	        apis: require('./apis'),
	        connectors: require('./connectors'),
	        loggers: require('./loggers'),
	        selectors: require('./selectors'),
	        serializers: require('./serializers'),
	        Client: require('./client'),
	        clientAction: clientAction,
	        Connection: require('./connection'),
	        ConnectionPool: require('./connection_pool'),
	        Errors: require('./errors'),
	        Host: require('./host'),
	        Log: require('./log'),
	        Logger: require('./logger'),
	        NodesToHost: require('./nodes_to_host'),
	        Transport: require('./transport'),
	        utils: require('./utils')
	      }) || Constructor;
	    });
	  }

	  return new Constructor();
	}

	Client.apis = require('./apis');
	},{"./apis":19,"./client":20,"./client_action":21,"./connection":22,"./connection_pool":23,"./connectors":25,"./errors":26,"./host":27,"./log":28,"./logger":29,"./loggers":30,"./nodes_to_host":32,"./selectors":33,"./serializers":37,"./transport":39,"./utils":41}],21:[function(require,module,exports){

	var _ = require('./utils');

	/**
	 * Constructs a client action factory that uses specific defaults
	 * @type {Function}
	 */
	exports.makeFactoryWithModifier = makeFactoryWithModifier;

	/**
	 * Constructs a function that can be called to make a request to ES
	 * @type {Function}
	 */
	exports.factory = makeFactoryWithModifier();

	/**
	 * Constructs a proxy to another api method
	 * @type {Function}
	 */
	exports.proxyFactory = exports.factory.proxy;

	// export so that we can test this
	exports._resolveUrl = resolveUrl;

	exports.ApiNamespace = function() {};
	exports.namespaceFactory = function () {
	  function ClientNamespace(transport) {
	    this.transport = transport;
	  }

	  ClientNamespace.prototype = new exports.ApiNamespace();

	  return ClientNamespace;
	};

	function makeFactoryWithModifier(modifier) {
	  modifier = modifier || _.identity;

	  var factory = function (spec) {
	    spec = modifier(spec);

	    if (!_.isPlainObject(spec.params)) {
	      spec.params = {};
	    }

	    if (!spec.method) {
	      spec.method = 'GET';
	    }

	    function action(params, cb) {
	      if (typeof params === 'function') {
	        cb = params;
	        params = {};
	      } else {
	        params = params || {};
	        cb = typeof cb === 'function' ? cb : null;
	      }

	      try {
	        return exec(this.transport, spec, _.clone(params), cb);
	      } catch (e) {
	        if (typeof cb === 'function') {
	          _.nextTick(cb, e);
	        } else {
	          var def = this.transport.defer();
	          def.reject(e);
	          return def.promise;
	        }
	      }
	    }

	    action.spec = spec;

	    return action;
	  };

	  factory.proxy = function (fn, spec) {
	    return function (params, cb) {
	      if (typeof params === 'function') {
	        cb = params;
	        params = {};
	      } else {
	        params = params || {};
	        cb = typeof cb === 'function' ? cb : null;
	      }

	      if (spec.transform) {
	        spec.transform(params);
	      }

	      return fn.call(this, params, cb);
	    };
	  };

	  return factory;
	}

	var castType = {
	  'enum': function validSelection(param, val, name) {
	    if (_.isString(val) && val.indexOf(',') > -1) {
	      val = commaSepList(val);
	    }

	    if (_.isArray(val)) {
	      return val.map(function (v) {
	        return validSelection(param, v, name);
	      }).join(',');
	    }

	    /* jshint eqeqeq: false */
	    for (var i = 0; i < param.options.length; i++) {
	      if (param.options[i] == val) {
	        return param.options[i];
	      }
	    }
	    throw new TypeError('Invalid ' + name + ': expected ' + (
	      param.options.length > 1
	      ? 'one of ' + param.options.join(',')
	      : param.options[0]
	    ));
	  },
	  duration: function (param, val, name) {
	    if (_.isNumeric(val) || _.isInterval(val)) {
	      return val;
	    } else {
	      throw new TypeError(
	        'Invalid ' + name + ': expected a number or interval ' +
	        '(an integer followed by one of M, w, d, h, m, s, y or ms).'
	      );
	    }
	  },
	  list: function (param, val, name) {
	    switch (typeof val) {
	    case 'number':
	    case 'boolean':
	      return '' + val;
	    case 'string':
	      val = commaSepList(val);
	      /* falls through */
	    case 'object':
	      if (_.isArray(val)) {
	        return val.join(',');
	      }
	      /* falls through */
	    default:
	      throw new TypeError('Invalid ' + name + ': expected be a comma seperated list, array, number or string.');
	    }
	  },
	  'boolean': function (param, val) {
	    val = _.isString(val) ? val.toLowerCase() : val;
	    return (val === 'no' || val === 'off') ? false : !!val;
	  },
	  number: function (param, val, name) {
	    if (_.isNumeric(val)) {
	      return val * 1;
	    } else {
	      throw new TypeError('Invalid ' + name + ': expected a number.');
	    }
	  },
	  string: function (param, val, name) {
	    switch (typeof val) {
	    case 'number':
	    case 'string':
	      return '' + val;
	    default:
	      throw new TypeError('Invalid ' + name + ': expected a string.');
	    }
	  },
	  time: function (param, val, name) {
	    if (typeof val === 'string') {
	      return val;
	    }
	    else if (_.isNumeric(val)) {
	      return '' + val;
	    }
	    else if (val instanceof Date) {
	      return '' + val.getTime();
	    }
	    else {
	      throw new TypeError('Invalid ' + name + ': expected some sort of time.');
	    }
	  }
	};

	function resolveUrl(url, params) {
	  var vars = {}, i, key;

	  if (url.req) {
	    // url has required params
	    if (!url.reqParamKeys) {
	      // create cached key list on demand
	      url.reqParamKeys = _.keys(url.req);
	    }

	    for (i = 0; i < url.reqParamKeys.length; i ++) {
	      key = url.reqParamKeys[i];
	      if (!params.hasOwnProperty(key) || params[key] == null) {
	        // missing a required param
	        return false;
	      } else {
	        // cast of copy required param
	        if (castType[url.req[key].type]) {
	          vars[key] = castType[url.req[key].type](url.req[key], params[key], key);
	        } else {
	          vars[key] = params[key];
	        }
	      }
	    }
	  }

	  if (url.opt) {
	    // url has optional params
	    if (!url.optParamKeys) {
	      url.optParamKeys = _.keys(url.opt);
	    }

	    for (i = 0; i < url.optParamKeys.length; i ++) {
	      key = url.optParamKeys[i];
	      if (params[key]) {
	        if (castType[url.opt[key].type] || params[key] == null) {
	          vars[key] = castType[url.opt[key].type](url.opt[key], params[key], key);
	        } else {
	          vars[key] = params[key];
	        }
	      } else {
	        vars[key] = url.opt[key]['default'];
	      }
	    }
	  }

	  if (!url.template) {
	    // compile the template on demand
	    url.template = _.template(url.fmt);
	  }

	  return url.template(_.transform(vars, function (note, val, name) {
	    // encode each value
	    note[name] = encodeURIComponent(val);
	    // remove it from the params so that it isn't sent to the final request
	    delete params[name];
	  }, {}));
	}


	function exec(transport, spec, params, cb) {
	  var request = {
	    method: spec.method
	  };
	  var query = {};
	  var i;

	  // pass the timeout from the spec
	  if (spec.requestTimeout) {
	    request.requestTimeout = spec.requestTimeout;
	  }

	  if (!params.body && spec.paramAsBody) {
	    params.body = params[spec.paramAsBody];
	    delete params[spec.paramAsBody];
	  }

	  // verify that we have the body if needed
	  if (spec.needsBody && !params.body) {
	    throw new TypeError('A request body is required.');
	  }

	  // control params
	  if (spec.bulkBody) {
	    request.bulkBody = true;
	  }

	  if (spec.method === 'HEAD') {
	    request.castExists = true;
	  }

	  // pick the url
	  if (spec.url) {
	    // only one url option
	    request.path = resolveUrl(spec.url, params);
	  } else {
	    for (i = 0; i < spec.urls.length; i++) {
	      if (request.path = resolveUrl(spec.urls[i], params)) {
	        break;
	      }
	    }
	  }

	  if (!request.path) {
	    // there must have been some mimimun requirements that were not met
	    var minUrl = spec.url || spec.urls[spec.urls.length - 1];
	    throw new TypeError('Unable to build a path with those params. Supply at least ' + _.keys(minUrl.req).join(', '));
	  }

	  // build the query string
	  if (!spec.paramKeys) {
	    // build a key list on demand
	    spec.paramKeys = _.keys(spec.params);
	    spec.requireParamKeys = _.transform(spec.params, function (req, param, key) {
	      if (param.required) {
	        req.push(key);
	      }
	    }, []);
	  }

	  for (var key in params) {
	    if (params.hasOwnProperty(key) && params[key] != null) {
	      switch (key) {
	      case 'body':
	      case 'headers':
	      case 'requestTimeout':
	      case 'maxRetries':
	        request[key] = params[key];
	        break;
	      case 'ignore':
	        request.ignore = _.isArray(params[key]) ? params[key] : [params[key]];
	        break;
	      case 'method':
	        request.method = _.toUpperString(params[key]);
	        break;
	      default:
	        var paramSpec = spec.params[key];
	        if (paramSpec) {
	          // param keys don't always match the param name, in those cases it's stored in the param def as "name"
	          paramSpec.name = paramSpec.name || key;
	          if (params[key] != null) {
	            if (castType[paramSpec.type]) {
	              query[paramSpec.name] = castType[paramSpec.type](paramSpec, params[key], key);
	            } else {
	              query[paramSpec.name] = params[key];
	            }

	            if (paramSpec['default'] && query[paramSpec.name] === paramSpec['default']) {
	              delete query[paramSpec.name];
	            }
	          }
	        } else {
	          query[key] = params[key];
	        }
	      }
	    }
	  }

	  for (i = 0; i < spec.requireParamKeys.length; i ++) {
	    if (!query.hasOwnProperty(spec.requireParamKeys[i])) {
	      throw new TypeError('Missing required parameter ' + spec.requireParamKeys[i]);
	    }
	  }

	  request.query = query;

	  return transport.request(request, cb);
	}

	function commaSepList(str) {
	  return str.split(',').map(function (i) {
	    return i.trim();
	  });
	}
	},{"./utils":41}],22:[function(require,module,exports){
	module.exports = ConnectionAbstract;

	var _ = require('./utils');
	var EventEmitter = require('events').EventEmitter;
	var Log = require('./log');
	var Host = require('./host');
	var errors = require('./errors');

	/**
	 * Abstract class used for Connection classes
	 * @class ConnectionAbstract
	 * @constructor
	 */
	function ConnectionAbstract(host, config) {
	  config = config || {};
	  EventEmitter.call(this);

	  this.log = config.log || new Log();
	  this.pingTimeout = config.pingTimeout || 3000;

	  if (!host) {
	    throw new TypeError('Missing host');
	  } else if (host instanceof Host) {
	    this.host = host;
	  } else {
	    throw new TypeError('Invalid host');
	  }

	  _.makeBoundMethods(this);
	}
	_.inherits(ConnectionAbstract, EventEmitter);

	/**
	 * Make a request using this connection. Must be overridden by Connection classes, which can add whatever keys to
	 * params that they like. These are just the basics.
	 *
	 * @param [params] {Object} - The parameters for the request
	 * @param params.path {String} - The path for which you are requesting
	 * @param params.method {String} - The HTTP method for the request (GET, HEAD, etc.)
	 * @param params.requestTimeout {Integer} - The amount of time in milliseconds that this request should be allowed to run for.
	 * @param cb {Function} - A callback to be called once with `cb(err, responseBody, responseStatus)`
	 */
	ConnectionAbstract.prototype.request = function () {
	  throw new Error('Connection#request must be overwritten by the Connector');
	};

	ConnectionAbstract.prototype.ping = function (params, cb) {
	  if (typeof params === 'function') {
	    cb = params;
	    params = null;
	  } else {
	    cb = typeof cb === 'function' ? cb : null;
	  }

	  var requestTimeout = this.pingTimeout;
	  var requestTimeoutId;
	  var aborted;
	  var abort;

	  if (params && params.hasOwnProperty('requestTimeout')) {
	    requestTimeout = params.requestTimeout;
	  }

	  abort = this.request(_.defaults(params || {}, {
	    path: '/',
	    method: 'HEAD'
	  }), function (err) {
	    if (aborted) {
	      return;
	    }
	    clearTimeout(requestTimeoutId);
	    if (cb) {
	      cb(err);
	    }
	  });

	  if (requestTimeout) {
	    requestTimeoutId = setTimeout(function () {
	      if (abort) {
	        abort();
	      }
	      aborted = true;
	      if (cb) {
	        cb(new errors.RequestTimeout('Ping Timeout after ' + requestTimeout + 'ms'));
	      }
	    }, requestTimeout);
	  }
	};

	ConnectionAbstract.prototype.setStatus = function (status) {
	  var origStatus = this.status;
	  this.status = status;

	  this.emit('status set', status, origStatus, this);

	  if (status === 'closed') {
	    this.removeAllListeners();
	  }
	};
	},{"./errors":26,"./host":27,"./log":28,"./utils":41,"events":4}],23:[function(require,module,exports){
	var process=require("__browserify_process");/**
	 * Manager of connections to a node(s), capable of ensuring that connections are clear and living
	 * before providing them to the application
	 *
	 * @class ConnectionPool
	 * @constructor
	 * @param {Object} config - The config object passed to the transport.
	 */

	module.exports = ConnectionPool;

	var _ = require('./utils');
	var Log = require('./log');

	function ConnectionPool(config) {
	  config = config || {};
	  _.makeBoundMethods(this);

	  if (!config.log) {
	    this.log = new Log();
	    config.log = this.log;
	  } else {
	    this.log = config.log;
	  }

	  // we will need this when we create connections down the road
	  this._config = config;

	  // get the selector config var
	  this.selector = _.funcEnum(config, 'selector', ConnectionPool.selectors, ConnectionPool.defaultSelector);

	  // get the connection class
	  this.Connection = _.funcEnum(config, 'connectionClass', ConnectionPool.connectionClasses,
	    ConnectionPool.defaultConnectionClass);

	  // time that connections will wait before being revived
	  this.deadTimeout = config.hasOwnProperty('deadTimeout') ? config.deadTimeout : 60000;
	  this.maxDeadTimeout = config.hasOwnProperty('maxDeadTimeout') ? config.maxDeadTimeout : 18e5;
	  this.calcDeadTimeout = _.funcEnum(config, 'calcDeadTimeout', ConnectionPool.calcDeadTimeoutOptions, 'exponential');

	  // a map of connections to their "id" property, used when sniffing
	  this.index = {};

	  this._conns = {
	    alive: [],
	    dead: []
	  };

	  // information about timeouts for dead connections
	  this._timeouts = [];
	}

	// selector options
	ConnectionPool.selectors = require('./selectors');
	ConnectionPool.defaultSelector = 'roundRobin';

	// get the connection options
	ConnectionPool.connectionClasses = require('./connectors');
	ConnectionPool.defaultConnectionClass = ConnectionPool.connectionClasses._default;
	delete ConnectionPool.connectionClasses._default;

	// the function that calculates timeouts based on attempts
	ConnectionPool.calcDeadTimeoutOptions = {
	  flat: function (attempt, baseTimeout) {
	    return baseTimeout;
	  },
	  exponential: function (attempt, baseTimeout) {
	    return Math.min(baseTimeout * 2 * Math.pow(2, (attempt * 0.5 - 1)), this.maxDeadTimeout);
	  }
	};

	/**
	 * Selects a connection from the list using the this.selector
	 * Features:
	 *  - detects if the selector is async or not
	 *  - sync selectors should still return asynchronously
	 *  - catches errors in sync selectors
	 *  - automatically selects the first dead connection when there no living connections
	 *
	 * @param  {Function} cb [description]
	 * @return {[type]}      [description]
	 */
	ConnectionPool.prototype.select = function (cb) {
	  if (this._conns.alive.length) {
	    if (this.selector.length > 1) {
	      this.selector(this._conns.alive, cb);
	    } else {
	      try {
	        _.nextTick(cb, void 0, this.selector(this._conns.alive));
	      } catch (e) {
	        cb(e);
	      }
	    }
	  } else if (this._timeouts.length) {
	    this._selectDeadConnection(cb);
	  } else {
	    _.nextTick(cb, void 0);
	  }
	};

	/**
	 * Handler for the "set status" event emitted but the connections. It will move
	 * the connection to it's proper connection list (unless it was closed).
	 *
	 * @param  {String} status - the connection's new status
	 * @param  {String} oldStatus - the connection's old status
	 * @param  {ConnectionAbstract} connection - the connection object itself
	 */
	ConnectionPool.prototype.onStatusSet = _.handler(function (status, oldStatus, connection) {
	  var index;

	  var died = (status === 'dead');
	  var wasAlreadyDead = (died && oldStatus === 'dead');
	  var revived = (!died && oldStatus === 'dead');
	  var noChange = (oldStatus === status);
	  var from = this._conns[oldStatus];
	  var to = this._conns[status];

	  if (noChange && !died) {
	    return true;
	  }

	  if (from !== to) {
	    if (_.isArray(from)) {
	      index = from.indexOf(connection);
	      if (index !== -1) {
	        from.splice(index, 1);
	      }
	    }

	    if (_.isArray(to)) {
	      index = to.indexOf(connection);
	      if (index === -1) {
	        to.push(connection);
	      }
	    }
	  }

	  if (died) {
	    this._onConnectionDied(connection, wasAlreadyDead);
	  }

	  if (revived) {
	    this._onConnectionRevived(connection);
	  }
	});

	/**
	 * Handler used to clear the times created when a connection dies
	 * @param  {ConnectionAbstract} connection
	 */
	ConnectionPool.prototype._onConnectionRevived = function (connection) {
	  var timeout;
	  for (var i = 0; i < this._timeouts.length; i++)  {
	    if (this._timeouts[i].conn === connection) {
	      timeout = this._timeouts[i];
	      if (timeout.id) {
	        clearTimeout(timeout.id);
	      }
	      this._timeouts.splice(i, 1);
	      break;
	    }
	  }
	};

	/**
	 * Handler used to update or create a timeout for the connection which has died
	 * @param  {ConnectionAbstract} connection
	 * @param  {Boolean} alreadyWasDead - If the connection was preivously dead this must be set to true
	 */
	ConnectionPool.prototype._onConnectionDied = function (connection, alreadyWasDead) {
	  var timeout;
	  if (alreadyWasDead) {
	    for (var i = 0; i < this._timeouts.length; i++)  {
	      if (this._timeouts[i].conn === connection) {
	        timeout = this._timeouts[i];
	        break;
	      }
	    }
	  } else {
	    timeout = {
	      conn: connection,
	      attempt: 0,
	      revive: function (cb) {
	        timeout.attempt++;
	        connection.ping(function (err) {
	          connection.setStatus(err ? 'dead' : 'alive');
	          if (cb && typeof cb === 'function') {
	            cb(err);
	          }
	        });
	      }
	    };
	    this._timeouts.push(timeout);
	  }

	  if (timeout.id) {
	    clearTimeout(timeout.id);
	  }

	  var ms = this.calcDeadTimeout(timeout.attempt, this.deadTimeout);
	  timeout.id = setTimeout(timeout.revive, ms);
	  timeout.runAt = _.now() + ms;
	};

	ConnectionPool.prototype._selectDeadConnection = function (cb) {
	  var orderedTimeouts = _.sortBy(this._timeouts, 'runAt');
	  var log = this.log;

	  process.nextTick(function next() {
	    var timeout = orderedTimeouts.shift();
	    if (!timeout) {
	      cb(void 0);
	      return;
	    }

	    if (!timeout.conn) {
	      next();
	      return;
	    }

	    if (timeout.conn.status === 'dead') {
	      timeout.revive(function (err) {
	        if (err) {
	          log.warning('Unable to revive connection: ' + timeout.conn.id);
	          process.nextTick(next);
	        } else {
	          cb(void 0, timeout.conn);
	        }
	      });
	    } else {
	      cb(void 0, timeout.conn);
	    }
	  });
	};

	/**
	 * Returns a random list of nodes from the living connections up to the limit.
	 * If there are no living connections it will fall back to the dead connections.
	 * If there are no dead connections it will return nothing.
	 *
	 * This is used for testing (when we just want the one existing node)
	 * and sniffing, where using the selector to get all of the living connections
	 * is not reasonable.
	 *
	 * @param {string} [status] - optional status of the connection to fetch
	 * @param {Number} [limit] - optional limit on the number of connections to return
	 */
	ConnectionPool.prototype.getConnections = function (status, limit) {
	  var list;
	  if (status) {
	    list = this._conns[status];
	  } else {
	    list = this._conns[this._conns.alive.length ? 'alive' : 'dead'];
	  }

	  if (limit == null) {
	    return list.slice(0);
	  } else {
	    return _.shuffle(list).slice(0, limit);
	  }
	};

	/**
	 * Add a single connection to the pool and change it's status to "alive".
	 * The connection should inherit from ConnectionAbstract
	 *
	 * @param {ConnectionAbstract} connection - The connection to add
	 */
	ConnectionPool.prototype.addConnection = function (connection) {
	  if (!connection.id) {
	    connection.id = connection.host.toString();
	  }

	  if (!this.index[connection.id]) {
	    this.log.info('Adding connection to', connection.id);
	    this.index[connection.id] = connection;
	    connection.on('status set', this.bound.onStatusSet);
	    connection.setStatus('alive');
	  }
	};

	/**
	 * Remove a connection from the pool, and set it's status to "closed".
	 *
	 * @param  {ConnectionAbstract} connection - The connection to remove/close
	 */
	ConnectionPool.prototype.removeConnection = function (connection) {
	  if (!connection.id) {
	    connection.id = connection.host.toString();
	  }

	  if (this.index[connection.id]) {
	    delete this.index[connection.id];
	    connection.setStatus('closed');
	    connection.removeListener('status set', this.bound.onStatusSet);
	  }
	};

	/**
	 * Override the internal node list. All connections that are not in the new host
	 * list are closed and removed. Non-unique hosts are ignored.
	 *
	 * @param {Host[]} hosts - An array of Host instances.
	 */
	ConnectionPool.prototype.setHosts = function (hosts) {
	  var connection;
	  var i;
	  var id;
	  var host;
	  var toRemove = _.clone(this.index);

	  for (i = 0; i < hosts.length; i++) {
	    host = hosts[i];
	    id = host.toString();
	    if (this.index[id]) {
	      delete toRemove[id];
	    } else {
	      connection = new this.Connection(host, this._config);
	      connection.id = id;
	      this.addConnection(connection);
	    }
	  }

	  var removeIds = _.keys(toRemove);
	  for (i = 0; i < removeIds.length; i++) {
	    this.removeConnection(this.index[removeIds[i]]);
	  }
	};

	/**
	 * Close the conncetion pool, as well as all of it's connections
	 */
	ConnectionPool.prototype.close = function () {
	  this.setHosts([]);
	};
	ConnectionPool.prototype.empty = ConnectionPool.prototype.close;
	},{"./connectors":25,"./log":28,"./selectors":33,"./utils":41,"__browserify_process":13}],24:[function(require,module,exports){
	/**
	 * Connection that registers a module with angular, using angular's $http service
	 * to communicate with ES.
	 *
	 * @class connections.Angular
	 */
	module.exports = AngularConnector;

	var _ = require('../utils');
	var ConnectionAbstract = require('../connection');
	var ConnectionFault = require('../errors').ConnectionFault;

	function AngularConnector(host, config) {
	  ConnectionAbstract.call(this, host, config);

	  var self = this;
	  config.$injector.invoke(['$http', '$q', function ($http, $q) {
	    self.$q = $q;
	    self.$http = $http;
	  }]);

	}
	_.inherits(AngularConnector, ConnectionAbstract);

	AngularConnector.prototype.request = function (params, cb) {
	  var abort = this.$q.defer();

	  this.$http({
	    method: params.method,
	    url: this.host.makeUrl(params),
	    data: params.body,
	    cache: false,
	    headers: this.host.getHeaders(params.headers),
	    transformRequest: [],
	    transformResponse: [],
	    // not actually for timing out, that's handled by the transport
	    timeout: abort.promise
	  }).then(function (response) {
	    cb(null, response.data, response.status, response.headers());
	  }, function (err) {
	    if (err.status) {
	      cb(null, err.data, err.status, err.headers());
	    } else {
	      cb(new ConnectionFault(err.message));
	    }
	  });

	  return function () {
	    abort.resolve();
	  };
	};
	},{"../connection":22,"../errors":26,"../utils":41}],25:[function(require,module,exports){
	var opts = {
	  xhr: require('./xhr'),
	  jquery: require('./jquery'),
	  angular: require('./angular')
	};
	var _ = require('../utils');

	// remove modules that have been ignored by browserify
	_.each(opts, function (conn, name) {
	  if (typeof conn !== 'function') {
	    delete opts[name];
	  }
	});

	// custom _default specification
	if (opts.xhr) {
	  opts._default = 'xhr';
	} else if (opts.angular) {
	  opts._default = 'angular';
	} else {
	  opts._default = 'jquery';
	}

	module.exports = opts;

	},{"../utils":41,"./angular":24,"./jquery":1,"./xhr":1}],26:[function(require,module,exports){
	var _ = require('./utils');
	var errors = module.exports;

	var canCapture = (typeof Error.captureStackTrace === 'function');
	var canStack = !!(new Error()).stack;

	function ErrorAbstract(msg, constructor, metadata) {
	  this.message = msg;

	  Error.call(this, this.message);

	  if (canCapture) {
	    Error.captureStackTrace(this, constructor);
	  }
	  else if (canStack) {
	    this.stack = (new Error()).stack;
	  }
	  else {
	    this.stack = '';
	  }

	  if (metadata) {
	    _.assign(this, metadata);

	    this.toString = function () {
	      return msg + ' :: ' + JSON.stringify(metadata);
	    };

	    this.toJSON = function () {
	      return _.assign({
	        msg: msg
	      }, metadata);
	    };
	  }
	}
	errors._Abstract = ErrorAbstract;
	_.inherits(ErrorAbstract, Error);

	/**
	 * Connection Error
	 * @param {String} [msg] - An error message that will probably end up in a log.
	 */
	errors.ConnectionFault = function ConnectionFault(msg) {
	  ErrorAbstract.call(this, msg || 'Connection Failure', errors.ConnectionFault);
	};
	_.inherits(errors.ConnectionFault, ErrorAbstract);

	/**
	 * No Living Connections
	 * @param {String} [msg] - An error message that will probably end up in a log.
	 */
	errors.NoConnections = function NoConnections(msg) {
	  ErrorAbstract.call(this, msg || 'No Living connections', errors.NoConnections);
	};
	_.inherits(errors.NoConnections, ErrorAbstract);

	/**
	 * Generic Error
	 * @param {String} [msg] - An error message that will probably end up in a log.
	 */
	errors.Generic = function Generic(msg, metadata) {
	  ErrorAbstract.call(this, msg || 'Generic Error', errors.Generic, metadata);
	};
	_.inherits(errors.Generic, ErrorAbstract);

	/**
	 * Request Timeout Error
	 * @param {String} [msg] - An error message that will probably end up in a log.
	 */
	errors.RequestTimeout = function RequestTimeout(msg) {
	  ErrorAbstract.call(this, msg || 'Request Timeout', errors.RequestTimeout);
	};
	_.inherits(errors.RequestTimeout, ErrorAbstract);


	/**
	 * Request Body could not be parsed
	 * @param {String} [msg] - An error message that will probably end up in a log.
	 */
	errors.Serialization = function Serialization(msg) {
	  ErrorAbstract.call(this, msg || 'Unable to parse/serialize body', errors.Serialization);
	};
	_.inherits(errors.Serialization, ErrorAbstract);


	/**
	 * Thrown when a browser compatability issue is detected (cough, IE, cough)
	 */
	errors.RequestTypeError = function RequestTypeError(feature) {
	  ErrorAbstract.call(this, 'Cross-domain AJAX requests ' + feature + ' are not supported', errors.RequestTypeError);
	};
	_.inherits(errors.RequestTypeError, ErrorAbstract);

	var statusCodes = {
	  300: 'Multiple Choices',
	  301: 'Moved Permanently',
	  302: 'Found',
	  303: 'See Other',
	  304: 'Not Modified',
	  305: 'Use Proxy',
	  307: 'Temporary Redirect',
	  308: 'Permanent Redirect',
	  400: 'Bad Request',
	  401: 'Authentication Exception',
	  402: 'Payment Required',
	  403: 'Authorization Exception',
	  404: 'Not Found',
	  405: 'Method Not Allowed',
	  406: 'Not Acceptable',
	  407: 'Proxy Authentication Required',
	  408: 'Request Timeout',
	  409: 'Conflict',
	  410: 'Gone',
	  411: 'Length Required',
	  412: 'Precondition Failed',
	  413: 'Request Entity Too Large',
	  414: 'Request URIToo Long',
	  415: 'Unsupported Media Type',
	  416: 'Requested Range Not Satisfiable',
	  417: 'Expectation Failed',
	  418: 'Im ATeapot',
	  421: 'Too Many Connections From This IP',
	  426: 'Upgrade Required',
	  429: 'Too Many Requests',
	  450: 'Blocked By Windows Parental Controls',
	  494: 'Request Header Too Large',
	  497: 'HTTPTo HTTPS',
	  499: 'Client Closed Request',

	  500: 'Internal Server Error',
	  501: 'Not Implemented',
	  502: 'Bad Gateway',
	  503: 'Service Unavailable',
	  504: 'Gateway Timeout',
	  505: 'HTTPVersion Not Supported',
	  506: 'Variant Also Negotiates',
	  510: 'Not Extended'
	};

	_.each(statusCodes, function (name, status) {
	  var className = _.studlyCase(name);

	  function StatusCodeError(msg, metadata) {
	    this.status = status;

	    var esErrObject = null;
	    if (_.isPlainObject(msg)) {
	      esErrObject = msg;
	      msg = null;
	    }

	    if (!esErrObject) {
	      // errors from es now come in two forms, an error string < 2.0 and
	      // an object >= 2.0
	      // TODO: remove after dropping support for < 2.0
	      ErrorAbstract.call(this, msg || name, StatusCodeError);
	      return this;
	    }

	    msg = [].concat(esErrObject.root_cause || []).reduce(function (memo, cause) {
	      if (memo) memo += ' (and) ';

	      memo += '[' + cause.type + '] ' + cause.reason;

	      var extraData = _.omit(cause, ['type', 'reason']);
	      if (_.size(extraData)) {
	        memo += ', with: ' + JSON.stringify(extraData);
	      }

	      return memo;
	    }, '');

	    if (!msg) {
	      if (esErrObject.type) msg += '[' + esErrObject.type + '] ';
	      if (esErrObject.reason) msg += esErrObject.reason;
	    }

	    ErrorAbstract.call(this, msg || name, StatusCodeError, metadata);
	    return this;
	  }

	  _.inherits(StatusCodeError, ErrorAbstract);
	  errors[className] = StatusCodeError;
	  errors[status] = StatusCodeError;
	});
	},{"./utils":41}],27:[function(require,module,exports){
	var Buffer=require("__browserify_Buffer").Buffer;/**
	 * Class to wrap URLS, formatting them and maintaining their separate details
	 * @type {[type]}
	 */
	module.exports = Host;

	var url = require('url');
	var qs = require('querystring');
	var _ = require('./utils');

	var startsWithProtocolRE = /^([a-z]+:)?\/\//;
	var defaultProto = 'http:';
	var btoa;

	/* jshint ignore:start */
	if (typeof window !== 'undefined') {
	  defaultProto = window.location.protocol;
	  btoa = window.btoa;
	}
	/* jshint ignore:end */

	btoa = btoa || function (data) {
	  return (new Buffer(data, 'utf8')).toString('base64');
	};

	var urlParseFields = [
	  'protocol', 'hostname', 'pathname', 'port', 'auth', 'query'
	];

	var simplify = ['host', 'path'];

	var sslDefaults = {
	  pfx: null,
	  key: null,
	  passphrase: null,
	  cert: null,
	  ca: null,
	  ciphers: null,
	  rejectUnauthorized: false,
	  secureProtocol: null
	};

	// simple reference used when formatting as a url
	// and defines when parsing from a string
	Host.defaultPorts = {
	  http: 80,
	  https: 443
	};

	function Host(config, globalConfig) {
	  config = _.clone(config || {});
	  globalConfig = globalConfig || {};

	  // defaults
	  this.protocol = 'http';
	  this.host = 'localhost';
	  this.path = '';
	  this.port = 9200;
	  this.query = null;
	  this.headers = null;
	  this.suggestCompression = !!globalConfig.suggestCompression;

	  this.ssl = _.defaults({}, config.ssl || {}, globalConfig.ssl || {}, sslDefaults);

	  if (typeof config === 'string') {
	    var firstColon = config.indexOf(':');
	    var firstSlash = config.indexOf('/');
	    var noSlash = firstSlash === -1;
	    var portNoPath = firstColon > -1 && noSlash;
	    var portWithPath = !portNoPath && firstColon < firstSlash;
	    if ((noSlash || portNoPath || portWithPath) && !startsWithProtocolRE.test(config)) {
	      config = defaultProto + '//' + config;
	    }
	    config = _.pick(url.parse(config, false, true), urlParseFields);
	    // default logic for the port is to use 9200 for the default. When a string is specified though,
	    // we will use the default from the protocol of the string.
	    if (!config.port) {
	      var proto = config.protocol || 'http';
	      if (proto.charAt(proto.length - 1) === ':') {
	        proto = proto.substring(0, proto.length - 1);
	      }
	      if (Host.defaultPorts[proto]) {
	        config.port = Host.defaultPorts[proto];
	      }
	    }
	  }

	  if (_.isObject(config)) {
	    // move hostname/portname to host/port semi-intelligently.
	    _.each(simplify, function (to) {
	      var from = to + 'name';
	      if (config[from] && config[to]) {
	        if (config[to].indexOf(config[from]) === 0) {
	          config[to] = config[from];
	        }
	      } else if (config[from]) {
	        config[to] = config[from];
	      }
	      delete config[from];
	    });
	  } else {
	    config = {};
	  }

	  if (config.auth) {
	    config.headers = config.headers || {};
	    config.headers.Authorization = 'Basic ' + btoa(config.auth);
	    delete config.auth;
	  }

	  _.forOwn(config, function (val, prop) {
	    if (val != null) this[prop] = _.clone(val);
	  }, this);

	  // make sure the query string is parsed
	  if (this.query === null) {
	    // majority case
	    this.query = {};
	  } else if (!_.isPlainObject(this.query)) {
	    this.query = qs.parse(this.query);
	  }

	  // make sure that the port is a number
	  if (_.isNumeric(this.port)) {
	    this.port = parseInt(this.port, 10);
	  } else {
	    this.port = 9200;
	  }

	  // make sure the path starts with a leading slash
	  if (this.path === '/') {
	    this.path = '';
	  } else if (this.path && this.path.charAt(0) !== '/') {
	    this.path = '/' + (this.path || '');
	  }

	  // strip trailing ':' on the protocol (when config comes from url.parse)
	  if (this.protocol.substr(-1) === ':') {
	    this.protocol = this.protocol.substring(0, this.protocol.length - 1);
	  }
	}

	Host.prototype.makeUrl = function (params) {
	  params = params || {};
	  // build the port
	  var port = '';
	  if (this.port !== Host.defaultPorts[this.protocol]) {
	    // add an actual port
	    port = ':' + this.port;
	  }

	  // build the path
	  var path = '' + (this.path || '') + (params.path || '');

	  // if path doesn't start with '/' add it.
	  if (path.charAt(0) !== '/') {
	    path = '/' + path;
	  }

	  // build the query string
	  var query = qs.stringify(this.getQuery(params.query));

	  if (this.host) {
	    return this.protocol + '://' + this.host + port + path + (query ? '?' + query : '');
	  } else {
	    return path + (query ? '?' + query : '');
	  }
	};

	function objectPropertyGetter(prop, preOverride) {
	  return function (overrides) {
	    if (preOverride) {
	      overrides = preOverride.call(this, overrides);
	    }

	    var obj = this[prop];
	    if (!obj && !overrides) {
	      return null;
	    }

	    if (overrides) {
	      obj = _.assign({}, obj, overrides);
	    }

	    return _.size(obj) ? obj : null;
	  };
	}

	Host.prototype.getHeaders = objectPropertyGetter('headers', function (overrides) {
	  if (!this.suggestCompression) {
	    return overrides;
	  }

	  return _.defaults(overrides || {}, {
	    'Accept-Encoding': 'gzip,deflate'
	  });
	});

	Host.prototype.getQuery = objectPropertyGetter('query', function (query) {
	  return typeof query === 'string' ? qs.parse(query) : query;
	});

	Host.prototype.toString = function () {
	  return this.makeUrl();
	};

	},{"./utils":41,"__browserify_Buffer":12,"querystring":6,"url":7}],28:[function(require,module,exports){
	var process=require("__browserify_process");var _ = require('./utils');
	var url = require('url');
	var EventEmitter = require('events').EventEmitter;

	/**
	 * Log bridge, which is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter)
	 * that sends events to one or more outputs/loggers. Setup these loggers by
	 * specifying their config as the first argument, or by passing it to addOutput().
	 *
	 * @class Log
	 * @uses Loggers.Stdio
	 * @constructor
	 * @param {string|Object|ArrayOfStrings|ArrayOfObjects} output - Either the level
	 *  to setup a single logger, a full config object for alogger, or an array of
	 *  config objects to use for creating log outputs.
	 * @param {string} output.level - One of the keys in Log.levels (error, warning, etc.)
	 * @param {string} output.type - The name of the logger to use for this output
	 */
	function Log(config) {
	  config = config || {};

	  var i;
	  var outputs;

	  if (config.log) {
	    if (_.isArrayOfStrings(config.log)) {
	      outputs = [{
	        levels: config.log
	      }];
	    } else {
	      outputs = _.createArray(config.log, function (val) {
	        if (_.isPlainObject(val)) {
	          return val;
	        }
	        if (typeof val === 'string') {
	          return {
	            level: val
	          };
	        }
	      });
	    }

	    if (!outputs) {
	      throw new TypeError('Invalid logging output config. Expected either a log level, array of log levels, ' +
	        'a logger config object, or an array of logger config objects.');
	    }

	    for (i = 0; i < outputs.length; i++) {
	      this.addOutput(outputs[i]);
	    }
	  }
	}
	_.inherits(Log, EventEmitter);

	Log.loggers = require('./loggers');

	Log.prototype.close = function () {
	  this.emit('closing');
	  if (this.listenerCount()) {
	    console.error('Something is still listening for log events, but the logger is closing.');
	    this.clearAllListeners();
	  }
	};

	Log.prototype.listenerCount = function (event) {
	  // node >= 3.0 supports EE#listenerCount()
	  if (EventEmitter.prototype.listenerCount) {
	    return EventEmitter.prototype.listenerCount.call(this, event);
	  }

	  // compatability for node < 0.10
	  if (EventEmitter.listenerCount) {
	    return EventEmitter.listenerCount(this, event);
	  }

	  return this.listeners(event).length;
	};

	/**
	 * Levels observed by the loggers, ordered by rank
	 *
	 * @property levels
	 * @type Array
	 * @static
	 */
	Log.levels = [
	  /**
	   * Event fired for error level log entries
	   * @event error
	   * @param {Error} error - The error object to log
	   */
	  'error',
	  /**
	   * Event fired for "warning" level log entries, which usually represent things
	   * like correctly formatted error responses from ES (400, ...) and recoverable
	   * errors (one node unresponsive)
	   *
	   * @event warning
	   * @param {String} message - A message to be logged
	   */
	  'warning',
	  /**
	   * Event fired for "info" level log entries, which usually describe what a
	   * client is doing (sniffing etc)
	   *
	   * @event info
	   * @param {String} message - A message to be logged
	   */
	  'info',
	  /**
	   * Event fired for "debug" level log entries, which will describe requests sent,
	   * including their url (no data, response codes, or exec times)
	   *
	   * @event debug
	   * @param {String} message - A message to be logged
	   */
	  'debug',
	  /**
	   * Event fired for "trace" level log entries, which provide detailed information
	   * about each request made from a client, including reponse codes, execution times,
	   * and a full curl command that can be copied and pasted into a terminal
	   *
	   * @event trace
	   * @param {String} method method, , body, responseStatus, responseBody
	   * @param {String} url - The url the request was made to
	   * @param {String} body - The body of the request
	   * @param {Integer} responseStatus - The status code returned from the response
	   * @param {String} responseBody - The body of the response
	   */
	  'trace'
	];

	/**
	 * Converts a log config value (string or array) to an array of level names which
	 * it represents
	 *
	 * @method parseLevels
	 * @static
	 * @private
	 * @param  {String|ArrayOfStrings} input - Cound be a string to specify the max
	 *   level, or an array of exact levels
	 * @return {Array} -
	 */
	Log.parseLevels = function (input) {
	  switch (typeof input) {
	  case 'string':
	    var i = _.indexOf(Log.levels, input);
	    if (i >= 0) {
	      return Log.levels.slice(0, i + 1);
	    }
	    /* fall through */
	  case 'object':
	    if (_.isArray(input)) {
	      var valid = _.intersection(input, Log.levels);
	      if (valid.length === input.length) {
	        return valid;
	      }
	    }
	    /* fall through */
	  default:
	    throw new TypeError('invalid logging level ' + input + '. Expected zero or more of these options: ' +
	      Log.levels.join(', '));
	  }
	};

	/**
	 * Combine the array-like param into a simple string
	 *
	 * @method join
	 * @static
	 * @private
	 * @param  {*} arrayish - An array like object that can be itterated by _.each
	 * @return {String} - The final string.
	 */
	Log.join = function (arrayish) {
	  return _.map(arrayish, function (item) {
	    if (_.isPlainObject(item)) {
	      return _.inspect(item) + '\n';
	    } else {
	      return item.toString();
	    }
	  }).join(' ');
	};

	/**
	 * Create a new logger, based on the config.
	 *
	 * @method addOutput
	 * @param {object} config - An object with config options for the logger.
	 * @param {String} [config.type=stdio] - The name of an output/logger. Options
	 *   can be found in the `src/loggers` directory.
	 * @param {String|ArrayOfStrings} [config.levels=warning] - The levels to output
	 *   to this logger, when an array is specified no levels other than the ones
	 *   specified will be listened to. When a string is specified, that and all lower
	 *   levels will be logged.
	 * @return {Logger}
	 */
	Log.prototype.addOutput = function (config) {
	  config = config || {};

	  // force "levels" key
	  config.levels = Log.parseLevels(config.levels || config.level || 'warning');
	  delete config.level;

	  var Logger = _.funcEnum(config, 'type', Log.loggers, process.browser ? 'console' : 'stdio');
	  return new Logger(this, config);
	};

	/**
	 * Log an error
	 *
	 * @method error
	 * @param  {Error|String} error  The Error to log
	 * @return {Boolean} - True if any outputs accepted the message
	 */
	Log.prototype.error = function (e) {
	  if (this.listenerCount('error')) {
	    return this.emit('error', e instanceof Error ? e : new Error(e));
	  }
	};


	/**
	 * Log a warning message
	 *
	 * @method warning
	 * @param  {*} msg* - Any amount of messages that will be joined before logged
	 * @return {Boolean} - True if any outputs accepted the message
	 */
	Log.prototype.warning = function (/* ...msg */) {
	  if (this.listenerCount('warning')) {
	    return this.emit('warning', Log.join(arguments));
	  }
	};


	/**
	 * Log useful info about what's going on
	 *
	 * @method info
	 * @param  {*} msg* - Any amount of messages that will be joined before logged
	 * @return {Boolean} - True if any outputs accepted the message
	 */
	Log.prototype.info = function (/* ...msg */) {
	  if (this.listenerCount('info')) {
	    return this.emit('info', Log.join(arguments));
	  }
	};

	/**
	 * Log a debug level message
	 *
	 * @method debug
	 * @param  {*} msg* - Any amount of messages that will be joined before logged
	 * @return {Boolean} - True if any outputs accepted the message
	 */
	Log.prototype.debug = function (/* ...msg */) {
	  if (this.listenerCount('debug')) {
	    return this.emit('debug', Log.join(arguments));
	  }
	};

	/**
	 * Log a trace level message
	 *
	 * @method trace
	 * @param {String} method - HTTP request method
	 * @param {String|Object} requestUrl - URL requested. If the value is an object,
	 *   it is expected to be the return value of Node's url.parse()
	 * @param {String} body - The request's body
	 * @param {String} responseBody - body returned from ES
	 * @param {String} responseStatus - HTTP status code
	 * @return {Boolean} - True if any outputs accepted the message
	 */
	Log.prototype.trace = function (method, requestUrl, body, responseBody, responseStatus) {
	  if (this.listenerCount('trace')) {
	    return this.emit('trace', Log.normalizeTraceArgs(method, requestUrl, body, responseBody, responseStatus));
	  }
	};

	Log.normalizeTraceArgs = function (method, requestUrl, body, responseBody, responseStatus) {
	  if (typeof requestUrl === 'string') {
	    requestUrl = url.parse(requestUrl, true, true);
	  } else {
	    requestUrl = _.clone(requestUrl);
	    if (requestUrl.path) {
	      requestUrl.query = url.parse(requestUrl.path, true, false).query;
	    }
	    if (!requestUrl.pathname && requestUrl.path) {
	      requestUrl.pathname = requestUrl.path.split('?').shift();
	    }
	  }

	  delete requestUrl.auth;

	  return {
	    method: method,
	    url: url.format(requestUrl),
	    body: body,
	    status: responseStatus,
	    response: responseBody
	  };
	};

	module.exports = Log;

	},{"./loggers":30,"./utils":41,"__browserify_process":13,"events":4,"url":7}],29:[function(require,module,exports){
	var _ = require('./utils');

	/**
	 * Abstract class providing common functionality to loggers
	 * @param {[type]} log [description]
	 * @param {[type]} config [description]
	 */
	function LoggerAbstract(log, config) {
	  this.log = log;
	  this.listeningLevels = [];

	  _.makeBoundMethods(this);

	  // when the log closes, remove our event listeners
	  this.log.once('closing', this.bound.cleanUpListeners);

	  this.setupListeners(config.levels);
	}

	function padNumToTen(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}

	/**
	 * Create a timestamp string used in the format function. Defers to Log.timestamp if it is defined,
	 * Also, feel free to override this at the logger level.
	 * @return {String} - Timestamp in ISO 8601 UTC
	 */
	LoggerAbstract.prototype.timestamp = function () {
	  var d = new Date();
	  return d.getUTCFullYear() + '-' +
	    padNumToTen(d.getUTCMonth() + 1) + '-' +
	    padNumToTen(d.getUTCDate()) + 'T' +
	    padNumToTen(d.getUTCHours()) + ':' +
	    padNumToTen(d.getUTCMinutes()) + ':' +
	    padNumToTen(d.getUTCSeconds()) + 'Z';
	};

	function indent(text, spaces) {
	  var space = _.repeat(' ', spaces || 2);
	  return (text || '').split(/\r?\n/).map(function (line) {
	    return space + line;
	  }).join('\n');
	}

	LoggerAbstract.prototype.format = function (label, message) {
	  return label + ': ' + this.timestamp() + '\n' + indent(message) + '\n\n';
	};

	LoggerAbstract.prototype.write = function () {
	  throw new Error('This should be overwritten by the logger');
	};

	/**
	 * Clear the current event listeners and then re-listen for events based on the level specified
	 *
	 * @method setupListeners
	 * @private
	 * @param  {Integer} level - The max log level that this logger should listen to
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.setupListeners = function (levels) {
	  this.cleanUpListeners();

	  this.listeningLevels = [];

	  _.each(levels, function (level) {
	    var fnName = 'on' + _.ucfirst(level);
	    if (this.bound[fnName]) {
	      this.listeningLevels.push(level);
	      this.log.on(level, this.bound[fnName]);
	    } else {
	      throw new Error('Unable to listen for level "' + level + '"');
	    }
	  }, this);
	};

	/**
	 * Clear the current event listeners
	 *
	 * @method cleanUpListeners
	 * @private
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.cleanUpListeners = _.handler(function () {
	  _.each(this.listeningLevels, function (level) {
	    this.log.removeListener(level, this.bound['on' + _.ucfirst(level)]);
	  }, this);
	});

	/**
	 * Handler for the logs "error" event
	 *
	 * @method onError
	 * @private
	 * @param  {Error} e - The Error object to log
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.onError = _.handler(function (e) {
	  this.write((e.name === 'Error' ? 'ERROR' : e.name), e.stack);
	});

	/**
	 * Handler for the logs "warning" event
	 *
	 * @method onWarning
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.onWarning = _.handler(function (msg) {
	  this.write('WARNING', msg);
	});

	/**
	 * Handler for the logs "info" event
	 *
	 * @method onInfo
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.onInfo = _.handler(function (msg) {
	  this.write('INFO', msg);
	});

	/**
	 * Handler for the logs "debug" event
	 *
	 * @method onDebug
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.onDebug = _.handler(function (msg) {
	  this.write('DEBUG', msg);
	});

	/**
	 * Handler for the logs "trace" event
	 *
	 * @method onTrace
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	LoggerAbstract.prototype.onTrace = _.handler(function (requestDetails) {
	  this.write('TRACE', this._formatTraceMessage(requestDetails));
	});

	LoggerAbstract.prototype._formatTraceMessage = function (req) {
	  return '-> ' + req.method + ' ' + req.url + '\n' +
	    this._prettyJson(req.body) + '\n' +
	    '<- ' + req.status + '\n' +
	    this._prettyJson(req.response);
	/*
	-> GET https://sldfkjsdlfksjdf:9200/slsdkfjlxckvxhclks?sdlkj=sdlfkje
	{
	  asdflksjdf
	}

	<- 502
	{
	  sldfksjdlf
	}
	*/
	};

	LoggerAbstract.prototype._prettyJson = function (body) {
	  try {
	    if (typeof body === 'string') {
	      body = JSON.parse(body);
	    }
	    return JSON.stringify(body, null, '  ').replace(/'/g, '\\u0027');
	  } catch (e) {
	    return typeof body === 'string' ? body : '';
	  }
	};

	module.exports = LoggerAbstract;

	},{"./utils":41}],30:[function(require,module,exports){
	module.exports = {
	  console: require('./console')
	};

	},{"./console":31}],31:[function(require,module,exports){
	/**
	 * Special version of the Stream logger, which logs errors and warnings to stderr and all other
	 * levels to stdout.
	 *
	 * @class Loggers.Console
	 * @extends LoggerAbstract
	 * @constructor
	 * @param {Object} config - The configuration for the Logger
	 * @param {string} config.level - The highest log level for this logger to output.
	 * @param {Log} bridge - The object that triggers logging events, which we will record
	 */

	module.exports = Console;

	var LoggerAbstract = require('../logger');
	var _ = require('../utils');

	function Console(log, config) {
	  LoggerAbstract.call(this, log, config);

	  // config/state
	  this.color = _.has(config, 'color') ? !!config.color : true;
	}
	_.inherits(Console, LoggerAbstract);

	/**
	 * Override the LoggerAbstract's setup listeners to do a little extra setup
	 *
	 * @param  {Array} levels - The levels that we should be listeneing for
	 */
	Console.prototype.setupListeners = function (levels) {
	  // call the super method
	  LoggerAbstract.prototype.setupListeners.call(this, levels);
	};

	Console.prototype.write = function (label, message, to) {
	  if (console[to]) {
	    console[to](this.format(label, message));
	  }
	};

	/**
	 * Handler for the bridges "error" event
	 *
	 * @method onError
	 * @private
	 * @param  {Error} e - The Error object to log
	 * @return {undefined}
	 */
	Console.prototype.onError = _.handler(function (e) {
	  var to = console.error ? 'error' : 'log';
	  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack || e.message, to);
	});

	/**
	 * Handler for the bridges "warning" event
	 *
	 * @method onWarning
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	Console.prototype.onWarning = _.handler(function (msg) {
	  this.write('WARNING', msg, console.warn ? 'warn' : 'log');
	});

	/**
	 * Handler for the bridges "info" event
	 *
	 * @method onInfo
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	Console.prototype.onInfo = _.handler(function (msg) {
	  this.write('INFO', msg, console.info ? 'info' : 'log');
	});

	/**
	 * Handler for the bridges "debug" event
	 *
	 * @method onDebug
	 * @private
	 * @param  {String} msg - The message to be logged
	 * @return {undefined}
	 */
	Console.prototype.onDebug = _.handler(function (msg) {
	  this.write('DEBUG', msg, console.debug ? 'debug' : 'log');
	});
	/**
	 * Handler for the bridges "trace" event
	 *
	 * @method onTrace
	 * @private
	 * @return {undefined}
	 */
	Console.prototype.onTrace = _.handler(function (msg) {
	  this.write('TRACE', this._formatTraceMessage(msg), 'log');
	});

	},{"../logger":29,"../utils":41}],32:[function(require,module,exports){
	var _ = require('./utils');
	var extractHostPartsRE = /\[\/*([^:]+):(\d+)\]/;

	function makeNodeParser(hostProp) {
	  return function (nodes) {
	    return _.transform(nodes, function (hosts, node, id) {
	      if (!node[hostProp]) {
	        return;
	      }

	      var hostnameMatches = extractHostPartsRE.exec(node[hostProp]);
	      if (!hostnameMatches) {
	        throw new Error('node\'s ' + hostProp + ' property (' + JSON.stringify(node[hostProp]) +
	          ') does not match the expected pattern ' + extractHostPartsRE + '.');
	      }

	      hosts.push({
	        host: hostnameMatches[1],
	        port: parseInt(hostnameMatches[2], 10),
	        _meta: {
	          id: id,
	          name: node.name,
	          hostname: node.hostname,
	          version: node.version
	        }
	      });
	    }, []);
	  };
	}

	module.exports = makeNodeParser('http_address');
	module.exports.thrift = makeNodeParser('transport_address');

	},{"./utils":41}],33:[function(require,module,exports){
	module.exports = {
	  random: require('./random'),
	  roundRobin: require('./round_robin')
	};

	},{"./random":34,"./round_robin":35}],34:[function(require,module,exports){
	/**
	 * Selects a connection randomly
	 *
	 * @module selectors
	 * @type {Function}
	 * @param {Array} connection - The list of connections to choose from
	 * @return {Connection} - The selected connection
	 */
	module.exports = function RandomSelector(connections) {
	  return connections[Math.floor(Math.random() * connections.length)];
	};

	},{}],35:[function(require,module,exports){
	/**
	 * Selects a connection the simplest way possible, Round Robin
	 *
	 * @module selectors
	 * @type {Function}
	 * @param {Array} connections - The list of connections that this selector needs to choose from
	 * @return {Connection} - The selected connection
	 */
	module.exports = function (connections) {
	  var connection = connections[0];
	  connections.push(connections.shift());
	  return connection;
	};

	},{}],36:[function(require,module,exports){
	/* global angular */
	var _ = require('../utils');
	var JsonSerializer = require('../serializers/json');

	function AngularSerializer() {}
	_.inherits(AngularSerializer, JsonSerializer);

	// mimic the JsonSerializer's encode method, but use angular's toJson instead
	AngularSerializer.prototype.encode = function (val) {
	  switch (typeof val) {
	  case 'string':
	    return val;
	  case 'object':
	    if (val) return angular.toJson(val);
	    /* falls through */
	  default:
	    return;
	  }
	};

	module.exports = AngularSerializer;
	},{"../serializers/json":38,"../utils":41}],37:[function(require,module,exports){
	module.exports = {
	  angular: require('./angular'),
	  json: require('./json')
	};

	},{"./angular":36,"./json":38}],38:[function(require,module,exports){
	/**
	 * Simple JSON serializer
	 * @type {[type]}
	 */
	module.exports = Json;

	var _ = require('../utils');

	function Json() {}

	/**
	 * Converts a value into a string, or an error
	 * @param  {*} val - Any value, methods are stripped and
	 * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify about other params
	 * @return {String|Error} - A string is always returned, unless an error occured. then it will be that error.
	 */
	Json.prototype.serialize = function (val, replacer, spaces) {
	  switch (typeof val) {
	  case 'string':
	    return val;
	  case 'object':
	    if (val) {
	      return JSON.stringify(val, replacer, spaces);
	    }
	    /* falls through */
	  default:
	    return;
	  }
	};

	/**
	 * Parse a JSON string, if it is already parsed it is ignored
	 * @param  {String} str - the string to parse
	 * @return {[type]}
	 */
	Json.prototype.deserialize = function (str) {
	  if (typeof str === 'string') {
	    try {
	      return JSON.parse(str);
	    } catch (e) {}
	  }
	};

	Json.prototype.bulkBody = function (val) {
	  var body = '', i;

	  if (_.isArray(val)) {
	    for (i = 0; i < val.length; i++) {
	      body += this.serialize(val[i]) + '\n';
	    }
	  } else if (typeof val === 'string') {
	    // make sure the string ends in a new line
	    body = val + (val[val.length - 1] === '\n' ? '' : '\n');
	  } else {
	    throw new TypeError('Bulk body should either be an Array of commands/string, or a String');
	  }

	  return body;
	};

	},{"../utils":41}],39:[function(require,module,exports){
	/**
	 * Class that manages making request, called by all of the API methods.
	 * @type {[type]}
	 */
	module.exports = Transport;

	var _ = require('./utils');
	var errors = require('./errors');
	var Host = require('./host');
	var Promise = require('bluebird');
	var patchSniffOnConnectionFault = require('./transport/sniff_on_connection_fault');

	function Transport(config) {
	  var self = this;
	  config = self._config = config || {};

	  var LogClass = (typeof config.log === 'function') ? config.log : require('./log');
	  config.log = self.log = new LogClass(config);

	  // setup the connection pool
	  var ConnectionPool = _.funcEnum(config, 'connectionPool', Transport.connectionPools, 'main');
	  self.connectionPool = new ConnectionPool(config);

	  // setup the serializer
	  var Serializer = _.funcEnum(config, 'serializer', Transport.serializers, 'json');
	  self.serializer = new Serializer(config);

	  // setup the nodesToHostCallback
	  self.nodesToHostCallback = _.funcEnum(config, 'nodesToHostCallback', Transport.nodesToHostCallbacks, 'main');

	  // setup max retries
	  self.maxRetries = config.hasOwnProperty('maxRetries') ? config.maxRetries : 3;

	  // setup endpoint to use for sniffing
	  self.sniffEndpoint = config.hasOwnProperty('sniffEndpoint') ? config.sniffEndpoint : '/_nodes/_all/clear';

	  // setup requestTimeout default
	  self.requestTimeout = config.hasOwnProperty('requestTimeout') ? config.requestTimeout : 30000;

	  if (config.hasOwnProperty('defer')) {
	    self.defer = config.defer;
	  }

	  // randomizeHosts option
	  var randomizeHosts = config.hasOwnProperty('randomizeHosts') ? !!config.randomizeHosts : true;

	  if (config.host) {
	    config.hosts = config.host;
	  }

	  if (config.hosts) {
	    var hostsConfig = _.createArray(config.hosts, function (val) {
	      if (_.isPlainObject(val) || _.isString(val) || val instanceof Host) {
	        return val;
	      }
	    });

	    if (!hostsConfig) {
	      throw new TypeError('Invalid hosts config. Expected a URL, an array of urls, a host config object, ' +
	        'or an array of host config objects.');
	    }

	    var hosts = _.map(hostsConfig, function (conf) {
	      return (conf instanceof Host) ? conf : new Host(conf, self._config);
	    });

	    if (randomizeHosts) {
	      hosts = _.shuffle(hosts);
	    }

	    self.connectionPool.setHosts(hosts);
	  }

	  if (config.sniffOnStart) {
	    self.sniff();
	  }

	  if (config.sniffInterval) {
	    self._timeout(function doSniff() {
	      self.sniff();
	      self._timeout(doSniff, config.sniffInterval);
	    }, config.sniffInterval);
	  }

	  if (config.sniffOnConnectionFault) {
	    patchSniffOnConnectionFault(self);
	  }
	}

	Transport.connectionPools = {
	  main: require('./connection_pool')
	};

	Transport.serializers = require('./serializers');

	Transport.nodesToHostCallbacks = {
	  main: require('./nodes_to_host')
	};

	Transport.prototype.defer = function () {
	  return Promise.defer();
	};

	/**
	 * Perform a request with the client's transport
	 *
	 * @method request
	 * @todo async body writing
	 * @todo abort
	 * @todo access to custom headers, modifying of request in general
	 * @param {object} params
	 * @param {Number} params.requestTimeout - timeout for the entire request (inculding all retries)
	 * @param {Number} params.maxRetries - number of times the request will be re-run in
	 *   the original node chosen can not be connected to.
	 * @param {String} params.url - The url for the request
	 * @param {String} params.method - The HTTP method for the request
	 * @param {String} params.body - The body of the HTTP request
	 * @param {Function} cb - A function to call back with (error, responseBody, responseStatus)
	 */
	Transport.prototype.request = function (params, cb) {
	  var self = this;
	  var remainingRetries = this.maxRetries;
	  var requestTimeout = this.requestTimeout;

	  var connection; // set in sendReqWithConnection
	  var aborted = false; // several connector will respond with an error when the request is aborted
	  var requestAborter; // an abort function, returned by connection#request()
	  var requestTimeoutId; // the id of the ^timeout
	  var ret; // the object returned to the user, might be a promise
	  var defer; // the defer object, will be set when we are using promises.

	  self.log.debug('starting request', params);

	  if (params.body && params.method === 'GET') {
	    _.nextTick(respond, new TypeError('Body can not be sent with method "GET"'));
	    return;
	  }

	  // serialize the body
	  if (params.body) {
	    params.body = self.serializer[params.bulkBody ? 'bulkBody' : 'serialize'](params.body);
	  }

	  if (params.hasOwnProperty('maxRetries')) {
	    remainingRetries = params.maxRetries;
	  }

	  if (params.hasOwnProperty('requestTimeout')) {
	    requestTimeout = params.requestTimeout;
	  }

	  params.req = {
	    method: params.method,
	    path: params.path || '/',
	    query: params.query,
	    body: params.body,
	    headers: params.headers
	  };

	  function sendReqWithConnection(err, _connection) {
	    if (aborted) {
	      return;
	    }

	    if (err) {
	      respond(err);
	    } else if (_connection) {
	      connection = _connection;
	      requestAborter = connection.request(params.req, checkRespForFailure);
	    } else {
	      self.log.warning('No living connections');
	      respond(new errors.NoConnections());
	    }
	  }

	  function checkRespForFailure(err, body, status, headers) {
	    if (aborted) {
	      return;
	    }

	    requestAborter = void 0;

	    if (err instanceof errors.RequestTypeError) {
	      self.log.error('Connection refused to execute the request', err);
	      respond(err, body, status, headers);
	      return;
	    }

	    if (err) {
	      connection.setStatus('dead');
	      if (remainingRetries) {
	        remainingRetries--;
	        self.log.error('Request error, retrying' + (err.message ? ' -- ' + err.message : ''));
	        self.connectionPool.select(sendReqWithConnection);
	      } else {
	        self.log.error('Request complete with error' + (err.message ? ' -- ' + err.message : ''));
	        respond(new errors.ConnectionFault(err));
	      }
	    } else {
	      self.log.debug('Request complete');
	      respond(void 0, body, status, headers);
	    }
	  }

	  function respond(err, body, status, headers) {
	    if (aborted) {
	      return;
	    }

	    self._timeout(requestTimeoutId);
	    var parsedBody;
	    var isJson = !headers || (headers['content-type'] && ~headers['content-type'].indexOf('application/json'));

	    if (!err && body) {
	      if (isJson) {
	        parsedBody = self.serializer.deserialize(body);
	        if (parsedBody == null) {
	          err = new errors.Serialization();
	          parsedBody = body;
	        }
	      } else {
	        parsedBody = body;
	      }
	    }

	    // does the response represent an error?
	    if (
	      (!err || err instanceof errors.Serialization)
	      && (status < 200 || status >= 300)
	      && (!params.ignore || !_.contains(params.ignore, status))
	    ) {

	      var errorMetadata = _.pick(params.req, ['path', 'query', 'body']);
	      errorMetadata.statusCode = status;
	      errorMetadata.response = body;

	      if (errors[status]) {
	        err = new errors[status](parsedBody && parsedBody.error, errorMetadata);
	      } else {
	        err = new errors.Generic('unknown error', errorMetadata);
	      }
	    }

	    // can we cast notfound to false?
	    if (params.castExists) {
	      if (err && err instanceof errors.NotFound) {
	        parsedBody = false;
	        err = void 0;
	      } else {
	        parsedBody = !err;
	      }
	    }

	    // how do we send the response?
	    if (typeof cb === 'function') {
	      if (err) {
	        cb(err, parsedBody, status);
	      } else {
	        cb(void 0, parsedBody, status);
	      }
	    } else if (err) {
	      err.body = parsedBody;
	      err.status = status;
	      defer.reject(err);
	    } else {
	      defer.resolve(parsedBody);
	    }
	  }

	  function abortRequest() {
	    if (aborted) {
	      return;
	    }

	    aborted = true;
	    remainingRetries = 0;
	    self._timeout(requestTimeoutId);
	    if (typeof requestAborter === 'function') {
	      requestAborter();
	    }
	  }

	  if (requestTimeout && requestTimeout !== Infinity) {
	    requestTimeoutId = this._timeout(function () {
	      respond(new errors.RequestTimeout('Request Timeout after ' + requestTimeout + 'ms'));
	      abortRequest();
	    }, requestTimeout);
	  }

	  // determine the response based on the presense of a callback
	  if (typeof cb === 'function') {
	    ret = {
	      abort: abortRequest
	    };
	  } else {
	    defer = this.defer();
	    ret = defer.promise;
	    ret.abort = abortRequest;
	  }


	  if (connection) {
	    sendReqWithConnection(void 0, connection);
	  } else {
	    self.connectionPool.select(sendReqWithConnection);
	  }

	  return ret;
	};

	Transport.prototype._timeout = function (cb, delay) {
	  this._timers = this._timers || [];
	  var id;

	  if ('function' !== typeof cb) {
	    id = cb;
	    cb = void 0;
	  }

	  if (cb) {
	    // set the timer
	    id = setTimeout(cb, delay);
	    this._timers.push(id);
	    return id;
	  }

	  if (id) {
	    clearTimeout(id);

	    var i = this._timers.indexOf(id);
	    if (i !== -1) {
	      this._timers.splice(i, 1);
	    }
	  }
	};

	/**
	 * Ask an ES node for a list of all the nodes, add/remove nodes from the connection
	 * pool as appropriate
	 *
	 * @param  {Function} cb - Function to call back once complete
	 */
	Transport.prototype.sniff = function (cb) {
	  var connectionPool = this.connectionPool;
	  var nodesToHostCallback = this.nodesToHostCallback;
	  var log = this.log;
	  var globalConfig = this._config;

	  // make cb a function if it isn't
	  cb = typeof cb === 'function' ? cb : _.noop;

	  this.request({
	    path: this.sniffEndpoint,
	    method: 'GET'
	  }, function (err, resp, status) {
	    if (!err && resp && resp.nodes) {
	      var hostsConfigs;

	      try {
	        hostsConfigs = nodesToHostCallback(resp.nodes);
	      } catch (e) {
	        log.error(new Error('Unable to convert node list from ' + this.sniffEndpoint +
	          ' to hosts durring sniff. Encountered error:\n' + (e.stack || e.message)));
	        return;
	      }

	      connectionPool.setHosts(_.map(hostsConfigs, function (hostConfig) {
	        return new Host(hostConfig, globalConfig);
	      }));
	    }
	    cb(err, resp, status);
	  });
	};

	/**
	 * Close the Transport, which closes the logs and connection pool
	 * @return {[type]} [description]
	 */
	Transport.prototype.close = function () {
	  this.log.close();
	  _.each(this._timers, clearTimeout);
	  this.connectionPool.close();
	};

	},{"./connection_pool":23,"./errors":26,"./host":27,"./log":28,"./nodes_to_host":32,"./serializers":37,"./transport/sniff_on_connection_fault":40,"./utils":41,"bluebird":1}],40:[function(require,module,exports){
	var _ = require('../utils');


	/**
	 * Patch the transport's connection pool to schedule a sniff after a connection fails.
	 * When a connection fails for the first time it will schedule a sniff 1 second in the
	 * future, and increase the timeout based on the deadTimeout algorithm chosen by the
	 * connectionPool, and the number of times the sniff has failed.
	 *
	 * @param  {Transport} transport - the transport that will be using this behavior
	 * @return {undefined}
	 */
	module.exports = function setupSniffOnConnectionFault(transport) {
	  var failures = 0;
	  var pool = transport.connectionPool;
	  var originalOnDied = pool._onConnectionDied;

	  // do the actual sniff, if the sniff is unable to
	  // connect to a node this function will be called again by the connectionPool
	  var work = function () {
	    work.timerId = transport._timeout(work.timerId);
	    transport.sniff();
	  };

	  // create a function that will count down to a
	  // point n milliseconds into the future
	  var countdownTo = function (ms) {
	    var start = _.now();
	    return function () {
	      return start - ms;
	    };
	  };

	  // overwrite the function, but still call it
	  pool._onConnectionDied = function (connection, wasAlreadyDead) {
	    var ret = originalOnDied.call(pool, connection, wasAlreadyDead);

	    // clear the failures if this is the first failure we have seen
	    failures = work.timerId ? failures + 1 : 0;

	    var ms = pool.calcDeadTimeout(failures, 1000);

	    if (work.timerId && ms < work.timerId && work.countdown()) {
	      // clear the timer
	      work.timerId = transport._timeout(work.timerId);
	    }

	    if (!work.timerId) {
	      work.timerId = transport._timeout(work, ms);
	      work.countdown = countdownTo(ms);
	    }

	    return ret;
	  };

	  pool._onConnectionDied.restore = function () {
	    pool._onConnectionDied = originalOnDied;
	  };
	};
	},{"../utils":41}],41:[function(require,module,exports){
	var process=require("__browserify_process"),Buffer=require("__browserify_Buffer").Buffer;var path = require('path');
	var _ = require('lodash');
	var nodeUtils = require('util');

	/**
	 * Custom utils library, basically a modified version of [lodash](http://lodash.com/docs) +
	 * [node.utils](http://nodejs.org/api/util.html#util_util) that doesn't use mixins to prevent
	 * confusion when requiring lodash itself.
	 *
	 * @class utils
	 * @static
	 */
	var utils = _.extend({}, _, nodeUtils);
	_ = utils;

	/**
	 * Link to [path.join](http://nodejs.org/api/path.html#path_path_join_path1_path2)
	 *
	 * @method utils.joinPath
	 * @type {function}
	 */
	utils.joinPath = path.join;

	/**
	 * Recursively merge two objects, walking into each object and concating arrays. If both to and from have a value at a
	 * key, but the values' types don't match to's value is left unmodified. Only Array and Object values are merged - that
	 * it to say values with a typeof "object"
	 *
	 * @param  {Object} to - Object to merge into (no cloning, the original object
	 *   is modified)
	 * @param  {Object} from - Object to pull changed from
	 * @return {Object} - returns the modified to value
	 */
	utils.deepMerge = function (to, from) {
	  _.each(from, function (fromVal, key) {
	    switch (typeof to[key]) {
	    case 'undefined':
	      to[key] = from[key];
	      break;
	    case 'object':
	      if (_.isArray(to[key]) && _.isArray(from[key])) {
	        to[key] = to[key].concat(from[key]);
	      }
	      else if (_.isPlainObject(to[key]) && _.isPlainObject(from[key])) {
	        utils.deepMerge(to[key], from[key]);
	      }
	    }
	  });
	  return to;
	};

	/**
	 * Test if a value is an array and it's contents are of a specific type
	 *
	 * @method isArrayOf<Strings|Object|Array|Finite|Function|RegExp>s
	 * @param  {Array} arr - An array to check
	 * @return {Boolean}
	 */
	_.each([
	  'String',
	  'Object',
	  'PlainObject',
	  'Array',
	  'Finite',
	  'Function',
	  'RegExp'
	], function (type) {
	  var check = _['is' + type];

	  utils['isArrayOf' + type + 's'] = function (arr) {
	    // quick shallow check of arrays
	    return _.isArray(arr) && _.every(arr.slice(0, 10), check);
	  };
	});


	/**
	 * Capitalize the first letter of a word
	 *
	 * @method  ucfirst
	 * @param  {string} word - The word to transform
	 * @return {string}
	 */
	utils.ucfirst = function (word) {
	  return word[0].toUpperCase() + word.substring(1).toLowerCase();
	};

	/**
	 * Base algo for studlyCase and camelCase
	 * @param  {boolean} firstWordCap - Should the first character of the first word be capitalized
	 * @return {Function}
	 */
	function adjustWordCase(firstWordCap, otherWordsCap, sep) {
	  return function (string) {
	    var i = 0;
	    var words = [];
	    var word = '';
	    var code, c, upper, lower;

	    for (; i < string.length; i++) {
	      code = string.charCodeAt(i);
	      c = string.charAt(i);
	      lower = (code >= 97 && code <= 122) || (code >= 48 && code <= 57);
	      upper = code >= 65 && code <= 90;

	      if (upper || !lower) {
	        // new word
	        if (word.length) {
	          words.push(word);
	        }
	        word = '';
	      }

	      if (upper || lower) {
	        if (lower && word.length) {
	          word += c;
	        } else {
	          if ((!words.length && firstWordCap) || (words.length && otherWordsCap)) {
	            word = c.toUpperCase();
	          }
	          else {
	            word = c.toLowerCase();
	          }
	        }
	      }
	    }
	    if (word.length) {
	      words.push(word);
	    }
	    // add the leading underscore back to strings the had it originally
	    if (words.length && string.charAt(0) === '_') {
	      words[0] = '_' + words[0];
	    }
	    return words.join(sep);
	  };
	}

	/**
	 * Transform a string into StudlyCase
	 *
	 * @method studlyCase
	 * @param  {String} string
	 * @return {String}
	 */
	utils.studlyCase = adjustWordCase(true, true, '');

	/**
	 * Transform a string into camelCase
	 *
	 * @method camelCase
	 * @param  {String} string
	 * @return {String}
	 */
	utils.camelCase = adjustWordCase(false, true, '');

	/**
	 * Transform a string into snakeCase
	 *
	 * @method snakeCase
	 * @param  {String} string
	 * @return {String}
	 */
	utils.snakeCase = adjustWordCase(false, false, '_');

	/**
	 * Lower-case a string, and return an empty string if any is not a string
	 *
	 * @param any {*} - Something or nothing
	 * @returns {string}
	 */
	utils.toLowerString = function (any) {
	  if (any) {
	    if (typeof any !== 'string') {
	      any = any.toString();
	    }
	  } else {
	    any = '';
	  }
	  return any.toLowerCase();
	};

	/**
	 * Upper-case the string, return an empty string if any is not a string
	 *
	 * @param any {*} - Something or nothing
	 * @returns {string}
	 */
	utils.toUpperString = function (any) {
	  if (any) {
	    if (typeof any !== 'string') {
	      any = any.toString();
	    }
	  } else {
	    any = '';
	  }
	  return any.toUpperCase();
	};

	/**
	 * Test if a value is "numeric" meaning that it can be transformed into something besides NaN
	 *
	 * @method isNumeric
	 * @param  {*} val
	 * @return {Boolean}
	 */
	utils.isNumeric = function (val) {
	  return typeof val !== 'object' && val - parseFloat(val) >= 0;
	};

	// regexp to test for intervals
	var intervalRE = /^(\d+(?:\.\d+)?)(M|w|d|h|m|s|y|ms)$/;

	/**
	 * Test if a string represents an interval (eg. 1m, 2Y)
	 *
	 * @method isInterval
	 * @param {String} val
	 * @return {Boolean}
	 */
	utils.isInterval = function (val) {
	  return !!(val.match && val.match(intervalRE));
	};

	/**
	 * Repeat a string n times
	 *
	 * @todo TestPerformance
	 * @method repeat
	 * @param {String} what - The string to repeat
	 * @param {Number} times - Times the string should be repeated
	 * @return {String}
	 */
	utils.repeat = function (what, times) {
	  return (new Array(times + 1)).join(what);
	};

	/**
	 * Call a function, applying the arguments object to it in an optimized way, rather than always turning it into an array
	 *
	 * @param func {Function} - The function to execute
	 * @param context {*} - The context the function will be executed with
	 * @param args {Arguments} - The arguments to send to func
	 * @param [sliceIndex=0] {Integer} - The index that args should be sliced at, before feeding args to func
	 * @returns {*} - the return value of func
	 */
	utils.applyArgs = function (func, context, args, sliceIndex) {
	  sliceIndex = sliceIndex || 0;
	  switch (args.length - sliceIndex) {
	  case 0:
	    return func.call(context);
	  case 1:
	    return func.call(context, args[0 + sliceIndex]);
	  case 2:
	    return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex]);
	  case 3:
	    return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex]);
	  case 4:
	    return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex], args[3 + sliceIndex]);
	  case 5:
	    return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex],
	      args[2 + sliceIndex], args[3 + sliceIndex], args[4 + sliceIndex]);
	  default:
	    return func.apply(context, Array.prototype.slice.call(args, sliceIndex));
	  }
	};

	/**
	 * Schedule a function to be called on the next tick, and supply it with these arguments
	 * when it is called.
	 * @return {[type]} [description]
	 */
	_.nextTick = function (cb) {
	  // bind the function and schedule it
	  process.nextTick(_.bindKey(_, 'applyArgs', cb, null, arguments, 1));
	};

	/**
	 * Marks a method as a handler. Currently this just makes a property on the method
	 * flagging it to be bound to the object at object creation when "makeBoundMethods" is called
	 *
	 * ```
	 * ClassName.prototype.methodName = _.handler(function () {
	 *   // this will always be bound when called via classInstance.bound.methodName
	 *   this === classInstance
	 * });
	 * ```
	 *
	 * @alias _.scheduled
	 * @param  {Function} func - The method that is being defined
	 * @return {Function}
	 */
	_.handler = function (func) {
	  func._provideBound = true;
	  return func;
	};
	_.scheduled = _.handler;

	/**
	 * Creates an "bound" property on an object, which all or a subset of methods from
	 * the object which are bound to the original object.
	 *
	 * ```
	 * var obj = {
	 *   onEvent: function () {}
	 * };
	 *
	 * _.makeBoundMethods(obj);
	 *
	 * obj.bound.onEvent() // is bound to obj, and can safely be used as an event handler.
	 * ```
	 *
	 * @param {Object} obj - The object to bind the methods to
	 */
	_.makeBoundMethods = function (obj) {
	  obj.bound = {};
	  for (var prop in obj) {
	    // dearest maintainer, we want to look through the prototype
	    if (typeof obj[prop] === 'function' && obj[prop]._provideBound === true) {
	      obj.bound[prop] = _.bind(obj[prop], obj);
	    }
	  }
	};

	_.noop = function () {};

	/**
	 * Implements the standard "string or constructor" check that I was copy/pasting everywhere
	 * @param  {String|Function} val - the value that the user passed in
	 * @param  {Object} opts - a map of the options
	 * @return {Function|undefined} - If a valid option was specified, then the constructor is returned
	 */
	_.funcEnum = function (config, name, opts, def) {
	  var val = config[name];
	  switch (typeof val) {
	  case 'undefined':
	    return opts[def];
	  case 'function':
	    return val;
	  case 'string':
	    if (opts.hasOwnProperty(val)) {
	      return opts[val];
	    }
	    /* falls through */
	  default:
	    var err = 'Invalid ' + name + ' "' + val + '", expected a function';
	    switch (_.size(opts)) {
	    case 0:
	      break;
	    case 1:
	      err += ' or ' + _.keys(opts)[0];
	      break;
	    default:
	      err += ' or one of ' + _.keys(opts).join(', ');
	      break;
	    }
	    throw new TypeError(err);
	  }
	};

	/**
	 * Accepts any object and attempts to convert it into an array. If the object passed in is not
	 * an array it will be wrapped in one. Then the transform/map function will be called for each element
	 * and create a new array that is returned. If the map function fails to return something, the loop is
	 * halted and false is returned instead of an array.
	 *
	 * @param  {*} input - The value to convert
	 * @param  {Function} transform - A function called for each element of the resulting array
	 * @return {Array|false} - an array on success, or false on failure.
	 */
	_.createArray = function (input, transform) {
	  transform = typeof transform === 'function' ? transform : _.identity;
	  var output = [];
	  var item;
	  var i;

	  if (!_.isArray(input)) {
	    input = [input];
	  }

	  for (i = 0; i < input.length; i++) {
	    item = transform(input[i]);
	    if (item === void 0) {
	      return false;
	    } else {
	      output.push(item);
	    }
	  }
	  return output;
	};

	/**
	 * Takes a WritableStream, and returns the chunks that have not successfully written, returning them as a string.
	 *
	 * ONLY WORKS FOR TEXT STREAMS
	 *
	 * @param  {WritableStream} stream - an instance of stream.Writable
	 * @return {string} - the remaining test to be written to the stream
	 */
	_.getUnwrittenFromStream = function (stream) {
	  var writeBuffer = _.getStreamWriteBuffer(stream);
	  if (!writeBuffer) return;

	  // flush the write buffer
	  var out = '';
	  if (!writeBuffer.length) return out;

	  _.each(writeBuffer, function (writeReq) {
	    if (writeReq.chunk) {
	      // 0.9.12+ uses WriteReq objects with a chunk prop
	      out += '' + writeReq.chunk;
	    } else if (_.isArray(writeReq) && (typeof writeReq[0] === 'string' || Buffer.isBuffer(writeReq[0]))) {
	      // 0.9.4 - 0.9.9 buffers are arrays of arrays like [[chunk, cb], [chunk, undef], ...].
	      out += '' + writeReq[0];
	    } else {
	      return false;
	    }
	  });
	  return out;
	};

	_.getStreamWriteBuffer = function (stream) {
	  if (!stream || !stream._writableState) return;

	  var writeState = stream._writableState;

	  if (writeState.getBuffer) {
	    return writeState.getBuffer();
	  } else if (writeState.buffer) {
	    return writeState.buffer;
	  }
	};

	_.clearWriteStreamBuffer = function (stream) {
	  var buffer = _.getStreamWriteBuffer(stream);
	  return buffer && buffer.splice(0);
	};

	/**
	 * return the current time in milliseconds since epoch
	 */
	_.now = function () {
	  return (typeof Date.now === 'function') ? Date.now() : (new Date()).getTime();
	};

	module.exports = utils;

	},{"__browserify_Buffer":12,"__browserify_process":13,"lodash":14,"path":5,"util":8}]},{},[15])
	;
	}());

/***/ },
/* 885 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana')

	  /*
	   * Angular doesn't play well with thread blocking calls such as
	   * window.confirm() unless those calls are specifically handled inside a call
	   * to $timeout(). Rather than litter the code with that implementation
	   * detail, safeConfirm() can be used.
	   *
	   * WARNING: safeConfirm differs from a native call to window.confirm in that
	   * it only blocks the thread beginning on the next tick. For that reason, a
	   * promise is returned so consumers can handle the control flow.
	   *
	   * Usage:
	   *  safeConfirm('This message will be passed to window.confirm()').then(
	   *    function () {
	   *      // user clicked confirm
	   *    },
	   *    function () {
	   *      // user canceled the confirmation
	   *    }
	   *  );
	   */
	  .factory('safeConfirm', function ($window, $timeout, $q) {
	    return function safeConfirm(message) {
	      return $timeout(function () {
	        return $window.confirm(message) || $q.reject(false);
	      });
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(785);
	__webpack_require__(194);
	__webpack_require__(236);
	__webpack_require__(887);
	__webpack_require__(911);
	__webpack_require__(889);
	__webpack_require__(894);
	__webpack_require__(890);
	__webpack_require__(895);
	__webpack_require__(888);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana/index_patterns');
	  __webpack_require__(785);

	  function IndexPatternsProvider(es, Notifier, Private, Promise, kbnIndex) {
	    var self = this;
	    var _ = __webpack_require__(194);
	    var errors = __webpack_require__(236);

	    var IndexPattern = Private(__webpack_require__(887));
	    var patternCache = Private(__webpack_require__(911));

	    var notify = new Notifier({ location: 'IndexPatterns Service' });

	    self.get = function (id) {
	      if (!id) return self.make();

	      var cache = patternCache.get(id);
	      return cache || patternCache.set(id, self.make(id));
	    };

	    self.make = function (id) {
	      return new IndexPattern(id).init();
	    };

	    self['delete'] = function (pattern) {
	      self.getIds.clearCache();
	      pattern.destroy();

	      return es['delete']({
	        index: kbnIndex,
	        type: 'index-pattern',
	        id: pattern.id
	      });
	    };

	    self.errors = {
	      MissingIndices: errors.IndexPatternMissingIndices
	    };

	    self.cache = patternCache;
	    self.getIds = Private(__webpack_require__(889));
	    self.intervals = Private(__webpack_require__(894));
	    self.mapper = Private(__webpack_require__(890));
	    self.patternToWildcard = Private(__webpack_require__(895));
	    self.fieldFormats = Private(__webpack_require__(888));
	    self.IndexPattern = IndexPattern;
	  }

	  module.service('indexPatterns', function (Private) {
	    return Private(IndexPatternsProvider);
	  });
	  return IndexPatternsProvider;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(236);
	__webpack_require__(212);
	__webpack_require__(888);
	__webpack_require__(889);
	__webpack_require__(890);
	__webpack_require__(894);
	__webpack_require__(897);
	__webpack_require__(862);
	__webpack_require__(898);
	__webpack_require__(899);
	__webpack_require__(907);
	__webpack_require__(908);
	__webpack_require__(909);
	__webpack_require__(911);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function IndexPatternFactory(Private, timefilter, Notifier, config, kbnIndex, Promise, $rootScope, safeConfirm) {
	    var _ = __webpack_require__(194);
	    var errors = __webpack_require__(236);
	    var angular = __webpack_require__(212);

	    var fieldformats = Private(__webpack_require__(888));
	    var getIds = Private(__webpack_require__(889));
	    var mapper = Private(__webpack_require__(890));
	    var intervals = Private(__webpack_require__(894));
	    var getComputedFields = __webpack_require__(897);
	    var DocSource = Private(__webpack_require__(862));
	    var mappingSetup = Private(__webpack_require__(898));
	    var FieldList = Private(__webpack_require__(899));

	    var flattenHit = Private(__webpack_require__(907));
	    var formatHit = __webpack_require__(908);
	    var calculateIndices = Private(__webpack_require__(909));
	    var patternCache = Private(__webpack_require__(911));

	    var type = 'index-pattern';

	    var notify = new Notifier();

	    var mapping = mappingSetup.expandShorthand({
	      title: 'string',
	      timeFieldName: 'string',
	      notExpandable: 'boolean',
	      intervalName: 'string',
	      fields: 'json',
	      fieldFormatMap: {
	        type: 'string',
	        _serialize: function _serialize(map) {
	          if (map == null) return;

	          var count = 0;
	          var serialized = _.transform(map, function (flat, format, field) {
	            if (!format) return;
	            count++;
	            flat[field] = format;
	          });

	          if (count) return angular.toJson(serialized);
	        },
	        _deserialize: function _deserialize(map) {
	          if (map == null) return {};
	          return _.mapValues(angular.fromJson(map), function (mapping) {
	            var FieldFormat = fieldformats.byId[mapping.id];
	            return FieldFormat && new FieldFormat(mapping.params);
	          });
	        }
	      }
	    });

	    function IndexPattern(id) {
	      var self = this;

	      setId(id);

	      var docSource = new DocSource();

	      self.init = function () {
	        // tell the docSource where to find the doc
	        docSource.index(kbnIndex).type(type).id(self.id);

	        // listen for config changes and update field list
	        $rootScope.$on('change:config', function () {
	          initFields();
	        });

	        return mappingSetup.isDefined(type).then(function (defined) {
	          // create mapping for this type if one does not exist
	          if (defined) return true;
	          return mappingSetup.setup(type, mapping);
	        }).then(function () {
	          // If there is no id, then there is no document to fetch from elasticsearch
	          if (!self.id) return;

	          // fetch the object from ES
	          return docSource.fetch().then(function applyESResp(resp) {
	            if (!resp.found) throw new errors.SavedObjectNotFound(type, self.id);

	            // deserialize any json fields
	            _.forOwn(mapping, function ittr(fieldMapping, name) {
	              if (fieldMapping._deserialize) {
	                resp._source[name] = fieldMapping._deserialize(resp._source[name], resp, name, fieldMapping);
	              }
	            });

	            // Give obj all of the values in _source
	            _.assign(self, resp._source);

	            self._indexFields();

	            // Any time obj is updated, re-call applyESResp
	            docSource.onUpdate().then(applyESResp, notify.fatal);
	          });
	        }).then(function () {
	          // return our obj as the result of init()
	          return self;
	        });
	      };

	      function initFields(fields) {
	        self.fields = new FieldList(self, fields || self.fields || []);
	      }

	      self._indexFields = function () {
	        if (self.id) {
	          if (!self.fields) {
	            return self.refreshFields();
	          } else {
	            initFields();
	          }
	        }
	      };

	      self.addScriptedField = function (name, script, type, lang) {
	        type = type || 'string';

	        var scriptFields = _.pluck(self.getScriptedFields(), 'name');

	        if (_.contains(scriptFields, name)) {
	          throw new errors.DuplicateField(name);
	        }

	        self.fields.push({
	          name: name,
	          script: script,
	          type: type,
	          scripted: true,
	          lang: lang
	        });

	        self.save();
	      };

	      self.removeScriptedField = function (name) {
	        var fieldIndex = _.findIndex(self.fields, {
	          name: name,
	          scripted: true
	        });

	        self.fields.splice(fieldIndex, 1);

	        self.save();
	      };

	      self.popularizeField = function (fieldName, unit) {
	        if (unit == null) unit = 1;

	        var field = _.get(self, ['fields', 'byName', fieldName]);
	        if (!field) return;

	        var count = Math.max((field.count || 0) + unit, 0);
	        if (field.count !== count) {
	          field.count = count;
	          self.save();
	        }
	      };

	      self.getNonScriptedFields = function () {
	        return _.where(self.fields, { scripted: false });
	      };

	      self.getScriptedFields = function () {
	        return _.where(self.fields, { scripted: true });
	      };

	      self.getInterval = function () {
	        return this.intervalName && _.find(intervals, { name: this.intervalName });
	      };

	      self.toIndexList = function (start, stop, sortDirection) {
	        return self.toDetailedIndexList(start, stop, sortDirection).then(function (detailedIndices) {
	          if (!_.isArray(detailedIndices)) {
	            return detailedIndices.index;
	          }

	          return _.pluck(detailedIndices, 'index');
	        });
	      };

	      self.toDetailedIndexList = Promise.method(function (start, stop, sortDirection) {
	        var interval = self.getInterval();

	        if (interval) {
	          return intervals.toIndexList(self.id, interval, start, stop, sortDirection);
	        }

	        if (self.isWildcard() && self.hasTimeField() && self.canExpandIndices()) {
	          return calculateIndices(self.id, self.timeFieldName, start, stop, sortDirection);
	        }

	        return {
	          index: self.id,
	          min: -Infinity,
	          max: Infinity
	        };
	      });

	      self.canExpandIndices = function () {
	        return !this.notExpandable;
	      };

	      self.hasTimeField = function () {
	        return !!(this.timeFieldName && this.fields.byName[this.timeFieldName]);
	      };

	      self.isWildcard = function () {
	        return _.includes(this.id, '*');
	      };

	      self.prepBody = function () {
	        var body = {};

	        // serialize json fields
	        _.forOwn(mapping, function (fieldMapping, fieldName) {
	          if (self[fieldName] != null) {
	            body[fieldName] = fieldMapping._serialize ? fieldMapping._serialize(self[fieldName]) : self[fieldName];
	          }
	        });

	        // ensure that the docSource has the current self.id
	        docSource.id(self.id);

	        // clear the indexPattern list cache
	        getIds.clearCache();
	        return body;
	      };

	      function setId(id) {
	        return self.id = id;
	      }

	      self.create = function () {
	        var body = self.prepBody();
	        return docSource.doCreate(body).then(setId)['catch'](function (err) {
	          if (_.get(err, 'origError.status') === 409) {
	            var confirmMessage = 'Are you sure you want to overwrite this?';

	            return safeConfirm(confirmMessage).then(function () {
	              return Promise['try'](function () {
	                var cached = patternCache.get(self.id);
	                if (cached) {
	                  return cached.then(function (pattern) {
	                    return pattern.destroy();
	                  });
	                }
	              }).then(function () {
	                return docSource.doIndex(body);
	              }).then(setId);
	            }, _.constant(false) // if the user doesn't overwrite, resolve with false
	            );
	          }
	          return Promise.resolve(false);
	        });
	      };

	      self.save = function () {
	        var body = self.prepBody();
	        return docSource.doIndex(body).then(setId);
	      };

	      self.refreshFields = function () {
	        return mapper.clearCache(self).then(self._fetchFields).then(self.save);
	      };

	      self._fetchFields = function () {
	        return mapper.getFieldsForIndexPattern(self, true).then(function (fields) {
	          // append existing scripted fields
	          fields = fields.concat(self.getScriptedFields());

	          // initialize self.field with this field list
	          initFields(fields);
	        });
	      };

	      self.toJSON = function () {
	        return self.id;
	      };

	      self.toString = function () {
	        return '' + self.toJSON();
	      };

	      self.destroy = function () {
	        patternCache.clear(self.id);
	        docSource.destroy();
	      };

	      self.metaFields = config.get('metaFields');
	      self.getComputedFields = getComputedFields.bind(self);

	      self.flattenHit = flattenHit(self);
	      self.formatHit = formatHit(self, fieldformats.getDefaultInstance('string'));
	      self.formatField = self.formatHit.formatField;
	    }

	    IndexPattern.prototype.routes = {
	      edit: '/settings/indices/{{id}}',
	      addField: '/settings/indices/{{id}}/create-field',
	      indexedFields: '/settings/indices/{{id}}?_a=(tab:indexedFields)',
	      scriptedFields: '/settings/indices/{{id}}?_a=(tab:scriptedFields)'
	    };

	    return IndexPattern;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(336);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  return __webpack_require__(336)({
	    name: 'fieldFormats',
	    index: ['id'],
	    group: ['fieldType'],

	    constructor: function constructor(config, $rootScope) {
	      var self = this;
	      var defaultMap = undefined;

	      function init() {
	        parseDefaultTypeMap();
	        $rootScope.$on('init:config', parseDefaultTypeMap);
	        $rootScope.$on('change:config.format:defaultTypeMap', parseDefaultTypeMap);
	      }

	      /**
	       * Get the id of the default type for this field type
	       * using the format:defaultTypeMap config map
	       *
	       * @param  {String} fieldType - the field type
	       * @return {String}
	       */
	      self.getDefaultConfig = function (fieldType) {
	        return defaultMap[fieldType] || defaultMap._default_;
	      };

	      /**
	       * Get a FieldFormat type (class) by it's id.
	       *
	       * @param  {String} formatId - the format id
	       * @return {Function}
	       */
	      self.getType = function (formatId) {
	        return self.byId[formatId];
	      };

	      /**
	       * Get the default FieldFormat type (class) for
	       * a field type, using the format:defaultTypeMap.
	       *
	       * @param  {String} fieldType
	       * @return {Function}
	       */
	      self.getDefaultType = function (fieldType) {
	        return self.byId[self.getDefaultConfig(fieldType).id];
	      };

	      /**
	       * Get the singleton instance of the FieldFormat type by it's id.
	       *
	       * @param  {String} formatId
	       * @return {FieldFormat}
	       */
	      self.getInstance = _.memoize(function (formatId) {
	        var FieldFormat = self.byId[formatId];
	        return new FieldFormat();
	      });

	      /**
	       * Get the default fieldFormat instance for a field format.
	       *
	       * @param  {String} fieldType
	       * @return {FieldFormat}
	       */
	      self.getDefaultInstance = _.memoize(function (fieldType) {
	        var conf = self.getDefaultConfig(fieldType);
	        var FieldFormat = self.byId[conf.id];
	        return new FieldFormat(conf.params);
	      });

	      function parseDefaultTypeMap() {
	        defaultMap = config.get('format:defaultTypeMap');
	        _.forOwn(self, function (fn) {
	          if (_.isFunction(fn) && fn.cache) {
	            // clear all memoize caches
	            fn.cache = new _.memoize.Cache();
	          }
	        });
	      }

	      init();
	    }
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function GetIndexPatternIdsFn(es, kbnIndex) {
	    var _ = __webpack_require__(194);

	    // many places may require the id list, so we will cache it seperately
	    // didn't incorportate with the indexPattern cache to prevent id collisions.
	    var cachedPromise = undefined;

	    var getIds = function getIds() {
	      if (cachedPromise) {
	        // retrun a clone of the cached response
	        return cachedPromise.then(function (cachedResp) {
	          return _.clone(cachedResp);
	        });
	      }

	      cachedPromise = es.search({
	        index: kbnIndex,
	        type: 'index-pattern',
	        fields: [],
	        body: {
	          query: { match_all: {} },
	          size: 10000
	        }
	      }).then(function (resp) {
	        return _.pluck(resp.hits.hits, '_id');
	      });

	      // ensure that the response stays pristine by cloning it here too
	      return cachedPromise.then(function (resp) {
	        return _.clone(resp);
	      });
	    };

	    getIds.clearCache = function () {
	      cachedPromise = null;
	    };

	    return getIds;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(243);
	__webpack_require__(236);
	__webpack_require__(891);
	__webpack_require__(894);
	__webpack_require__(895);
	__webpack_require__(896);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function MapperService(Private, Promise, es, config, kbnIndex) {
	    var _ = __webpack_require__(194);
	    var moment = __webpack_require__(243);

	    var IndexPatternMissingIndices = __webpack_require__(236).IndexPatternMissingIndices;
	    var transformMappingIntoFields = Private(__webpack_require__(891));
	    var intervals = Private(__webpack_require__(894));
	    var patternToWildcard = Private(__webpack_require__(895));

	    var LocalCache = Private(__webpack_require__(896));

	    function Mapper() {

	      // Save a reference to mapper
	      var self = this;

	      // proper-ish cache, keeps a clean copy of the object, only returns copies of it's copy
	      var fieldCache = self.cache = new LocalCache();

	      /**
	       * Gets an object containing all fields with their mappings
	       * @param {dataSource} dataSource
	       * @param {boolean} skipIndexPatternCache - should we ping the index-pattern objects
	       * @returns {Promise}
	       * @async
	       */
	      self.getFieldsForIndexPattern = function (indexPattern, skipIndexPatternCache) {
	        var id = indexPattern.id;

	        var cache = fieldCache.get(id);
	        if (cache) return Promise.resolve(cache);

	        if (!skipIndexPatternCache) {
	          return es.get({
	            index: kbnIndex,
	            type: 'index-pattern',
	            id: id,
	            _sourceInclude: ['fields']
	          }).then(function (resp) {
	            if (resp.found && resp._source.fields) {
	              fieldCache.set(id, JSON.parse(resp._source.fields));
	            }
	            return self.getFieldsForIndexPattern(indexPattern, true);
	          });
	        }

	        var promise = Promise.resolve(id);
	        if (indexPattern.intervalName) {
	          promise = self.getIndicesForIndexPattern(indexPattern).then(function (existing) {
	            if (existing.matches.length === 0) throw new IndexPatternMissingIndices();
	            return existing.matches.slice(-config.get('indexPattern:fieldMapping:lookBack')); // Grab the most recent
	          });
	        }

	        return promise.then(function (indexList) {
	          return es.indices.getFieldMapping({
	            index: indexList,
	            field: '*',
	            ignoreUnavailable: _.isArray(indexList),
	            allowNoIndices: false,
	            includeDefaults: true
	          });
	        })['catch'](handleMissingIndexPattern).then(transformMappingIntoFields).then(function (fields) {
	          fieldCache.set(id, fields);
	          return fieldCache.get(id);
	        });
	      };

	      self.getIndicesForIndexPattern = function (indexPattern) {
	        return es.indices.getAliases({
	          index: patternToWildcard(indexPattern.id)
	        }).then(function (resp) {
	          // let all = Object.keys(resp).sort();
	          var all = _(resp).map(function (index, key) {
	            if (index.aliases) {
	              return [_Object$keys(index.aliases), key];
	            } else {
	              return key;
	            }
	          }).flattenDeep().sort().uniq(true).value();

	          var matches = all.filter(function (existingIndex) {
	            var parsed = moment(existingIndex, indexPattern.id);
	            return existingIndex === parsed.format(indexPattern.id);
	          });

	          return {
	            all: all,
	            matches: matches
	          };
	        })['catch'](handleMissingIndexPattern);
	      };

	      /**
	       * Clears mapping caches from elasticsearch and from local object
	       * @param {dataSource} dataSource
	       * @returns {Promise}
	       * @async
	       */
	      self.clearCache = function (indexPattern) {
	        fieldCache.clear(indexPattern);
	        return Promise.resolve();
	      };
	    }

	    function handleMissingIndexPattern(err) {
	      if (err.status >= 400) {
	        // transform specific error type
	        return Promise.reject(new IndexPatternMissingIndices());
	      } else {
	        // rethrow all others
	        throw err;
	      }
	    }

	    return new Mapper();
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 891 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(892);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function transformMappingIntoFields(Private, kbnIndex, config) {
	    var _ = __webpack_require__(194);
	    var mapField = Private(__webpack_require__(892));

	    /**
	     * Convert the ES response into the simple map for fields to
	     * mappings which we will cache
	     *
	     * @param  {object} response - complex, excessively nested
	     *                           object returned from ES
	     * @return {object} - simple object that works for all of kibana
	     *                    use-cases
	     */
	    return function (response) {
	      var fields = {};
	      _.each(response, function (index, indexName) {
	        if (indexName === kbnIndex) return;
	        _.each(index.mappings, function (mappings) {
	          _.each(mappings, function (field, name) {
	            var keys = _Object$keys(field.mapping);
	            if (keys.length === 0 || name[0] === '_' && !_.contains(config.get('metaFields'), name)) return;

	            var mapping = mapField(field, name);

	            if (fields[name]) {
	              if (fields[name].type !== mapping.type) {
	                // conflict fields are not available for much except showing in the discover table
	                mapping.type = 'conflict';
	                mapping.indexed = false;
	              }
	            }
	            fields[name] = _.pick(mapping, 'type', 'indexed', 'analyzed', 'doc_values');
	          });
	        });
	      });

	      config.get('metaFields').forEach(function (meta) {
	        if (fields[meta]) return;

	        var field = { mapping: {} };
	        field.mapping[meta] = {};
	        fields[meta] = mapField(field, meta);
	      });

	      return _.map(fields, function (mapping, name) {
	        mapping.name = name;
	        return mapping;
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(893);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function MapFieldFn(Private, config) {
	    var _ = __webpack_require__(194);
	    var castMappingType = Private(__webpack_require__(893));

	    /**
	     * Accepts a field object and its name, and tries to give it a mapping
	     * @param  {Object} field - the field mapping returned by elasticsearch
	     * @param  {String} type - name of the field
	     * @return {Object} - the resulting field after overrides and tweaking
	     */
	    return function mapField(field, name) {
	      var keys = _Object$keys(field.mapping);
	      if (keys.length === 0 || name[0] === '_' && !_.contains(config.get('metaFields'), name)) return;

	      var mapping = _.cloneDeep(field.mapping[keys.shift()]);
	      mapping.type = castMappingType(mapping.type);

	      // Override the mapping, even if elasticsearch says otherwise
	      var mappingOverrides = {
	        _source: { type: '_source' },
	        _index: { type: 'string' },
	        _type: { type: 'string' },
	        _id: { type: 'string' },
	        _timestamp: {
	          type: 'date',
	          indexed: true
	        },
	        _score: {
	          type: 'number',
	          indexed: false
	        }
	      };

	      if (!mapping.index || mapping.index === 'no') {
	        // elasticsearch responds with false sometimes and 'no' others
	        mapping.indexed = false;
	      } else {
	        mapping.indexed = true;
	      }

	      mapping.analyzed = mapping.index === 'analyzed' ? true : false;

	      if (mappingOverrides[name]) {
	        _.merge(mapping, mappingOverrides[name]);
	      }

	      return mapping;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 893 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(337);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CastMappingTypeFn() {
	    var IndexedArray = __webpack_require__(337);

	    castMappingType.types = new IndexedArray({
	      index: ['name'],
	      group: ['type'],
	      immutable: true,
	      initialSet: [{ name: 'string', type: 'string', group: 'base' }, { name: 'date', type: 'date', group: 'base' }, { name: 'boolean', type: 'boolean', group: 'base' }, { name: 'float', type: 'number', group: 'number' }, { name: 'double', type: 'number', group: 'number' }, { name: 'integer', type: 'number', group: 'number' }, { name: 'long', type: 'number', group: 'number' }, { name: 'short', type: 'number', group: 'number' }, { name: 'byte', type: 'number', group: 'number' }, { name: 'token_count', type: 'number', group: 'number' }, { name: 'geo_point', type: 'geo_point', group: 'geo' }, { name: 'geo_shape', type: 'geo_shape', group: 'geo' }, { name: 'ip', type: 'ip', group: 'other' }, { name: 'attachment', type: 'attachment', group: 'other' }, { name: 'murmur3', type: 'murmur3', group: 'hash' }]
	    });

	    /**
	     * Accepts a mapping type, and converts it into it's js equivilent
	     * @param  {String} type - the type from the mapping's 'type' field
	     * @return {String} - the most specific type that we care for
	     */
	    function castMappingType(name) {
	      if (!name) return 'unknown';

	      var match = castMappingType.types.byName[name];
	      return match ? match.type : 'string';
	    }

	    return castMappingType;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 894 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(243);
	__webpack_require__(337);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function IndexNameIntervalsService(timefilter) {
	    var _ = __webpack_require__(194);
	    var moment = __webpack_require__(243);
	    var IndexedArray = __webpack_require__(337);

	    var intervals = new IndexedArray({
	      index: ['name'],
	      initialSet: [{
	        name: 'hours',
	        startOf: 'hour',
	        display: 'Hourly'
	      }, {
	        name: 'days',
	        startOf: 'day',
	        display: 'Daily'
	      }, {
	        name: 'weeks',
	        startOf: 'isoWeek',
	        display: 'Weekly'
	      }, {
	        name: 'months',
	        startOf: 'month',
	        display: 'Monthly'
	      }, {
	        name: 'years',
	        startOf: 'year',
	        display: 'Yearly'
	      }]
	    });

	    intervals.toIndexList = function (format, interval, a, b, sortDirection) {
	      var bounds = undefined;

	      // setup the range that the list will span, return two moment objects that
	      // are in proper order. a and b can be numbers to specify to go before or after now (respectively)
	      // a certain number of times, based on the interval
	      var range = [[a, 'min', 'startOf'], [b, 'max', 'startOf']].map(function (v) {
	        var val = v[0];
	        var bound = v[1];
	        var extend = v[2];

	        // grab a bound from the time filter
	        if (val == null) {
	          bounds = bounds || timefilter.getBounds();
	          val = bounds[bound];
	        }

	        if (_.isNumeric(val)) val = moment().add(val, interval.name);else if (!moment.isMoment(val)) val = moment(val);

	        return val.clone().utc()[extend](interval.startOf);
	      }).sort(function (a, b) {
	        return a - b;
	      });

	      if (typeof interval === 'string') {
	        interval = _.find(intervals, { name: interval });
	        if (!interval) throw new Error('Interval must be one of ' + _.pluck(intervals, 'name'));
	      }

	      var indexList = [];
	      var start = range.shift();
	      // turn stop into milliseconds to that it's not constantly converted by the while condition
	      var stop = range.shift().valueOf();

	      var add = sortDirection === 'desc' ? 'unshift' : 'push';

	      while (start <= stop) {
	        var index = start.format(format);
	        var next = moment(start).add(1, interval.name);
	        var bound = moment(next).subtract(1, 'ms');

	        var min = start.valueOf();
	        var max = bound.valueOf();
	        indexList[add]({
	          index: index,
	          min: min,
	          max: max
	        });

	        start = next;
	      }

	      return indexList;
	    };

	    return intervals;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function PatternToWildcardFn() {
	    return function (format) {
	      var wildcard = '';
	      var inEscape = false;
	      var inPattern = false;

	      for (var i = 0; i < format.length; i++) {
	        var ch = format.charAt(i);
	        switch (ch) {
	          case '[':
	            inPattern = false;
	            if (!inEscape) {
	              inEscape = true;
	            } else {
	              wildcard += ch;
	            }
	            break;
	          case ']':
	            if (inEscape) {
	              inEscape = false;
	            } else if (!inPattern) {
	              wildcard += ch;
	            }
	            break;
	          default:
	            if (inEscape) {
	              wildcard += ch;
	            } else if (!inPattern) {
	              wildcard += '*';
	              inPattern = true;
	            }
	        }
	      }

	      return wildcard;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);

	  return function LocalCacheFactory() {
	    function LocalCache(opts) {
	      opts = opts || {};
	      var _id = opts.id || function (o) {
	        return '' + o;
	      };
	      var _cache = {};

	      this.get = function (obj) {
	        var id = _id(obj);
	        return _cache[id] ? JSON.parse(_cache[id]) : null;
	      };

	      this.set = function (obj, val) {
	        var id = _id(obj);
	        var clean = !_cache.hasOwnProperty(id);
	        _cache[id] = angular.toJson(val);
	        return clean;
	      };

	      this.clear = function (obj) {
	        if (!obj) {
	          _cache = {};
	          return;
	        }

	        var id = _id(obj);
	        delete _cache[id];
	      };
	    }

	    return LocalCache;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	// Takes a hit, merges it with any stored/scripted fields, and with the metaFields
	// returns a flattened version
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function () {
	    var self = this;
	    var scriptFields = {};
	    var fielddataFields = [];

	    fielddataFields = _.pluck(self.fields.byType.date, 'name');

	    _.each(self.getScriptedFields(), function (field) {
	      scriptFields[field.name] = { script: field.script, lang: field.lang };
	    });

	    return {
	      fields: ['*', '_source'],
	      scriptFields: scriptFields,
	      fielddataFields: fielddataFields
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(212);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	  return function MappingSetupService(kbnIndex, es) {
	    var angular = __webpack_require__(212);
	    var _ = __webpack_require__(194);
	    var mappingSetup = this;

	    var json = {
	      _serialize: function _serialize(val) {
	        if (val != null) return angular.toJson(val);
	      },
	      _deserialize: function _deserialize(val) {
	        if (val != null) return JSON.parse(val);
	      }
	    };

	    /**
	     * Use to create the mappings, but that should only happen one at a time
	     */
	    var activeTypeCreations = {};

	    /**
	     * Get the list of type's mapped in elasticsearch
	     * @return {[type]} [description]
	     */
	    var getKnownKibanaTypes = _.once(function () {
	      var indexName = kbnIndex;
	      return es.indices.getFieldMapping({
	        // only concerned with types in this kibana index
	        index: indexName,
	        // check all types
	        type: '*',
	        // limit the response to just the _source field for each index
	        field: '_source'
	      }).then(function (resp) {
	        return _.keys(resp[indexName].mappings);
	      });
	    });

	    mappingSetup.expandShorthand = function (sh) {
	      return _.mapValues(sh || {}, function (val, prop) {
	        // allow shortcuts for the field types, by just setting the value
	        // to the type name
	        if (typeof val === 'string') val = { type: val };

	        if (val.type === 'json') {
	          val.type = 'string';
	          val._serialize = json._serialize;
	          val._deserialize = json._deserialize;
	        }

	        return val;
	      });
	    };

	    mappingSetup.isDefined = function (type) {
	      return getKnownKibanaTypes().then(function (knownTypes) {
	        // if the type is in the knownTypes array already
	        return !! ~knownTypes.indexOf(type);
	      });
	    };

	    mappingSetup.setup = function (type, mapping) {
	      // if there is already a creation running for this index type
	      if (activeTypeCreations[type]) {
	        // return a promise that will reexecute the setup once the
	        // current is complete.
	        return activeTypeCreations[type].then(function () {
	          return mappingSetup.setup(type, mapping);
	        });
	      }

	      var prom = getKnownKibanaTypes().then(function (knownTypes) {
	        // if the type is in the knownTypes array already
	        if (~knownTypes.indexOf(type)) return false;

	        // we need to create the mapping
	        var body = {};
	        body[type] = {
	          properties: mapping
	        };

	        return es.indices.putMapping({
	          index: kbnIndex,
	          type: type,
	          body: body
	        }).then(function (resp) {
	          // add this type to the list of knownTypes
	          knownTypes.push(type);

	          // cast the response to "true", meaning
	          // the mapping exists
	          return true;
	        });
	      })
	      // wether this fails or not, remove it from the activeTypeCreations obj
	      // once complete
	      ['finally'](function () {
	        delete activeTypeCreations[type];
	      });

	      activeTypeCreations[type] = prom;
	      return prom;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(900);
	__webpack_require__(337);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FieldListProvider(Private) {
	    var Field = Private(__webpack_require__(900));
	    var IndexedArray = __webpack_require__(337);
	    var _ = __webpack_require__(194);

	    _['class'](FieldList).inherits(IndexedArray);
	    function FieldList(indexPattern, specs) {
	      FieldList.Super.call(this, {
	        index: ['name'],
	        group: ['type'],
	        initialSet: specs.map(function (field) {
	          return new Field(indexPattern, field);
	        })
	      });
	    }

	    return FieldList;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(901);
	__webpack_require__(905);
	__webpack_require__(888);
	__webpack_require__(906);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	      return function FieldObjectProvider(Private, shortDotsFilter, $rootScope, Notifier) {
	            var notify = new Notifier({ location: 'IndexPattern Field' });
	            var FieldFormat = Private(__webpack_require__(901));
	            var fieldTypes = Private(__webpack_require__(905));
	            var fieldFormats = Private(__webpack_require__(888));
	            var ObjDefine = __webpack_require__(906);

	            function Field(indexPattern, spec) {
	                  // unwrap old instances of Field
	                  if (spec instanceof Field) spec = spec.$$spec;

	                  // constuct this object using ObjDefine class, which
	                  // extends the Field.prototype but gets it's properties
	                  // defined using the logic below
	                  var obj = new ObjDefine(spec, Field.prototype);

	                  if (spec.name === '_source') {
	                        spec.type = '_source';
	                  }

	                  // find the type for this field, fallback to unknown type
	                  var type = fieldTypes.byName[spec.type];
	                  if (spec.type && !type) {
	                        notify.error('Unknown field type "' + spec.type + '"' + ' for field "' + spec.name + '"' + ' in indexPattern "' + indexPattern.id + '"');
	                  }

	                  if (!type) type = fieldTypes.byName.unknown;

	                  var format = spec.format;
	                  if (!format || !(format instanceof FieldFormat)) {
	                        format = indexPattern.fieldFormatMap[spec.name] || fieldFormats.getDefaultInstance(spec.type);
	                  }

	                  var indexed = !!spec.indexed;
	                  var scripted = !!spec.scripted;
	                  var sortable = spec.name === '_score' || (indexed || scripted) && type.sortable;
	                  var bucketable = indexed || scripted;
	                  var filterable = spec.name === '_id' || scripted || indexed && type.filterable;

	                  obj.fact('name');
	                  obj.fact('type');
	                  obj.writ('count', spec.count || 0);

	                  // scripted objs
	                  obj.fact('scripted', scripted);
	                  obj.writ('script', scripted ? spec.script : null);
	                  obj.writ('lang', scripted ? spec.lang || 'expression' : null);

	                  // mapping info
	                  obj.fact('indexed', indexed);
	                  obj.fact('analyzed', !!spec.analyzed);
	                  obj.fact('doc_values', !!spec.doc_values);

	                  // usage flags, read-only and won't be saved
	                  obj.comp('format', format);
	                  obj.comp('sortable', sortable);
	                  obj.comp('bucketable', bucketable);
	                  obj.comp('filterable', filterable);

	                  // computed values
	                  obj.comp('indexPattern', indexPattern);
	                  obj.comp('displayName', shortDotsFilter(spec.name));
	                  obj.comp('$$spec', spec);

	                  return obj.create();
	            }

	            Field.prototype.routes = {
	                  edit: '/settings/indices/{{indexPattern.id}}/field/{{name}}'
	            };

	            return Field;
	      };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(902);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FieldFormatClassProvider(config, $rootScope, Private) {
	    var _ = __webpack_require__(194);
	    var contentTypes = Private(__webpack_require__(902));

	    function FieldFormat(params) {
	      var self = this;

	      // give the constructor a more appropriate name
	      self.type = self.constructor;

	      // keep the params and defaults seperate
	      self._params = params || {};
	      self._paramDefaults = self.type.paramDefaults || {};

	      // one content type, so assume text
	      if (_.isFunction(self._convert)) {
	        self._convert = { text: self._convert };
	      }

	      contentTypes.setup(self);
	    }

	    FieldFormat.from = function (converter) {
	      _['class'](FieldFormatFromConverter).inherits(FieldFormat);
	      function FieldFormatFromConverter(params) {
	        FieldFormatFromConverter.Super.call(this, params);
	      }
	      FieldFormatFromConverter.prototype._convert = converter;
	      return FieldFormatFromConverter;
	    };

	    /**
	     * Convert a raw value to a formated string
	     * @param  {any} value
	     * @param  {string} [contentType=text] - optional content type, the only two contentTypes
	     *                                currently supported are "html" and "text", which helps
	     *                                formatters adjust to different contexts
	     * @return {string} - the formatted string, which is assumed to be html, safe for
	     *                    injecting into the DOM or a DOM attribute
	     */
	    FieldFormat.prototype.convert = function (value, contentType) {
	      return this.getConverterFor(contentType)(value);
	    };

	    /**
	     * Get a convert function that is bound to a specific contentType
	     * @param  {string} [contentType=text]
	     * @return {function} - a bound converter function
	     */
	    FieldFormat.prototype.getConverterFor = function (contentType) {
	      return this._convert[contentType || 'text'];
	    };

	    /**
	     * Get the value of a param. This value may be a default value.
	     *
	     * @param  {string} name - the param name to fetch
	     * @return {any}
	     */
	    FieldFormat.prototype.param = function (name) {
	      var val = this._params[name];
	      if (val || val === false || val === 0) {
	        // truthy, false, or 0 are fine
	        // '', NaN, null, undefined, etc are not
	        return val;
	      }

	      return this._paramDefaults[name];
	    };

	    /**
	     * Get all of the params in a single object
	     * @return {object}
	     */
	    FieldFormat.prototype.params = function () {
	      return _.cloneDeep(_.defaults({}, this._params, this._paramDefaults));
	    };

	    /**
	     * serialize this format to a simple POJO, with only the params
	     * that are not default
	     *
	     * @return {object}
	     */
	    FieldFormat.prototype.toJSON = function () {
	      var type = this.type;
	      var defaults = this._paramDefaults;

	      var params = _.transform(this._params, function (uniqParams, val, param) {
	        if (val !== defaults[param]) {
	          uniqParams[param] = val;
	        }
	      }, {});

	      if (!_.size(params)) {
	        params = undefined;
	      }

	      return {
	        id: type.id,
	        params: params
	      };
	    };

	    return FieldFormat;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 902 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(903);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function contentTypesProvider(highlightFilter) {
	    var _ = __webpack_require__(194);
	    var angular = __webpack_require__(212);
	    __webpack_require__(903);

	    var types = {
	      html: function html(format, convert) {
	        return function recurse(value, field, hit) {
	          if (!value || typeof value.map !== 'function') {
	            return convert.call(format, value, field, hit);
	          }

	          var subVals = value.map(function (v) {
	            return recurse(v, field, hit);
	          });
	          var useMultiLine = subVals.some(function (sub) {
	            return sub.indexOf('\n') > -1;
	          });

	          return subVals.join(',' + (useMultiLine ? '\n' : ' '));
	        };
	      },

	      text: function text(format, convert) {
	        return function recurse(value) {
	          if (!value || typeof value.map !== 'function') {
	            return convert.call(format, value);
	          }

	          // format a list of values. In text contexts we just use JSON encoding
	          return angular.toJson(value.map(recurse), true);
	        };
	      }
	    };

	    function fallbackText(value) {
	      return _.asPrettyString(value);
	    }

	    function fallbackHtml(value, field, hit) {
	      var formatted = _.escape(this.convert(value, 'text'));

	      if (!hit || !hit.highlight || !hit.highlight[field.name]) {
	        return formatted;
	      } else {
	        return highlightFilter(formatted, hit.highlight[field.name]);
	      }
	    }

	    function setup(format) {
	      var src = format._convert || {};
	      var converters = format._convert = {};

	      converters.text = types.text(format, src.text || fallbackText);
	      converters.html = types.html(format, src.html || fallbackHtml);

	      return format._convert;
	    }

	    return {
	      types: types,
	      setup: setup
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 903 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(904);
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(904);

	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);
	  var module = __webpack_require__(215).get('kibana');

	  module.filter('highlight', function (highlightTags) {
	    return function (formatted, highlight) {
	      if (typeof formatted === 'object') formatted = angular.toJson(formatted);

	      _.each(highlight, function (section) {
	        section = _.escape(section);

	        // Strip out the highlight tags to compare against the formatted string
	        var untagged = section.split(highlightTags.pre).join('').split(highlightTags.post).join('');

	        // Replace all highlight tags with proper html tags
	        var tagged = section.split(highlightTags.pre).join('<mark>').split(highlightTags.post).join('</mark>');

	        // Replace all instances of the untagged string with the properly tagged string
	        formatted = formatted.split(untagged).join(tagged);
	      });

	      return formatted;
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');

	  // By default, ElasticSearch surrounds matched values in <em></em>. This is not ideal because it is possible that
	  // the value could contain <em></em> in the value. We define these custom tags that we would never expect to see
	  // inside a field value.
	  module.constant('highlightTags', {
	    pre: '@kibana-highlighted-field@',
	    post: '@/kibana-highlighted-field@'
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(337);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function IndexPatternFieldTypes() {
	    var IndexedArray = __webpack_require__(337);

	    return new IndexedArray({
	      index: ['name'],
	      group: ['sortable', 'filterable'],
	      immutable: true,
	      initialSet: [{ name: 'ip', sortable: true, filterable: true }, { name: 'date', sortable: true, filterable: true }, { name: 'string', sortable: true, filterable: true }, { name: 'number', sortable: true, filterable: true }, { name: 'boolean', sortable: true, filterable: true }, { name: 'conflict', sortable: false, filterable: false }, { name: 'geo_point', sortable: false, filterable: false }, { name: 'geo_shape', sortable: false, filterable: false }, { name: 'attachment', sortable: false, filterable: false }, { name: 'murmur3', sortable: false, filterable: false }, { name: 'unknown', sortable: false, filterable: false }, { name: '_source', sortable: false, filterable: false }]
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 906 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(203);
	__webpack_require__(239);
	__webpack_require__(194);

	'use strict';

	var _Object$create = __webpack_require__(203)['default'];

	var _Object$defineProperty = __webpack_require__(239)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  function ObjDefine(defaults, prototype) {
	    this.obj; // created by this.create()

	    this.descs = {};
	    this.defaults = defaults || {};
	    this.prototype = prototype || Object.prototype;
	  }

	  ObjDefine.REDEFINE_SUPPORTED = (function () {
	    var a = _Object$create(Object.prototype, {
	      prop: {
	        configurable: true,
	        value: 1
	      }
	    });

	    Object.defineProperty(a, 'prop', {
	      configurable: true,
	      value: 2
	    });

	    return a.prop === 2;
	  })();

	  /**
	   * normal value, writable and exported in JSON
	   *
	   * @param  {any} v - value
	   * @return {object} - property descriptor
	   */
	  ObjDefine.prototype.writ = function (name, val) {
	    this._define(name, val, true, true);
	  };

	  /**
	   * known value, exported in JSON, not changeable
	   *
	   * @param  {any} v - value
	   * @return {object} - property descriptor
	   */
	  ObjDefine.prototype.fact = function (name, val) {
	    this._define(name, val, true);
	  };

	  /**
	   * computed fact, not exported or changeable
	   *
	   * @param  {any} v - value
	   * @return {object} - property descriptor
	   */
	  ObjDefine.prototype.comp = function (name, val) {
	    this._define(name, val);
	  };

	  /**
	   * Creates an object, decorated by the property descriptors
	   * created by other ObjDefine methods and inheritting form the
	   * prototype
	   *
	   * # note:
	   * If a value is writable, but the value is undefined, the property will
	   * be created by not exported to JSON unless the property is written to
	   *
	   * @return {object} - created object
	   */
	  ObjDefine.prototype.create = function () {
	    var self = this;
	    self.obj = _Object$create(this.prototype, self.descs);

	    if (!ObjDefine.REDEFINE_SUPPORTED && !self.prototype.toJSON) {
	      // since we can't redefine properties as enumerable we will
	      // clone the object on serialization and choose which properties
	      // to include or trim manually. This is currently only in use in PhantomJS
	      // due to https://github.com/ariya/phantomjs/issues/11856
	      self.obj.toJSON = function () {
	        return _.transform(self.obj, function (json, val, key) {
	          var desc = self.descs[key];
	          if (desc && desc.enumerable && val == null) return;
	          json[key] = val;
	        }, {});
	      };
	    }

	    return self.obj;
	  };

	  /**
	   * Private APIS
	   */

	  ObjDefine.prototype._define = function (name, val, exported, changeable) {
	    val = val != null ? val : this.defaults[name];
	    this.descs[name] = this._describe(name, val, !!exported, !!changeable);
	  };

	  ObjDefine.prototype._describe = function (name, val, exported, changeable) {
	    var self = this;
	    var exists = val != null;

	    if (exported && ObjDefine.REDEFINE_SUPPORTED) {
	      return {
	        enumerable: exists,
	        configurable: true,
	        get: _.constant(val),
	        set: function set(update) {
	          if (!changeable) return false;

	          // change the descriptor, since the value now exists.
	          self.descs[name] = self._describe(name, update, exported, changeable);

	          // apply the updated descriptor
	          _Object$defineProperty(self.obj, name, self.descs[name]);
	        }
	      };
	    }

	    if (exported && !ObjDefine.REDEFINE_SUPPORTED) {
	      return {
	        enumerable: true,
	        configurable: true,
	        writable: changeable,
	        value: val
	      };
	    }

	    return {
	      enumerable: false,
	      writable: changeable,
	      configurable: true,
	      value: val
	    };
	  };

	  return ObjDefine;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	// Takes a hit, merges it with any stored/scripted fields, and with the metaFields
	// returns a flattened version
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FlattenHitProvider(config, $rootScope) {
	    var _ = __webpack_require__(194);

	    var metaFields = config.get('metaFields');
	    $rootScope.$on('change:config.metaFields', function () {
	      metaFields = config.get('metaFields');
	    });

	    function flattenHit(indexPattern, hit) {
	      var flat = {};

	      // recursively merge _source
	      var fields = indexPattern.fields.byName;
	      (function flatten(obj, keyPrefix) {
	        keyPrefix = keyPrefix ? keyPrefix + '.' : '';
	        _.forOwn(obj, function (val, key) {
	          key = keyPrefix + key;

	          if (flat[key] !== void 0) return;

	          var hasValidMapping = fields[key] && fields[key].type !== 'conflict';
	          var isValue = !_.isPlainObject(val);

	          if (hasValidMapping || isValue) {
	            flat[key] = val;
	            return;
	          }

	          flatten(val, key);
	        });
	      })(hit._source);

	      // assign the meta fields
	      _.each(metaFields, function (meta) {
	        if (meta === '_source') return;
	        flat[meta] = hit[meta];
	      });

	      // unwrap computed fields
	      _.forOwn(hit.fields, function (val, key) {
	        if (key[0] === '_' && !_.contains(metaFields, key)) return;
	        flat[key] = _.isArray(val) && val.length === 1 ? val[0] : val;
	      });

	      return flat;
	    }

	    return function (indexPattern) {
	      function cachedFlatten(hit) {
	        return hit.$$_flattened || (hit.$$_flattened = flattenHit(indexPattern, hit));
	      }

	      cachedFlatten.uncached = _.partial(flattenHit, indexPattern);

	      return cachedFlatten;
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	// Takes a hit, merges it with any stored/scripted fields, and with the metaFields
	// returns a formated version
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  return function (indexPattern, defaultFormat) {

	    function convert(hit, val, fieldName) {
	      var field = indexPattern.fields.byName[fieldName];
	      if (!field) return defaultFormat.convert(val, 'html');
	      return field.format.getConverterFor('html')(val, field, hit);
	    }

	    function formatHit(hit) {
	      if (hit.$$_formatted) return hit.$$_formatted;

	      // use and update the partial cache, but don't rewrite it. _source is stored in partials
	      // but not $$_formatted
	      var partials = hit.$$_partialFormatted || (hit.$$_partialFormatted = {});
	      var cache = hit.$$_formatted = {};

	      _.forOwn(indexPattern.flattenHit(hit), function (val, fieldName) {
	        // sync the formatted and partial cache
	        var formatted = partials[fieldName] == null ? convert(hit, val, fieldName) : partials[fieldName];
	        cache[fieldName] = partials[fieldName] = formatted;
	      });

	      return cache;
	    }

	    formatHit.formatField = function (hit, fieldName) {
	      var partials = hit.$$_partialFormatted;
	      if (partials && partials[fieldName] != null) {
	        return partials[fieldName];
	      }

	      if (!partials) {
	        partials = hit.$$_partialFormatted = {};
	      }

	      var val = fieldName === '_source' ? hit._source : indexPattern.flattenHit(hit)[fieldName];
	      return partials[fieldName] = convert(hit, val, fieldName);
	    };

	    return formatHit;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(910);
	__webpack_require__(194);
	__webpack_require__(243);

	'use strict';

	var _defineProperty = __webpack_require__(910)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var moment = __webpack_require__(243);

	  // gets parsed value if given arg is a moment object
	  function timeValue(val) {
	    return moment.isMoment(val) ? val.valueOf() : val;
	  }

	  // returns a properly formatted millisecond timestamp index constraint
	  function msConstraint(comparison, value) {
	    var _ref;

	    return _ref = {}, _defineProperty(_ref, comparison, timeValue(value)), _defineProperty(_ref, 'format', 'epoch_millis'), _ref;
	  }

	  // returns a new object with any indexes removed that do not include the
	  // time field
	  //
	  // fixme: this really seems like a bug that needs to be fixed in
	  //        elasticsearch itself, but this workaround will do for now
	  function omitIndicesWithoutTimeField(indices, timeFieldName) {
	    return _.pick(indices, function (index) {
	      return index.fields[timeFieldName];
	    });
	  }

	  return function CalculateIndicesFactory(Promise, es) {

	    // Uses the field stats api to determine the names of indices that need to
	    // be queried against that match the given pattern and fall within the
	    // given time range
	    function calculateIndices(pattern, timeFieldName, start, stop, sortDirection) {
	      return getFieldStats(pattern, timeFieldName, start, stop).then(function (resp) {
	        return omitIndicesWithoutTimeField(resp.indices, timeFieldName);
	      }).then(function (indices) {
	        return sortIndexStats(indices, timeFieldName, sortDirection);
	      });
	    };

	    // creates the configuration hash that must be passed to the elasticsearch
	    // client
	    function getFieldStats(pattern, timeFieldName, start, stop) {
	      var constraints = {};
	      if (start) {
	        constraints.max_value = msConstraint('gte', start);
	      }
	      if (stop) {
	        constraints.min_value = msConstraint('lte', stop);
	      }

	      return es.fieldStats({
	        index: pattern,
	        level: 'indices',
	        body: {
	          fields: [timeFieldName],
	          index_constraints: _defineProperty({}, timeFieldName, constraints)
	        }
	      });
	    }

	    function sortIndexStats(indices, timeFieldName, sortDirection) {
	      var desc = sortDirection === 'desc';
	      var leader = desc ? 'max' : 'min';

	      var indexDetails = _(indices).map(function (stats, index) {
	        var field = stats.fields[timeFieldName];

	        // TODO: remove when we get to es 2.2, see elastic/elasticsearch#14404
	        var min = field.min_value;
	        if (typeof min === 'string') min = moment(min).valueOf();

	        var max = field.max_value;
	        if (typeof max === 'string') max = moment(max).valueOf();

	        return { index: index, min: min, max: max };
	      });

	      if (sortDirection) {
	        indexDetails = indexDetails.sortByOrder([leader], [sortDirection]);
	      }

	      return indexDetails.value();
	    }

	    return calculateIndices;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$defineProperty = __webpack_require__(239)["default"];

	exports["default"] = function (obj, key, value) {
	  if (key in obj) {
	    _Object$defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	exports.__esModule = true;

/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function PatternCache() {
	    var _ = __webpack_require__(194);

	    var vals = {};

	    var validId = function validId(id) {
	      return typeof id !== 'object';
	    };

	    this.get = function (id) {
	      if (validId(id)) return vals[id];
	    };

	    this.set = function (id, prom) {
	      if (validId(id)) vals[id] = prom;
	      return prom;
	    };

	    this.clear = this['delete'] = function (id) {
	      if (validId(id)) delete vals[id];
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(878);
	__webpack_require__(913);
	__webpack_require__(916);
	__webpack_require__(914);
	__webpack_require__(918);
	__webpack_require__(919);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function SearchSourceFactory(Promise, Private) {
	    var _ = __webpack_require__(194);
	    var SourceAbstract = Private(__webpack_require__(878));
	    var SearchRequest = Private(__webpack_require__(913));
	    var SegmentedRequest = Private(__webpack_require__(916));
	    var searchStrategy = Private(__webpack_require__(914));
	    var normalizeSortRequest = Private(__webpack_require__(918));
	    var rootSearchSource = __webpack_require__(919);

	    _['class'](SearchSource).inherits(SourceAbstract);
	    function SearchSource(initialState) {
	      SearchSource.Super.call(this, initialState, searchStrategy);
	    }

	    /*****
	     * PUBLIC API
	     *****/

	    /**
	     * List of the editable state properties that turn into a
	     * chainable API
	     *
	     * @type {Array}
	     */
	    SearchSource.prototype._methods = ['type', 'query', 'filter', 'sort', 'highlight', 'aggs', 'from', 'size', 'source'];

	    SearchSource.prototype.index = function (indexPattern) {
	      if (indexPattern === undefined) return this._state.index;
	      if (indexPattern === null) return delete this._state.index;
	      if (!indexPattern || typeof indexPattern.toIndexList !== 'function') {
	        throw new TypeError('expected indexPattern to be an IndexPattern duck.');
	      }

	      this._state.index = indexPattern;
	      return this;
	    };

	    SearchSource.prototype.extend = function () {
	      return new SearchSource().inherits(this);
	    };

	    /**
	     * Set a searchSource that this source should inherit from
	     * @param  {SearchSource} searchSource - the parent searchSource
	     * @return {this} - chainable
	     */
	    SearchSource.prototype.inherits = function (parent) {
	      this._parent = parent;
	      return this;
	    };

	    /**
	     * Get the parent of this SearchSource
	     * @return {undefined|searchSource}
	     */
	    SearchSource.prototype.getParent = function (onlyHardLinked) {
	      var self = this;
	      if (self._parent === false) return;
	      if (self._parent) return self._parent;
	      return onlyHardLinked ? undefined : Private(rootSearchSource).get();
	    };

	    /**
	     * Temporarily prevent this Search from being fetched... not a fan but it's easy
	     */
	    SearchSource.prototype.disable = function () {
	      this._fetchDisabled = true;
	    };

	    /**
	     * Reverse of SourceAbstract#disable(), only need to call this if source was previously disabled
	     */
	    SearchSource.prototype.enable = function () {
	      this._fetchDisabled = false;
	    };

	    SearchSource.prototype.onBeginSegmentedFetch = function (initFunction) {
	      var self = this;
	      return Promise['try'](function addRequest() {
	        var req = new SegmentedRequest(self, Promise.defer(), initFunction);

	        // return promises created by the completion handler so that
	        // errors will bubble properly
	        return req.defer.promise.then(addRequest);
	      });
	    };

	    /******
	     * PRIVATE APIS
	     ******/

	    /**
	     * Gets the type of the DataSource
	     * @return {string}
	     */
	    SearchSource.prototype._getType = function () {
	      return 'search';
	    };

	    /**
	     * Create a common search request object, which should
	     * be put into the pending request queye, for this search
	     * source
	     *
	     * @param {Deferred} defer - the deferred object that should be resolved
	     *                         when the request is complete
	     * @return {SearchRequest}
	     */
	    SearchSource.prototype._createRequest = function (defer) {
	      return new SearchRequest(this, defer);
	    };

	    /**
	     * Used to merge properties into the state within ._flatten().
	     * The state is passed in and modified by the function
	     *
	     * @param  {object} state - the current merged state
	     * @param  {*} val - the value at `key`
	     * @param  {*} key - The key of `val`
	     * @return {undefined}
	     */
	    SearchSource.prototype._mergeProp = function (state, val, key) {
	      var _this = this;

	      if (typeof val === 'function') {
	        var _ret = (function () {
	          var source = _this;
	          return {
	            v: Promise.cast(val(_this)).then(function (newVal) {
	              return source._mergeProp(state, newVal, key);
	            })
	          };
	        })();

	        if (typeof _ret === 'object') return _ret.v;
	      }

	      if (val == null || !key || !_.isString(key)) return;

	      switch (key) {
	        case 'filter':
	          // user a shallow flatten to detect if val is an array, and pull the values out if it is
	          state.filters = _([state.filters || [], val]).flatten()
	          // Yo Dawg! I heard you needed to filter out your filters
	          .reject(function (filter) {
	            return !filter || _.get(filter, 'meta.disabled');
	          }).value();
	          return;
	        case 'index':
	        case 'type':
	        case 'id':
	          if (key && state[key] == null) {
	            state[key] = val;
	          }
	          return;
	        case 'source':
	          key = '_source';
	          addToBody();
	          break;
	        case 'sort':
	          val = normalizeSortRequest(val, this.get('index'));
	          addToBody();
	          break;
	        default:
	          addToBody();
	      }

	      /**
	       * Add the key and val to the body of the resuest
	       */
	      function addToBody() {
	        state.body = state.body || {};
	        // ignore if we already have a value
	        if (state.body[key] == null) {
	          if (key === 'query' && _.isString(val)) {
	            val = { query_string: { query: val } };
	          }

	          state.body[key] = val;
	        }
	      }
	    };

	    return SearchSource;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(914);
	__webpack_require__(871);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function SearchReqProvider(Private) {
	    var _ = __webpack_require__(194);

	    var searchStrategy = Private(__webpack_require__(914));
	    var AbstractRequest = Private(__webpack_require__(871));

	    _['class'](SearchReq).inherits(AbstractRequest);
	    var Super = SearchReq.Super;
	    function SearchReq(source, defer) {
	      Super.call(this, source, defer);

	      this.type = 'search';
	      this.strategy = searchStrategy;
	    }

	    return SearchReq;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);
	__webpack_require__(915);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function FetchStrategyForSearch(Private, Promise, timefilter) {
	    var _ = __webpack_require__(194);
	    var angular = __webpack_require__(212);
	    var toJson = __webpack_require__(915).toJson;

	    return {
	      clientMethod: 'msearch',

	      /**
	       * Flatten a series of requests into as ES request body
	       *
	       * @param  {array} requests - the requests to serialize
	       * @return {Promise} - a promise that is fulfilled by the request body
	       */
	      reqsFetchParamsToBody: function reqsFetchParamsToBody(reqsFetchParams) {
	        return Promise.map(reqsFetchParams, function (fetchParams) {
	          return Promise.resolve(fetchParams.index).then(function (indexList) {
	            if (!_.isFunction(_.get(indexList, 'toIndexList'))) {
	              return indexList;
	            }

	            var timeBounds = timefilter.getBounds();
	            return indexList.toIndexList(timeBounds.min, timeBounds.max);
	          }).then(function (indexList) {
	            // If we've reached this point and there are no indexes in the
	            // index list at all, it means that we shouldn't expect any indexes
	            // to contain the documents we're looking for, so we instead
	            // perform a request for an index pattern that we know will always
	            // return an empty result (ie. -*). If instead we had gone ahead
	            // with an msearch without any index patterns, elasticsearch would
	            // handle that request by querying *all* indexes, which is the
	            // opposite of what we want in this case.
	            if (_.isArray(indexList) && indexList.length === 0) {
	              indexList.push('.kibana-devnull');
	            }
	            return angular.toJson({
	              index: indexList,
	              type: fetchParams.type,
	              search_type: fetchParams.search_type,
	              ignore_unavailable: true
	            }) + '\n' + toJson(fetchParams.body || {}, angular.toJson);
	          });
	        }).then(function (requests) {
	          return requests.join('\n') + '\n';
	        });
	      },

	      /**
	       * Fetch the multiple responses from the ES Response
	       * @param  {object} resp - The response sent from Elasticsearch
	       * @return {array} - the list of responses
	       */
	      getResponses: function getResponses(resp) {
	        return resp.responses;
	      }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.toJson = toJson;
	exports.replacer = replacer;

	var _lodash = __webpack_require__(194);

	/**
	 * Serializes the given object into a JSON string
	 *
	 * All properties that begin with $ throughout the entire object are omitted.
	 * If a custom JSON serializer function is passed, then the given object is
	 * passed through it before being re-stringified with the native stringify.
	 *
	 * The space argument is passed unaltered to the native stringify.
	 */

	function toJson(object, jsonFn, space) {
	  if (jsonFn) {
	    // We reparse the stringified json so that we can lean on JSON.stringify's
	    // avoiding-infinite-recursion capabilities when stripping out any
	    // remaining properties that begin with a dollar sign ($)
	    object = JSON.parse(jsonFn(object));
	  }
	  return JSON.stringify(object, replacer, space);
	}

	;

	/**
	 * Returns the given value if the key does not begin with a dollar sign ($)
	 */

	function replacer(key, value) {
	  return (0, _lodash.isString)(key) && (0, _lodash.startsWith)(key, '$') ? undefined : value;
	}

/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(913);
	__webpack_require__(917);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierSegmentedReqProvider(es, Private, Promise, Notifier, timefilter, config) {
	    var _ = __webpack_require__(194);
	    var isNumber = __webpack_require__(194).isNumber;
	    var SearchReq = Private(__webpack_require__(913));
	    var SegmentedHandle = Private(__webpack_require__(917));

	    var notify = new Notifier({
	      location: 'Segmented Fetch'
	    });

	    _['class'](SegmentedReq).inherits(SearchReq);
	    function SegmentedReq(source, defer, initFn) {
	      SearchReq.call(this, source, defer);

	      this.type = 'segmented';

	      // segmented request specific state
	      this._initFn = initFn;

	      this._desiredSize = null;
	      this._maxSegments = config.get('courier:maxSegmentCount');
	      this._direction = 'desc';
	      this._sortFn = null;
	      this._queueCreated = false;
	      this._handle = new SegmentedHandle(this);

	      this._hitWindow = null;

	      // prevent the source from changing between requests,
	      // all calls will return the same promise
	      this._getFlattenedSource = _.once(this._getFlattenedSource);
	    }

	    /*********
	     ** SearchReq overrides
	     *********/

	    SegmentedReq.prototype.start = function () {
	      var self = this;

	      SearchReq.prototype.start.call(this);

	      this._complete = [];
	      this._active = null;
	      this._segments = [];
	      this._all = [];
	      this._queue = [];

	      this._mergedResp = {
	        took: 0,
	        hits: {
	          hits: [],
	          total: 0,
	          max_score: 0
	        }
	      };

	      // give the request consumer a chance to receive each segment and set
	      // parameters via the handle
	      if (_.isFunction(this._initFn)) this._initFn(this._handle);
	      return this._createQueue().then(function (queue) {
	        if (self.stopped) return;

	        self._all = queue.slice(0);

	        // Send the initial fetch status
	        self._reportStatus();
	      });
	    };

	    SegmentedReq.prototype['continue'] = function () {
	      return this._reportStatus();
	    };

	    SegmentedReq.prototype.getFetchParams = function () {
	      var self = this;

	      return self._getFlattenedSource().then(function (flatSource) {
	        var params = _.cloneDeep(flatSource);

	        // calculate the number of indices to fetch in this request in order to prevent
	        // more than self._maxSegments requests. We use Math.max(1, n) to ensure that each request
	        // has at least one index pattern, and Math.floor() to make sure that if the
	        // number of indices does not round out evenly the extra index is tacked onto the last
	        // request, making sure the first request returns faster.
	        var remainingSegments = self._maxSegments - self._segments.length;
	        var indexCount = Math.max(1, Math.floor(self._queue.length / remainingSegments));

	        var indices = self._active = self._queue.splice(0, indexCount);
	        params.index = _.pluck(indices, 'index');

	        if (isNumber(self._desiredSize)) {
	          params.body.size = self._pickSizeForIndices(indices);
	        }

	        if (params.body.size === 0) params.search_type = 'count';

	        return params;
	      });
	    };

	    SegmentedReq.prototype.handleResponse = function (resp) {
	      return this._consumeSegment(resp);
	    };

	    SegmentedReq.prototype.filterError = function (resp) {
	      if (/ClusterBlockException.*index\sclosed/.test(resp.error)) {
	        this._consumeSegment(false);
	        return true;
	      }
	    };

	    SegmentedReq.prototype.isIncomplete = function () {
	      var queueNotCreated = !this._queueCreated;
	      var queueNotEmpty = this._queue.length > 0;
	      return queueNotCreated || queueNotEmpty;
	    };

	    SegmentedReq.prototype.clone = function () {
	      return new SegmentedReq(this.source, this.defer, this._initFn);
	    };

	    SegmentedReq.prototype.complete = function () {
	      this._reportStatus();
	      this._handle.emit('complete');
	      return SearchReq.prototype.complete.call(this);
	    };

	    /*********
	     ** SegmentedReq specific methods
	     *********/

	    /**
	     * Set the sort total number of segments to emit
	     *
	     * @param {number}
	     */
	    SegmentedReq.prototype.setMaxSegments = function (maxSegments) {
	      this._maxSegments = Math.max(_.parseInt(maxSegments), 1);
	    };

	    /**
	     * Set the sort direction for the request.
	     *
	     * @param {string} dir - one of 'asc' or 'desc'
	     */
	    SegmentedReq.prototype.setDirection = function (dir) {
	      switch (dir) {
	        case 'asc':
	        case 'desc':
	          return this._direction = dir;
	        default:
	          throw new TypeError('unknown sort direction "' + dir + '"');
	      }
	    };

	    /**
	     * Set the function that will be used to sort the rows
	     *
	     * @param {fn}
	     */
	    SegmentedReq.prototype.setSortFn = function (sortFn) {
	      this._sortFn = sortFn;
	    };

	    /**
	     * Set the sort total number of documents to
	     * emit
	     *
	     * Setting to false will not limit the documents,
	     * if a number is set the size of the request to es
	     * will be updated on each new request
	     *
	     * @param {number|false}
	     */
	    SegmentedReq.prototype.setSize = function (totalSize) {
	      this._desiredSize = _.parseInt(totalSize);
	      if (isNaN(this._desiredSize)) this._desiredSize = null;
	    };

	    SegmentedReq.prototype._createQueue = function () {
	      var self = this;
	      var timeBounds = timefilter.getBounds();
	      var indexPattern = self.source.get('index');
	      self._queueCreated = false;

	      return indexPattern.toDetailedIndexList(timeBounds.min, timeBounds.max, self._direction).then(function (queue) {
	        if (!_.isArray(queue)) queue = [queue];

	        self._queue = queue;
	        self._queueCreated = true;

	        return queue;
	      });
	    };

	    SegmentedReq.prototype._reportStatus = function () {
	      return this._handle.emit('status', {
	        total: this._queueCreated ? this._all.length : NaN,
	        complete: this._queueCreated ? this._complete.length : NaN,
	        remaining: this._queueCreated ? this._queue.length : NaN,
	        hitCount: this._queueCreated ? this._mergedResp.hits.hits.length : NaN
	      });
	    };

	    SegmentedReq.prototype._getFlattenedSource = function () {
	      return this.source._flatten();
	    };

	    SegmentedReq.prototype._consumeSegment = function (seg) {
	      var index = this._active;
	      this._complete.push(index);
	      if (!seg) return; // segment was ignored/filtered, don't store it

	      var hadHits = _.get(this._mergedResp, 'hits.hits.length') > 0;
	      var gotHits = _.get(seg, 'hits.hits.length') > 0;
	      var firstHits = !hadHits && gotHits;
	      var haveHits = hadHits || gotHits;

	      this._mergeSegment(seg);
	      this.resp = _.omit(this._mergedResp, '_bucketIndex');

	      if (firstHits) this._handle.emit('first', seg);
	      if (gotHits) this._handle.emit('segment', seg);
	      if (haveHits) this._handle.emit('mergedSegment', this.resp);
	    };

	    SegmentedReq.prototype._mergeHits = function (hits) {
	      var mergedHits = this._mergedResp.hits.hits;
	      var desiredSize = this._desiredSize;
	      var sortFn = this._sortFn;

	      _.pushAll(hits, mergedHits);

	      if (sortFn) {
	        notify.event('resort rows', function () {
	          mergedHits.sort(sortFn);
	        });
	      }

	      if (isNumber(desiredSize)) {
	        mergedHits = this._mergedResp.hits.hits = mergedHits.slice(0, desiredSize);
	      }
	    };

	    SegmentedReq.prototype._mergeSegment = notify.timed('merge response segment', function (seg) {
	      var merged = this._mergedResp;

	      this._segments.push(seg);

	      merged.took += seg.took;
	      merged.hits.total += seg.hits.total;
	      merged.hits.max_score = Math.max(merged.hits.max_score, seg.hits.max_score);

	      if (_.size(seg.hits.hits)) {
	        this._mergeHits(seg.hits.hits);
	        this._detectHitsWindow(merged.hits.hits);
	      }

	      if (!seg.aggregations) return;

	      _Object$keys(seg.aggregations).forEach(function (aggKey) {

	        if (!merged.aggregations) {
	          // start merging aggregations
	          merged.aggregations = {};
	          merged._bucketIndex = {};
	        }

	        if (!merged.aggregations[aggKey]) {
	          merged.aggregations[aggKey] = {
	            buckets: []
	          };
	        }

	        seg.aggregations[aggKey].buckets.forEach(function (bucket) {
	          var mbucket = merged._bucketIndex[bucket.key];
	          if (mbucket) {
	            mbucket.doc_count += bucket.doc_count;
	            return;
	          }

	          mbucket = merged._bucketIndex[bucket.key] = bucket;
	          merged.aggregations[aggKey].buckets.push(mbucket);
	        });
	      });
	    });

	    SegmentedReq.prototype._detectHitsWindow = function (hits) {
	      hits = hits || [];
	      var indexPattern = this.source.get('index');
	      var desiredSize = this._desiredSize;

	      var size = _.size(hits);
	      if (!isNumber(desiredSize) || size < desiredSize) {
	        this._hitWindow = {
	          size: size,
	          min: -Infinity,
	          max: Infinity
	        };
	        return;
	      }

	      var min = undefined;
	      var max = undefined;

	      hits.forEach(function (deepHit) {
	        var hit = indexPattern.flattenHit(deepHit);
	        var time = hit[indexPattern.timeFieldName];
	        if (min == null || time < min) min = time;
	        if (max == null || time > max) max = time;
	      });

	      this._hitWindow = { size: size, min: min, max: max };
	    };

	    SegmentedReq.prototype._pickSizeForIndices = function (indices) {
	      var hitWindow = this._hitWindow;
	      var desiredSize = this._desiredSize;

	      if (!isNumber(desiredSize)) return null;
	      // we don't have any hits yet, get us more info!
	      if (!hitWindow) return desiredSize;
	      // the order of documents isn't important, just get us more
	      if (!this._sortFn) return Math.max(desiredSize - hitWindow.size, 0);
	      // if all of the documents in every index fall outside of our current doc set, we can ignore them.
	      var someOverlap = indices.some(function (index) {
	        return index.min <= hitWindow.max && hitWindow.min <= index.max;
	      });

	      return someOverlap ? desiredSize : 0;
	    };

	    return SegmentedReq;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(251);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function CourierSegmentedReqHandle(Private) {
	    var _ = __webpack_require__(194);
	    var Events = Private(__webpack_require__(251));

	    /**
	     * Simple class for creating an object to send to the
	     * requester of a SegmentedRequest. Since the SegmentedRequest
	     * extends AbstractRequest, it wasn't able to be the event
	     * emitter it was born to be. This provides a channel for
	     * setting values on the segmented request, and an event
	     * emitter for the request to speak outwardly
	     *
	     * @param {SegmentedRequest} - req - the requst this handle relates to
	     */
	    _['class'](SegmentedHandle).inherits(Events);
	    function SegmentedHandle(req) {
	      SegmentedHandle.Super.call(this);

	      // export a couple methods from the request
	      this.setDirection = _.bindKey(req, 'setDirection');
	      this.setSize = _.bindKey(req, 'setSize');
	      this.setMaxSegments = _.bindKey(req, 'setMaxSegments');
	      this.setSortFn = _.bindKey(req, 'setSortFn');
	    }

	    return SegmentedHandle;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function normalizeSortRequest(config) {
	    var defaultSortOptions = config.get('sort:options');

	    /**
	     * Decorate queries with default parameters
	     * @param {query} query object
	     * @returns {object}
	     */
	    return function (sortObject, indexPattern) {
	      var normalizedSort = [];

	      // [].concat({}) -> [{}], [].concat([{}]) -> [{}]
	      return [].concat(sortObject).map(function (sortable) {
	        return normalize(sortable, indexPattern);
	      });
	    };

	    /*
	      Normalize the sort description to the more verbose format:
	      { someField: "desc" } into { someField: { "order": "desc"}}
	    */
	    function normalize(sortable, indexPattern) {
	      var normalized = {};
	      var sortField = _.keys(sortable)[0];
	      var sortValue = sortable[sortField];
	      var indexField = indexPattern.fields.byName[sortField];

	      if (indexField && indexField.scripted && indexField.sortable) {
	        var direction = undefined;
	        if (_.isString(sortValue)) direction = sortValue;
	        if (_.isObject(sortValue) && sortValue.order) direction = sortValue.order;

	        sortField = '_script';
	        sortValue = {
	          script: indexField.script,
	          type: indexField.type,
	          order: direction
	        };
	      } else {
	        if (_.isString(sortValue)) {
	          sortValue = { order: sortValue };
	        }
	        sortValue = _.defaults({}, sortValue, defaultSortOptions);
	      }

	      normalized[sortField] = sortValue;
	      return normalized;
	    }
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(912);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function RootSearchSource(Private, $rootScope, timefilter, Notifier) {
	    var SearchSource = Private(__webpack_require__(912));

	    var notify = new Notifier({ location: 'Root Search Source' });

	    var globalSource = new SearchSource();
	    globalSource.inherits(false); // this is the final source, it has no parents
	    globalSource.filter(function (globalSource) {
	      // dynamic time filter will be called in the _flatten phase of things
	      return timefilter.get(globalSource.get('index'));
	    });

	    var appSource = undefined; // set in setAppSource()
	    resetAppSource();

	    // when the route changes, clear the appSource
	    $rootScope.$on('$routeChangeStart', resetAppSource);

	    /**
	     * Get the current AppSource
	     * @return {Promise} - resolved with the current AppSource
	     */
	    function getAppSource() {
	      return appSource;
	    }

	    /**
	     * Set the current AppSource
	     * @param {SearchSource} source - The Source that represents the applications "root" search source object
	     */
	    function setAppSource(source) {
	      appSource = source;

	      // walk the parent chain until we get to the global source or nothing
	      // that's where we will attach to the globalSource
	      var literalRoot = source;
	      while (literalRoot._parent && literalRoot._parent !== globalSource) {
	        literalRoot = literalRoot._parent;
	      }

	      literalRoot.inherits(globalSource);
	    }

	    /**
	     * Sets the appSource to be a new, empty, SearchSource
	     * @return {undefined}
	     */
	    function resetAppSource() {
	      setAppSource(new SearchSource());
	    }

	    return {
	      get: getAppSource,
	      set: setAppSource,

	      getGlobalSource: function getGlobalSource() {
	        return globalSource;
	      }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(865);
	__webpack_require__(921);
	__webpack_require__(881);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function DocLooperService(Private) {
	    var fetch = Private(__webpack_require__(865));
	    var Looper = Private(__webpack_require__(921));
	    var docStrategy = Private(__webpack_require__(881));

	    /**
	     * The Looper which will manage the doc fetch interval
	     * @type {Looper}
	     */
	    var docLooper = new Looper(1500, function () {
	      fetch.fetchQueued(docStrategy);
	    });

	    return docLooper;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 921 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function LooperFactory($timeout, Notifier, Promise) {
	    var _ = __webpack_require__(194);
	    var notify = new Notifier();

	    function Looper(ms, fn) {
	      this._fn = fn;
	      this._ms = ms === void 0 ? 1500 : ms;
	      this._timer = null;
	      this._started = false;

	      this._loopTheLoop = _.bind(this._loopTheLoop, this);
	    }

	    /**
	     * Set the number of milliseconds between
	     * each loop
	     *
	     * @param  {integer} ms
	     * @chainable
	     */
	    Looper.prototype.ms = function (ms) {
	      this._ms = _.parseInt(ms) || 0;

	      if (!this._started) return;

	      if (this._ms) {
	        this.start(false);
	      } else {
	        this._unScheduleLoop();
	      }

	      return this;
	    };

	    /**
	     * Cancels the current looper while keeping internal
	     * state as started
	     *
	     * @chainable
	     */
	    Looper.prototype.pause = function () {
	      this._unScheduleLoop();
	      return this;
	    };

	    /**
	     * Start the looping madness
	     *
	     * @chainable
	     */
	    Looper.prototype.start = function (loopOver) {
	      if (loopOver == null) loopOver = true;

	      if (!this._started) {
	        this._started = true;
	      } else {
	        this._unScheduleLoop();
	      }

	      if (loopOver) {
	        this._loopTheLoop();
	      } else {
	        this._scheduleLoop();
	      }

	      return this;
	    };

	    /**
	     * ...
	     *
	     * @chainable
	     */
	    Looper.prototype.stop = function () {
	      this._unScheduleLoop();
	      this._started = false;
	      return this;
	    };

	    /**
	     * Restart the looper only if it is already started.
	     * Called automatically when ms is changed
	     *
	     * @chainable
	     */
	    Looper.prototype.restart = function () {
	      this.start(false);
	      return this;
	    };

	    /**
	     * Is the looper currently started/running/scheduled/going to execute
	     *
	     * @return {boolean}
	     */
	    Looper.prototype.started = function () {
	      return !!this._started;
	    };

	    /**
	     * Returns the current loop interval
	     *
	     * @return {number}
	     */
	    Looper.prototype.loopInterval = function () {
	      return this._ms;
	    };

	    /**
	     * Called when the loop is executed before the previous
	     * run has completed.
	     *
	     * @override
	     * @return {undefined}
	     */
	    Looper.prototype.onHastyLoop = function () {
	      // override this in subclasses
	    };

	    /**
	     * Wraps this._fn so that this._fn can be changed
	     * without rescheduling and schedules
	     * the next itteration
	     *
	     * @private
	     * @return {undefined}
	     */
	    Looper.prototype._loopTheLoop = function () {
	      var self = this;

	      if (self.active) {
	        self.onHastyLoop();
	        return;
	      }

	      self.active = Promise['try'](this._fn).then(function () {
	        self._scheduleLoop();
	      })['catch'](function (err) {
	        self.stop();
	        notify.fatal(err);
	      })['finally'](function () {
	        self.active = null;
	      });
	    };

	    /**
	     * Schedule the next itteration of the loop
	     *
	     * @private
	     * @return {number} - the timer promise
	     */
	    Looper.prototype._scheduleLoop = function () {
	      this._unScheduleLoop();
	      this._timer = this._ms ? $timeout(this._loopTheLoop, this._ms) : null;
	      return this._timer;
	    };

	    /**
	     * Cancel the next itteration of the loop
	     *
	     * @private
	     * @return {number} - the timer promise
	     */
	    Looper.prototype._unScheduleLoop = function () {
	      if (this._timer) {
	        $timeout.cancel(this._timer);
	        this._timer = null;
	      }
	    };

	    /**
	     * execute the this._fn, and restart the timer
	     */
	    Looper.prototype.run = function () {
	      this.start();
	    };

	    return Looper;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(865);
	__webpack_require__(914);
	__webpack_require__(864);
	__webpack_require__(921);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function SearchLooperService(Private, Promise, Notifier, $rootScope) {
	    var fetch = Private(__webpack_require__(865));
	    var searchStrategy = Private(__webpack_require__(914));
	    var requestQueue = Private(__webpack_require__(864));

	    var Looper = Private(__webpack_require__(921));
	    var notif = new Notifier({ location: 'Search Looper' });

	    /**
	     * The Looper which will manage the doc fetch interval
	     * @type {Looper}
	     */
	    var searchLooper = new Looper(null, function () {
	      $rootScope.$broadcast('courier:searchRefresh');
	      return fetch.these(requestQueue.getInactive(searchStrategy));
	    });

	    searchLooper.onHastyLoop = function () {
	      if (searchLooper.afterHastyQueued) return;

	      searchLooper.afterHastyQueued = Promise.resolve(searchLooper.active).then(function () {
	        return searchLooper._loopTheLoop();
	      })['finally'](function () {
	        searchLooper.afterHastyQueued = null;
	      });
	    };

	    return searchLooper;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(212);
	__webpack_require__(236);
	__webpack_require__(194);
	__webpack_require__(924);
	__webpack_require__(862);
	__webpack_require__(912);
	__webpack_require__(898);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function SavedObjectFactory(es, kbnIndex, Promise, Private, Notifier, safeConfirm, indexPatterns) {
	    var angular = __webpack_require__(212);
	    var errors = __webpack_require__(236);
	    var _ = __webpack_require__(194);
	    var slugifyId = __webpack_require__(924);

	    var DocSource = Private(__webpack_require__(862));
	    var SearchSource = Private(__webpack_require__(912));
	    var mappingSetup = Private(__webpack_require__(898));

	    function SavedObject(config) {
	      if (!_.isObject(config)) config = {};

	      // save an easy reference to this
	      var self = this;

	      /************
	       * Initialize config vars
	       ************/
	      // the doc which is used to store this object
	      var docSource = new DocSource();

	      // type name for this object, used as the ES-type
	      var type = config.type;

	      // Create a notifier for sending alerts
	      var notify = new Notifier({
	        location: 'Saved ' + type
	      });

	      // mapping definition for the fields that this object will expose
	      var mapping = mappingSetup.expandShorthand(config.mapping);

	      // default field values, assigned when the source is loaded
	      var defaults = config.defaults || {};

	      var afterESResp = config.afterESResp || _.noop;
	      var customInit = config.init || _.noop;

	      // optional search source which this object configures
	      self.searchSource = config.searchSource && new SearchSource();

	      // the id of the document
	      self.id = config.id || void 0;
	      self.defaults = config.defaults;

	      /**
	       * Asynchronously initialize this object - will only run
	       * once even if called multiple times.
	       *
	       * @return {Promise}
	       * @resolved {SavedObject}
	       */
	      self.init = _.once(function () {
	        // ensure that the type is defined
	        if (!type) throw new Error('You must define a type name to use SavedObject objects.');

	        // tell the docSource where to find the doc
	        docSource.index(kbnIndex).type(type).id(self.id);

	        // check that the mapping for this type is defined
	        return mappingSetup.isDefined(type).then(function (defined) {
	          // if it is already defined skip this step
	          if (defined) return true;

	          mapping.kibanaSavedObjectMeta = {
	            properties: {
	              // setup the searchSource mapping, even if it is not used but this type yet
	              searchSourceJSON: {
	                type: 'string'
	              }
	            }
	          };

	          // tell mappingSetup to set type
	          return mappingSetup.setup(type, mapping);
	        }).then(function () {
	          // If there is not id, then there is no document to fetch from elasticsearch
	          if (!self.id) {
	            // just assign the defaults and be done
	            _.assign(self, defaults);
	            return hydrateIndexPattern().then(function () {
	              return afterESResp.call(self);
	            });
	          }

	          // fetch the object from ES
	          return docSource.fetch().then(self.applyESResp);
	        }).then(function () {
	          return customInit.call(self);
	        }).then(function () {
	          // return our obj as the result of init()
	          return self;
	        });
	      });

	      self.applyESResp = function (resp) {
	        self._source = _.cloneDeep(resp._source);

	        if (resp.found != null && !resp.found) throw new errors.SavedObjectNotFound(type, self.id);

	        var meta = resp._source.kibanaSavedObjectMeta || {};
	        delete resp._source.kibanaSavedObjectMeta;

	        if (!config.indexPattern && self._source.indexPattern) {
	          config.indexPattern = self._source.indexPattern;
	          delete self._source.indexPattern;
	        }

	        // assign the defaults to the response
	        _.defaults(self._source, defaults);

	        // transform the source using _deserializers
	        _.forOwn(mapping, function ittr(fieldMapping, fieldName) {
	          if (fieldMapping._deserialize) {
	            self._source[fieldName] = fieldMapping._deserialize(self._source[fieldName], resp, fieldName, fieldMapping);
	          }
	        });

	        // Give obj all of the values in _source.fields
	        _.assign(self, self._source);

	        return Promise['try'](function () {
	          parseSearchSource(meta.searchSourceJSON);
	        }).then(hydrateIndexPattern).then(function () {
	          return Promise.cast(afterESResp.call(self, resp));
	        }).then(function () {
	          // Any time obj is updated, re-call applyESResp
	          docSource.onUpdate().then(self.applyESResp, notify.fatal);
	        });
	      };

	      function parseSearchSource(searchSourceJson) {
	        if (!self.searchSource) return;

	        // if we have a searchSource, set its state based on the searchSourceJSON field
	        var state = undefined;
	        try {
	          state = JSON.parse(searchSourceJson);
	        } catch (e) {
	          state = {};
	        }

	        var oldState = self.searchSource.toJSON();
	        var fnProps = _.transform(oldState, function (dynamic, val, name) {
	          if (_.isFunction(val)) dynamic[name] = val;
	        }, {});

	        self.searchSource.set(_.defaults(state, fnProps));
	      }

	      /**
	       * After creation or fetching from ES, ensure that the searchSources index indexPattern
	       * is an bonafide IndexPattern object.
	       *
	       * @return {[type]} [description]
	       */
	      function hydrateIndexPattern() {
	        return Promise['try'](function () {
	          if (self.searchSource) {

	            var index = config.indexPattern || self.searchSource.getOwn('index');
	            if (!index) return;
	            if (config.clearSavedIndexPattern) {
	              self.searchSource.set('index', undefined);
	              return;
	            }

	            if (!(index instanceof indexPatterns.IndexPattern)) {
	              index = indexPatterns.get(index);
	            }

	            return Promise.resolve(index).then(function (indexPattern) {
	              self.searchSource.set('index', indexPattern);
	            });
	          }
	        });
	      }

	      /**
	       * Serialize this object
	       *
	       * @return {Object}
	       */
	      self.serialize = function () {
	        var body = {};

	        _.forOwn(mapping, function (fieldMapping, fieldName) {
	          if (self[fieldName] != null) {
	            body[fieldName] = fieldMapping._serialize ? fieldMapping._serialize(self[fieldName]) : self[fieldName];
	          }
	        });

	        if (self.searchSource) {
	          body.kibanaSavedObjectMeta = {
	            searchSourceJSON: angular.toJson(_.omit(self.searchSource.toJSON(), ['sort', 'size']))
	          };
	        }

	        return body;
	      };

	      /**
	       * Save this object
	       *
	       * @return {Promise}
	       * @resolved {String} - The id of the doc
	       */
	      self.save = function () {

	        var body = self.serialize();

	        // Slugify the object id
	        self.id = slugifyId(self.id);

	        // ensure that the docSource has the current self.id
	        docSource.id(self.id);

	        // index the document
	        return self.saveSource(body);
	      };

	      self.saveSource = function (source) {
	        var finish = function finish(id) {
	          self.id = id;
	          return es.indices.refresh({
	            index: kbnIndex
	          }).then(function () {
	            return self.id;
	          });
	        };

	        return docSource.doCreate(source).then(finish)['catch'](function (err) {
	          // record exists, confirm overwriting
	          if (_.get(err, 'origError.status') === 409) {
	            var confirmMessage = 'Are you sure you want to overwrite ' + self.title + '?';

	            return safeConfirm(confirmMessage).then(function () {
	              return docSource.doIndex(source).then(finish);
	            }, _.noop // if the user doesn't overwrite record, just swallow the error
	            );
	          }
	          return Promise.reject(err);
	        });
	      };

	      /**
	       * Destroy this object
	       *
	       * @return {undefined}
	       */
	      self.destroy = function () {
	        docSource.cancelQueued();
	        if (self.searchSource) {
	          self.searchSource.cancelQueued();
	        }
	      };

	      /**
	       * Delete this object from Elasticsearch
	       * @return {promise}
	       */
	      self['delete'] = function () {
	        return es['delete']({
	          index: kbnIndex,
	          type: type,
	          id: this.id
	        }).then(function () {
	          return es.indices.refresh({
	            index: kbnIndex
	          });
	        });
	      };
	    }

	    return SavedObject;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function (id) {
	    if (id == null) return;

	    var trans = {
	      '/': '-slash-',
	      '\\?': '-questionmark-',
	      '\\&': '-ampersand-',
	      '=': '-equal-'
	    };
	    _.each(trans, function (val, key) {
	      var regex = new RegExp(key, 'g');
	      id = id.replace(regex, val);
	    });
	    id = id.replace(/[\s]+/g, '-');
	    id = id.replace(/[\-]+/g, '-');
	    return id;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(236);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var errors = __webpack_require__(236);

	  return function RedirectWhenMissingFn($location, kbnUrl, Notifier, Promise) {
	    var SavedObjectNotFound = errors.SavedObjectNotFound;

	    var notify = new Notifier();

	    /**
	     * Creates an error handler that will redirect to a url when a SavedObjectNotFound
	     * error is thrown
	     *
	     * @param  {string|object} mapping - a mapping of url's to redirect to based on the saved object that
	     *                                 couldn't be found, or just a string that will be used for all types
	     * @return {function} - the handler to pass to .catch()
	     */
	    return function (mapping) {
	      if (typeof mapping === 'string') {
	        mapping = { '*': mapping };
	      }

	      return function (err) {
	        // if this error is not "404", rethrow
	        if (!(err instanceof SavedObjectNotFound)) throw err;

	        var url = mapping[err.savedObjectType] || mapping['*'];
	        if (!url) url = '/';

	        url += (url.indexOf('?') >= 0 ? '&' : '?') + ('notFound=' + err.savedObjectType);

	        notify.error(err);
	        kbnUrl.redirect(url);
	        return Promise.halt();
	      };
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	// Debounce service, angularized version of lodash debounce
	// borrowed heavily from https://github.com/shahata/angular-debounce

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var module = __webpack_require__(215).get('kibana');

	  module.service('debounce', ['$timeout', function ($timeout) {
	    return function (func, wait, options) {
	      var timeout = undefined;
	      var args = undefined;
	      var self = undefined;
	      var result = undefined;
	      options = _.defaults(options || {}, {
	        leading: false,
	        trailing: true
	      });

	      function debounce() {
	        self = this;
	        args = arguments;

	        var later = function later() {
	          timeout = null;
	          if (!options.leading || options.trailing) {
	            result = func.apply(self, args);
	          }
	        };

	        var callNow = options.leading && !timeout;

	        if (timeout) {
	          $timeout.cancel(timeout);
	        }
	        timeout = $timeout(later, wait);

	        if (callNow) {
	          result = func.apply(self, args);
	        }

	        return result;
	      }

	      debounce.cancel = function () {
	        $timeout.cancel(timeout);
	        timeout = null;
	      };

	      return debounce;
	    };
	  }]);
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 927 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(1);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var chrome = __webpack_require__(1);

	  __webpack_require__(215).get('kibana').run(function ($rootScope, docTitle) {
	    // always bind to the route events
	    $rootScope.$on('$routeChangeStart', docTitle.reset);
	    $rootScope.$on('$routeChangeError', docTitle.update);
	    $rootScope.$on('$routeChangeSuccess', docTitle.update);
	    $rootScope.$watch(_.bindKey(chrome, 'getActiveTabTitle'), docTitle.update);
	  }).service('docTitle', function ($rootScope) {
	    var baseTitle = document.title;
	    var self = this;

	    var lastChange = undefined;

	    function render() {
	      lastChange = lastChange || [];

	      var parts = [lastChange[0]];
	      var activeTabTitle = chrome.getActiveTabTitle();

	      if (activeTabTitle) parts.push(activeTabTitle);

	      if (!lastChange[1]) parts.push(baseTitle);

	      return _(parts).flattenDeep().compact().join(' - ');
	    }

	    self.change = function (title, complete) {
	      lastChange = [title, complete];
	      self.update();
	    };

	    self.reset = function () {
	      lastChange = null;
	    };

	    self.update = function () {
	      document.title = render();
	    };
	  });

	  // return a "private module" so that it can be used both ways
	  return function DoctitleProvider(docTitle) {
	    return docTitle;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 928 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var NL_RE = /\n/g;
	  var events = 'keydown keypress keyup change';

	  __webpack_require__(215).get('kibana').directive('elasticTextarea', function () {
	    return {
	      restrict: 'A',
	      link: function link($scope, $el) {

	        function resize() {
	          $el.attr('rows', _.size($el.val().match(NL_RE)) + 1);
	        }

	        $el.on(events, resize);
	        $scope.$evalAsync(resize);
	        $scope.$on('$destroy', function () {
	          $el.off(events, resize);
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 929 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(208);
	__webpack_require__(930);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var $ = __webpack_require__(208);

	  var KbnFormController = __webpack_require__(930);

	  __webpack_require__(215).get('kibana').config(function ($provide) {
	    function decorateDirectiveController(DecorativeController) {
	      return function ($delegate, $injector) {
	        // directive providers are arrays
	        $delegate.forEach(function (directive) {
	          // get metadata about all init fns
	          var chain = [directive.controller, DecorativeController].map(function (fn) {
	            var deps = $injector.annotate(fn);
	            return { deps: deps, fn: _.isArray(fn) ? _.last(fn) : fn };
	          });

	          // replace the controller with one that will setup the actual controller
	          directive.controller = function stub() {
	            var allDeps = _.toArray(arguments);
	            return chain.reduce(function (controller, link, i) {
	              var deps = allDeps.splice(0, link.deps.length);
	              return link.fn.apply(controller, deps) || controller;
	            }, this);
	          };

	          // set the deps of our new controller to be the merged deps of every fn
	          directive.controller.$inject = chain.reduce(function (deps, link) {
	            return deps.concat(link.deps);
	          }, []);
	        });

	        return $delegate;
	      };
	    }

	    $provide.decorator('formDirective', decorateDirectiveController(KbnFormController));
	    $provide.decorator('ngFormDirective', decorateDirectiveController(KbnFormController));
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 930 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  /**
	   * Extension of Angular's FormController class
	   * that provides helpers for error handling/validation.
	   *
	   * @param {$scope} $scope
	   */
	  function KbnFormController($scope, $element) {
	    var self = this;

	    self.errorCount = function (predicate) {
	      return self.$$invalidModels().length;
	    };

	    // same as error count, but filters out untouched and pristine models
	    self.softErrorCount = function () {
	      return self.$$invalidModels(function (model) {
	        return model.$touched || model.$dirty;
	      }).length;
	    };

	    self.describeErrors = function () {
	      var count = self.softErrorCount();
	      return count + ' Error' + (count === 1 ? '' : 's');
	    };

	    self.$$invalidModels = function (predicate) {
	      predicate = _.callback(predicate);

	      var invalid = [];

	      _.forOwn(self.$error, function collect(models) {
	        if (!models) return;

	        models.forEach(function (model) {
	          if (model.$$invalidModels) {
	            // recurse into child form
	            _.forOwn(model.$error, collect);
	          } else {
	            if (predicate(model)) {
	              // prevent dups
	              var len = invalid.length;
	              while (len--) if (invalid[len] === model) return;

	              invalid.push(model);
	            }
	          }
	        });
	      });

	      return invalid;
	    };

	    self.$setTouched = function () {
	      self.$$invalidModels().forEach(function (model) {
	        // only kbnModels have $setTouched
	        if (model.$setTouched) model.$setTouched();
	      });
	    };

	    function filterSubmits(event) {
	      if (self.errorCount()) {
	        event.preventDefault();
	        event.stopImmediatePropagation();
	        self.$setTouched();
	      }
	    }

	    $element.on('submit', filterSubmits);
	    $scope.$on('$destroy', function () {
	      $element.off('submit', filterSubmits);
	    });
	  }

	  return KbnFormController;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(932);
	__webpack_require__(243);
	__webpack_require__(212);
	__webpack_require__(793);
	__webpack_require__(933);
	__webpack_require__(945);
	__webpack_require__(946);
	__webpack_require__(947);
	__webpack_require__(948);
	__webpack_require__(949);
	__webpack_require__(950);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var module = __webpack_require__(215).get('kibana');
	  var template = __webpack_require__(932);
	  var moment = __webpack_require__(243);
	  var angular = __webpack_require__(212);

	  __webpack_require__(793);

	  module.directive('filterBar', function (Private, Promise, getAppState) {
	    var mapAndFlattenFilters = Private(__webpack_require__(933));
	    var mapFlattenAndWrapFilters = Private(__webpack_require__(945));
	    var extractTimeFilter = Private(__webpack_require__(946));
	    var filterOutTimeBasedFilter = Private(__webpack_require__(947));
	    var filterAppliedAndUnwrap = __webpack_require__(948);
	    var changeTimeFilter = Private(__webpack_require__(949));
	    var queryFilter = Private(__webpack_require__(950));
	    var privateFilterFieldRegex = /(^\$|meta)/;

	    return {
	      restrict: 'E',
	      template: template,
	      scope: {},
	      link: function link($scope, $el, attrs) {
	        // bind query filter actions to the scope
	        ['addFilters', 'toggleFilter', 'toggleAll', 'pinFilter', 'pinAll', 'invertFilter', 'invertAll', 'removeFilter', 'removeAll', 'updateFilter'].forEach(function (method) {
	          $scope[method] = queryFilter[method];
	        });

	        $scope.state = getAppState();

	        $scope.aceLoaded = function (editor) {
	          editor.$blockScrolling = Infinity;
	          var session = editor.getSession();
	          session.setTabSize(2);
	          session.setUseSoftTabs(true);
	        };

	        $scope.applyFilters = function (filters) {
	          // add new filters
	          $scope.addFilters(filterAppliedAndUnwrap(filters));
	          $scope.newFilters = [];

	          // change time filter
	          if ($scope.changeTimeFilter && $scope.changeTimeFilter.meta && $scope.changeTimeFilter.meta.apply) {
	            changeTimeFilter($scope.changeTimeFilter);
	          }
	        };

	        $scope.startEditingFilter = function (source) {
	          return $scope.editingFilter = {
	            source: source,
	            type: _.findKey(source, function (val, key) {
	              return !key.match(privateFilterFieldRegex);
	            }),
	            model: convertToEditableFilter(source),
	            alias: source.meta.alias
	          };
	        };

	        $scope.stopEditingFilter = function () {
	          $scope.editingFilter = null;
	        };

	        $scope.editDone = function () {
	          $scope.updateFilter($scope.editingFilter);
	          $scope.stopEditingFilter();
	        };

	        $scope.clearFilterBar = function () {
	          $scope.newFilters = [];
	          $scope.changeTimeFilter = null;
	        };

	        // update the scope filter list on filter changes
	        $scope.$listen(queryFilter, 'update', function () {
	          $scope.stopEditingFilter();
	          updateFilters();
	        });

	        // when appState changes, update scope's state
	        $scope.$watch(getAppState, function (appState) {
	          $scope.state = appState;
	        });

	        $scope.$watch('state.$newFilters', function (filters) {
	          if (!filters) return;

	          // If filters is not undefined and the length is greater than
	          // one we need to set the newFilters attribute and allow the
	          // users to decide what they want to apply.
	          if (filters.length > 1) {
	            return mapFlattenAndWrapFilters(filters).then(function (results) {
	              extractTimeFilter(results).then(function (filter) {
	                $scope.changeTimeFilter = filter;
	              });
	              return results;
	            }).then(filterOutTimeBasedFilter).then(function (results) {
	              $scope.newFilters = results;
	            });
	          }

	          // Just add single filters to the state.
	          if (filters.length === 1) {
	            Promise.resolve(filters).then(function (filters) {
	              extractTimeFilter(filters).then(function (timeFilter) {
	                if (timeFilter) changeTimeFilter(timeFilter);
	              });
	              return filters;
	            }).then(filterOutTimeBasedFilter).then($scope.addFilters);
	          }
	        });

	        function convertToEditableFilter(filter) {
	          return _.omit(_.cloneDeep(filter), function (val, key) {
	            return key.match(privateFilterFieldRegex);
	          });
	        }

	        function updateFilters() {
	          var filters = queryFilter.getFilters();
	          mapAndFlattenFilters(filters).then(function (results) {
	            // used to display the current filters in the state
	            $scope.filters = _.sortBy(results, function (filter) {
	              return !filter.meta.pinned;
	            });
	            $scope.$emit('filterbar:updated');
	          });
	        }

	        updateFilters();
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 932 */
/***/ function(module, exports) {

	module.exports = "<div class=\"confirm\" ng-show=\"newFilters.length\">\r\n  <form ng-submit=\"applyFilters(newFilters)\">\r\n  <ul class=\"list-unstyled\">\r\n    <li>Apply these filters?</li>\r\n    <li ng-repeat=\"filter in newFilters\" class=\"filter\" ng-click=\"filter.meta.apply = !filter.meta.apply\"><input type=\"checkbox\" ng-checked=\"filter.meta.apply\"/> {{ filter.meta.key }}: {{ filter.meta.value }}</li>\r\n    <li ng-if=\"changeTimeFilter\" class=\"changeTimeFilter filter\" ng-click=\"changeTimeFilter.meta.apply = !changeTimeFilter.meta.apply\"><input type=\"checkbox\" ng-checked=\"changeTimeFilter.meta.apply\"/> <strong>Change time to:</strong> {{changeTimeFilter.meta.value}} </li>\r\n    <li><button class=\"btn btn-xs btn-primary\">Apply Now</button> or <a ng-click=\"clearFilterBar();\">Cancel</a></li>\r\n  </ul>\r\n  </form>\r\n</div>\r\n\r\n<div class=\"bar\" ng-show=\"filters.length\">\r\n  <div class=\"filter\" ng-class=\"{ negate: filter.meta.negate, disabled: filter.meta.disabled }\" ng-repeat=\"filter in filters\">\r\n    <div class=\"filter-description\">\r\n      <span ng-if=\"filter.$state.store == 'globalState'\"><i class=\"fa fa-fw fa-thumb-tack pinned\"></i></span>\r\n      <span ng-if=\"filter.meta.alias\">{{ filter.meta.alias }}</span>\r\n      <span ng-if=\"!filter.meta.alias\">{{ filter.meta.key }}:</span>\r\n      <span ng-if=\"!filter.meta.alias\">\"{{ filter.meta.value }}\"</span>\r\n    </div>\r\n    <div class=\"filter-actions\">\r\n      <a class=\"action filter-toggle\" ng-click=\"toggleFilter(filter)\">\r\n        <i ng-show=\"filter.meta.disabled\" class=\"fa fa-fw fa-square-o disabled\"></i>\r\n        <i ng-hide=\"filter.meta.disabled\" class=\"fa fa-fw fa-check-square-o enabled\"></i>\r\n      </a>\r\n      <a class=\"action filter-pin\" ng-click=\"pinFilter(filter)\">\r\n        <i ng-show=\"filter.$state.store == 'globalState'\" class=\"fa fa-fw fa-thumb-tack pinned\"></i>\r\n        <i ng-hide=\"filter.$state.store == 'globalState'\" class=\"fa fa-fw fa-thumb-tack fa-rotate-270 unpinned\"></i>\r\n      </a>\r\n      <a class=\"action filter-invert\" ng-click=\"invertFilter(filter)\">\r\n        <i ng-show=\"filter.meta.negate\" class=\"fa fa-fw fa-search-plus negative\"></i>\r\n        <i ng-hide=\"filter.meta.negate\" class=\"fa fa-fw fa-search-minus positive\"></i>\r\n      </a>\r\n      <a class=\"action filter-remove\" ng-click=\"removeFilter(filter)\">\r\n        <i class=\"fa fa-fw fa-trash\"></i>\r\n      </a>\r\n      <a class=\"action filter-edit\" ng-click=\"startEditingFilter(filter)\">\r\n        <i class=\"fa fa-fw fa-edit\"></i>\r\n      </a>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"filter-edit-container\" ng-if=\"editingFilter\">\r\n    <form role=\"form\" name=\"editFilterForm\" ng-submit=\"editDone()\">\r\n      <div class=\"form-group filter-edit-alias\">\r\n        <label>Filter Alias\r\n          <small>(optional)</small>\r\n        </label>\r\n        <input\r\n          ng-model=\"editingFilter.alias\"\r\n          type=\"text\"\r\n          class=\"form-control\">\r\n      </div>\r\n      <div\r\n        json-input\r\n        require-keys=\"true\"\r\n        ui-ace=\"{\r\n          mode: 'json',\r\n          onLoad: aceLoaded\r\n        }\"\r\n        ng-model=\"editingFilter.model\"></div>\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary\" ng-click=\"stopEditingFilter()\">Cancel</button>\r\n        <button type=\"submit\" class=\"btn btn-success\"\r\n          ng-disabled=\"editFilterForm.$invalid\"\r\n          >Done</button>\r\n        <small ng-show=\"editFilterForm.$invalid\">Could not parse JSON input</small>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"filter-link\">\r\n    <div class=\"filter-description small\">\r\n      <a ng-click=\"showFilterActions = !showFilterActions\">\r\n        Actions\r\n        <i class=\"fa\"\r\n        ng-class=\"{'fa-caret-down': showFilterActions, 'fa-caret-right': !showFilterActions}\"></i>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"bar bar-condensed\" ng-show=\"filters.length && showFilterActions\">\r\n  <div class=\"filter-actions-all\">\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><strong>All filters:</strong></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"toggleAll(false)\">Enable</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"toggleAll(true)\">Disable</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"pinAll(true)\">Pin</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"pinAll(false)\">Unpin</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"invertAll()\">Invert</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"toggleAll()\">Toggle</a></div>\r\n    </div>\r\n    <div class=\"filter-link\">\r\n      <div class=\"filter-description\"><a ng-click=\"removeAll()\">Remove</a></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(934);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function mapAndFlattenFiltersProvider(Private, Promise) {
	    var mapFilter = Private(__webpack_require__(934));
	    return function (filters) {
	      return _(filters).flatten().compact().map(mapFilter).thru(Promise.all).value();
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(935);
	__webpack_require__(936);
	__webpack_require__(937);
	__webpack_require__(938);
	__webpack_require__(939);
	__webpack_require__(940);
	__webpack_require__(941);
	__webpack_require__(942);
	__webpack_require__(943);
	__webpack_require__(944);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function mapFilterProvider(Promise, Private) {

	    var generateMappingChain = Private(__webpack_require__(935));

	    /** Mappers **/

	    // Each mapper is a simple promise function that test if the mapper can
	    // handle the mapping or not. If it handles it then it will resolve with
	    // and object that has the key and value for the filter. Otherwise it will
	    // reject it with the original filter. We had to go down the promise interface
	    // because mapTerms and mapRange need access to the indexPatterns to format
	    // the values and that's only available through the field formatters.

	    // The mappers to apply. Each mapper will either return
	    // a result object with a key and value attribute or
	    // undefined. If undefined is return then the next
	    // mapper will get the opportunity to map the filter.
	    // To create a new mapper you just need to create a function
	    // that either handles the mapping operation or not
	    // and add it here. ProTip: These are executed in order listed
	    var mappers = [Private(__webpack_require__(936)), Private(__webpack_require__(937)), Private(__webpack_require__(938)), Private(__webpack_require__(939)), Private(__webpack_require__(940)), Private(__webpack_require__(941)), Private(__webpack_require__(942)), Private(__webpack_require__(943)), Private(__webpack_require__(944))];

	    var noop = function noop() {
	      return Promise.reject(new Error('No mappings have been found for filter.'));
	    };

	    // Create a chain of responsibility by reducing all the
	    // mappers down into one function.
	    var mapFn = _.reduceRight(mappers, function (memo, map) {
	      var filterChainFn = generateMappingChain(map);
	      return filterChainFn(memo);
	    }, noop);

	    /**
	     * Map the filter into an object with the key and value exposed so it's
	     * easier to work with in the template
	     * @param {object} fitler The filter the map
	     * @returns {Promise}
	     */
	    return function (filter) {
	      // Apply the mapping function
	      return mapFn(filter).then(function (result) {
	        filter.meta = filter.meta || {};
	        filter.meta.key = result.key;
	        filter.meta.value = result.value;
	        filter.meta.disabled = !!filter.meta.disabled;
	        filter.meta.negate = !!filter.meta.negate;
	        filter.meta.alias = filter.meta.alias || null;
	        return filter;
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function generateMappingChainProvider(Promise) {

	    var noop = function noop() {
	      return Promise.reject(new Error('No mappings have been found for filter.'));
	    };

	    return function (fn) {
	      return function (next) {
	        next = next || noop;
	        return function (filter) {
	          return fn(filter)['catch'](function (result) {
	            if (result === filter) {
	              return next(filter);
	            }
	            return Promise.reject(result);
	          });
	        };
	      };
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 936 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function mapMatchAllProvider(Promise) {
	    return function (filter) {
	      if (filter.match_all) {
	        var key = filter.meta.field;
	        var value = filter.meta.formattedValue || 'all';
	        return Promise.resolve({ key: key, value: value });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 937 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function mapTermsProvider(Promise, courier) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      var field = undefined;
	      if (filter.query && filter.query.match) {
	        return courier.indexPatterns.get(filter.meta.index).then(function (indexPattern) {
	          key = _.keys(filter.query.match)[0];
	          field = indexPattern.fields.byName[key];
	          value = filter.query.match[key].query;
	          value = field.format.convert(value);
	          return { key: key, value: value };
	        });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 938 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _require = __webpack_require__(194);

	  var has = _require.has;

	  return function mapRangeProvider(Promise, courier) {
	    return function (filter) {
	      if (!filter.range) return Promise.reject(filter);

	      return courier.indexPatterns.get(filter.meta.index).then(function (indexPattern) {
	        var key = _Object$keys(filter.range)[0];
	        var convert = indexPattern.fields.byName[key].format.getConverterFor('text');
	        var range = filter.range[key];

	        var left = has(range, 'gte') ? range.gte : range.gt;
	        if (left == null) left = -Infinity;

	        var right = has(range, 'lte') ? range.lte : range.lt;
	        if (right == null) right = Infinity;

	        return {
	          key: key,
	          value: convert(left) + ' to ' + convert(right)
	        };
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 939 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function mapExistsProvider(Promise) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      if (filter.exists) {
	        key = 'exists';
	        value = filter.exists.field;
	        return Promise.resolve({ key: key, value: value });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 940 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function mapMissingProvider(Promise) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      if (filter.missing) {
	        key = 'missing';
	        value = filter.missing.field;
	        return Promise.resolve({ key: key, value: value });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 941 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function mapQueryStringProvider(Promise) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      if (filter.query && filter.query.query_string) {
	        key = 'query';
	        value = filter.query.query_string.query;
	        return Promise.resolve({ key: key, value: value });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 942 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function mapGeoBoundBoxProvider(Promise, courier) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      var topLeft = undefined;
	      var bottomRight = undefined;
	      var field = undefined;
	      if (filter.geo_bounding_box) {
	        return courier.indexPatterns.get(filter.meta.index).then(function (indexPattern) {
	          key = _.keys(filter.geo_bounding_box)[0];
	          field = indexPattern.fields.byName[key];
	          topLeft = field.format.convert(filter.geo_bounding_box[field.name].top_left);
	          bottomRight = field.format.convert(filter.geo_bounding_box[field.name].bottom_right);
	          value = topLeft + ' to ' + bottomRight;
	          return { key: key, value: value };
	        });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 943 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	  return function mapScriptProvider(Promise, courier) {
	    return function (filter) {
	      var key = undefined;
	      var value = undefined;
	      var field = undefined;
	      if (filter.script) {
	        return courier.indexPatterns.get(filter.meta.index).then(function (indexPattern) {
	          key = filter.meta.field;
	          field = indexPattern.fields.byName[key];

	          if (filter.meta.formattedValue) {
	            value = filter.meta.formattedValue;
	          } else {
	            value = filter.script.params.value;
	            value = field.format.convert(value);
	          }

	          return { key: key, value: value };
	        });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 944 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(212);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function mapDefaultProvider(Promise) {
	    var angular = __webpack_require__(212);
	    var _ = __webpack_require__(194);

	    var metaProperty = /(^\$|meta)/;

	    return function (filter) {
	      var key = _.find(_.keys(filter), function (key) {
	        return !key.match(metaProperty);
	      });

	      if (key) {
	        var value = angular.toJson(filter[key]);
	        return Promise.resolve({ key: key, value: value });
	      }
	      return Promise.reject(filter);
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 945 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(933);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function mapFlattenAndWrapFilters(Private) {
	    var mapAndFlattenFilters = Private(__webpack_require__(933));
	    return function (filters) {
	      return mapAndFlattenFilters(filters).then(function (filters) {
	        return _.map(filters, function (filter) {
	          filter.meta = filter.meta || {};
	          filter.meta.apply = true;
	          return filter;
	        });
	      });
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 946 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function extractTimeFilterProvider(courier, Promise) {
	    return Promise.method(function (filters) {
	      // Assume all the index patterns are the same since they will be added
	      // from the same visualization.
	      var id = _.get(filters, '[0].meta.index');
	      if (id == null) return;

	      return courier.indexPatterns.get(id).then(function (indexPattern) {
	        var filter = _.find(filters, function (obj) {
	          var key = _.keys(obj.range)[0];
	          return key === indexPattern.timeFieldName;
	        });
	        if (filter && filter.range) {
	          return filter;
	        }
	      });
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 947 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function filterOutTimeBaseFilter(courier, Promise) {
	    return Promise.method(function (filters) {
	      var id = _.get(filters, '[0].meta.index');
	      if (id == null) return;

	      return courier.indexPatterns.get(id).then(function (indexPattern) {
	        return _.filter(filters, function (filter) {
	          return !(filter.range && filter.range[indexPattern.timeFieldName]);
	        });
	      });
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 948 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function (filters) {
	    return _.filter(filters, 'meta.apply');
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 949 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(243);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var moment = __webpack_require__(243);
	  var _ = __webpack_require__(194);
	  return function changeTimeFilterProvider(timefilter) {
	    return function (filter) {
	      var key = _.keys(filter.range)[0];
	      var values = filter.range[key];
	      timefilter.time.from = moment(values.gt || values.gte);
	      timefilter.time.to = moment(values.lt || values.lte);
	      timefilter.time.mode = 'absolute';
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 950 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(251);
	__webpack_require__(951);
	__webpack_require__(952);
	__webpack_require__(806);
	__webpack_require__(805);
	__webpack_require__(933);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  return function (Private, $rootScope, getAppState, globalState) {
	    var EventEmitter = Private(__webpack_require__(251));
	    var onlyDisabled = __webpack_require__(951);
	    var onlyStateChanged = __webpack_require__(952);
	    var uniqFilters = __webpack_require__(806);
	    var compareFilters = __webpack_require__(805);
	    var mapAndFlattenFilters = Private(__webpack_require__(933));
	    var angular = __webpack_require__(212);

	    var queryFilter = new EventEmitter();

	    queryFilter.getFilters = function () {
	      var compareOptions = { disabled: true, negate: true };
	      var appFilters = queryFilter.getAppFilters();
	      var globalFilters = queryFilter.getGlobalFilters();

	      return uniqFilters(globalFilters.concat(appFilters), compareOptions);
	    };

	    queryFilter.getAppFilters = function () {
	      var appState = getAppState();
	      if (!appState || !appState.filters) return [];

	      // Work around for https://github.com/elastic/kibana/issues/5896
	      appState.filters = validateStateFilters(appState);

	      return appState.filters ? _.map(appState.filters, appendStoreType('appState')) : [];
	    };

	    queryFilter.getGlobalFilters = function () {
	      if (!globalState.filters) return [];

	      // Work around for https://github.com/elastic/kibana/issues/5896
	      globalState.filters = validateStateFilters(globalState);

	      return _.map(globalState.filters, appendStoreType('globalState'));
	    };

	    /**
	     * Adds new filters to the scope and state
	     * @param {object|array} fitlers Filter(s) to add
	     * @param {bool} global Should be added to global state
	     * @retuns {Promise} filter map promise
	     */
	    queryFilter.addFilters = function (filters, global) {
	      var appState = getAppState();
	      var state = global ? globalState : appState;

	      if (!_.isArray(filters)) {
	        filters = [filters];
	      }

	      return mapAndFlattenFilters(filters).then(function (filters) {
	        if (global) {
	          // simply concat global filters, they will be deduped
	          globalState.filters = globalState.filters.concat(filters);
	        } else if (appState) {
	          if (!appState.filters) appState.filters = [];
	          appState.filters = appState.filters.concat(filters);
	        }
	      });
	    };

	    /**
	     * Removes the filter from the proper state
	     * @param {object} matchFilter The filter to remove
	     */
	    queryFilter.removeFilter = function (matchFilter) {
	      var appState = getAppState();
	      var filter = _.omit(matchFilter, ['$$hashKey']);
	      var state = undefined;
	      var index = undefined;

	      // check for filter in appState
	      if (appState) {
	        index = _.findIndex(appState.filters, filter);
	        if (index !== -1) state = appState;
	      }

	      // if not found, check for filter in globalState
	      if (!state) {
	        index = _.findIndex(globalState.filters, filter);
	        if (index !== -1) state = globalState;else return; // not found in either state, do nothing
	      }

	      state.filters.splice(index, 1);
	    };

	    /**
	    * Updates an existing filter
	    * @param {object} filter Contains a reference to a filter and its new model
	    * @param {object} filter.source The filter reference
	    * @param {string} filter.model The edited filter
	    * @returns {object} Promise that resolves to the new filter on a successful merge
	    */
	    queryFilter.updateFilter = function (filter) {
	      var mergedFilter = _.assign({}, filter.source, filter.model);
	      mergedFilter.meta.alias = filter.alias;
	      //If the filter type is changed we want to discard the old type
	      //when merging changes back in
	      var filterTypeReplaced = filter.model[filter.type] !== mergedFilter[filter.type];
	      if (filterTypeReplaced) {
	        delete mergedFilter[filter.type];
	      }

	      return angular.copy(mergedFilter, filter.source);
	    };

	    /**
	     * Removes all filters
	     */
	    queryFilter.removeAll = function () {
	      var appState = getAppState();
	      appState.filters = [];
	      globalState.filters = [];
	    };

	    /**
	     * Toggles the filter between enabled/disabled.
	     * @param {object} filter The filter to toggle
	     & @param {boolean} force Disabled true/false
	     * @returns {object} updated filter
	     */
	    queryFilter.toggleFilter = function (filter, force) {
	      // Toggle the disabled flag
	      var disabled = _.isUndefined(force) ? !filter.meta.disabled : !!force;
	      filter.meta.disabled = disabled;
	      return filter;
	    };

	    /**
	     * Disables all filters
	     * @params {boolean} force Disable/enable all filters
	     */
	    queryFilter.toggleAll = function (force) {
	      function doToggle(filter) {
	        queryFilter.toggleFilter(filter, force);
	      }

	      executeOnFilters(doToggle);
	    };

	    /**
	     * Inverts the nagate value on the filter
	     * @param {object} filter The filter to toggle
	     * @returns {object} updated filter
	     */
	    queryFilter.invertFilter = function (filter) {
	      // Toggle the negate meta state
	      filter.meta.negate = !filter.meta.negate;
	      return filter;
	    };

	    /**
	     * Inverts all filters
	     * @returns {object} Resulting updated filter list
	     */
	    queryFilter.invertAll = function () {
	      executeOnFilters(queryFilter.invertFilter);
	    };

	    /**
	     * Pins the filter to the global state
	     * @param {object} filter The filter to pin
	     * @param {boolean} force pinned state
	     * @returns {object} updated filter
	     */
	    queryFilter.pinFilter = function (filter, force) {
	      var appState = getAppState();
	      if (!appState) return filter;

	      // ensure that both states have a filters property
	      if (!_.isArray(globalState.filters)) globalState.filters = [];
	      if (!_.isArray(appState.filters)) appState.filters = [];

	      var appIndex = _.indexOf(appState.filters, filter);

	      if (appIndex !== -1 && force !== false) {
	        appState.filters.splice(appIndex, 1);
	        globalState.filters.push(filter);
	      } else {
	        var globalIndex = _.indexOf(globalState.filters, filter);

	        if (globalIndex === -1 || force === true) return filter;

	        globalState.filters.splice(globalIndex, 1);
	        appState.filters.push(filter);
	      }

	      return filter;
	    };

	    /**
	     * Pins all filters
	     * @params {boolean} force Pin/Unpin all filters
	     */
	    queryFilter.pinAll = function (force) {
	      function pin(filter) {
	        queryFilter.pinFilter(filter, force);
	      }

	      executeOnFilters(pin);
	    };

	    initWatchers();

	    return queryFilter;

	    /**
	     * Rids filter list of null values and replaces state if any nulls are found
	     */
	    function validateStateFilters(state) {
	      var compacted = _.compact(state.filters);
	      if (state.filters.length !== compacted.length) {
	        state.filters = compacted;
	        state.replace();
	      }
	      return state.filters;
	    }

	    /**
	     * Saves both app and global states, ensuring filters are persisted
	     * @returns {object} Resulting filter list, app and global combined
	     */
	    function saveState() {
	      var appState = getAppState();
	      if (appState) appState.save();
	      globalState.save();
	    }

	    function appendStoreType(type) {
	      return function (filter) {
	        filter.$state = {
	          store: type
	        };
	        return filter;
	      };
	    }

	    // helper to run a function on all filters in all states
	    function executeOnFilters(fn) {
	      var appState = getAppState();
	      var globalFilters = [];
	      var appFilters = [];

	      if (globalState.filters) globalFilters = globalState.filters;
	      if (appState && appState.filters) appFilters = appState.filters;

	      globalFilters.concat(appFilters).forEach(fn);
	    }

	    function mergeStateFilters(gFilters, aFilters, compareOptions) {
	      // ensure we don't mutate the filters passed in
	      var globalFilters = gFilters ? _.cloneDeep(gFilters) : [];
	      var appFilters = aFilters ? _.cloneDeep(aFilters) : [];
	      compareOptions = _.defaults(compareOptions || {}, { disabled: true });

	      // existing globalFilters should be mutated by appFilters
	      _.each(appFilters, function (filter, i) {
	        var match = _.find(globalFilters, function (globalFilter) {
	          return compareFilters(globalFilter, filter, compareOptions);
	        });

	        // no match, do nothing
	        if (!match) return;

	        // matching filter in globalState, update global and remove from appState
	        _.assign(match.meta, filter.meta);
	        appFilters.splice(i, 1);
	      });

	      return [uniqFilters(globalFilters, { disabled: true }), uniqFilters(appFilters, { disabled: true })];
	    }

	    /**
	     * Initializes state watchers that use the event emitter
	     * @returns {void}
	     */
	    function initWatchers() {
	      var removeAppStateWatchers = undefined;

	      $rootScope.$watch(getAppState, function () {
	        removeAppStateWatchers && removeAppStateWatchers();
	        removeAppStateWatchers = initAppStateWatchers();
	      });

	      function initAppStateWatchers() {
	        // multi watch on the app and global states
	        var stateWatchers = [{
	          fn: $rootScope.$watch,
	          deep: true,
	          get: queryFilter.getGlobalFilters
	        }, {
	          fn: $rootScope.$watch,
	          deep: true,
	          get: queryFilter.getAppFilters
	        }];

	        // when states change, use event emitter to trigger updates and fetches
	        return $rootScope.$watchMulti(stateWatchers, function (next, prev) {
	          // prevent execution on watcher instantiation
	          if (_.isEqual(next, prev)) return;

	          var doUpdate = false;
	          var doFetch = false;

	          // reconcile filter in global and app states
	          var filters = mergeStateFilters(next[0], next[1]);
	          var globalFilters = filters[0];
	          var appFilters = filters[1];
	          var appState = getAppState();

	          // save the state, as it may have updated
	          var globalChanged = !_.isEqual(next[0], globalFilters);
	          var appChanged = !_.isEqual(next[1], appFilters);

	          // the filters were changed, apply to state (re-triggers this watcher)
	          if (globalChanged || appChanged) {
	            globalState.filters = globalFilters;
	            if (appState) appState.filters = appFilters;
	            return;
	          }

	          // check for actions, bail if we're done
	          getActions();
	          if (!doUpdate) return;

	          // save states and emit the required events
	          saveState();
	          queryFilter.emit('update').then(function () {
	            if (!doFetch) return;
	            queryFilter.emit('fetch');
	          });

	          // iterate over each state type, checking for changes
	          function getActions() {
	            var newFilters = [];
	            var oldFilters = [];

	            stateWatchers.forEach(function (watcher, i) {
	              var nextVal = next[i];
	              var prevVal = prev[i];
	              newFilters = newFilters.concat(nextVal);
	              oldFilters = oldFilters.concat(prevVal);

	              // no update or fetch if there was no change
	              if (nextVal === prevVal) return;

	              if (nextVal) doUpdate = true;

	              // don't trigger fetch when only disabled filters
	              if (!onlyDisabled(nextVal, prevVal)) doFetch = true;
	            });

	            // make sure change wasn't only a state move
	            // checking length first is an optimization
	            if (doFetch && newFilters.length === oldFilters.length) {
	              if (onlyStateChanged(newFilters, oldFilters)) doFetch = false;
	            }
	          }
	        });
	      }
	    }
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 951 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  var pluckDisabled = function pluckDisabled(filter) {
	    return _.get(filter, 'meta.disabled');
	  };

	  /**
	   * Checks to see if only disabled filters have been changed
	   * @returns {bool} Only disabled filters
	   */
	  return function (newFilters, oldFilters) {
	    return _.every(newFilters.concat(oldFilters), function (newFilter) {
	      return pluckDisabled(newFilter);
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 952 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(805);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var compareFilters = __webpack_require__(805);
	  var compareOptions = { disabled: true, negate: true };

	  /**
	   * Checks to see if only disabled filters have been changed
	   * @returns {bool} Only disabled filters
	   */
	  return function (newFilters, oldFilters) {
	    return _.every(newFilters, function (newFilter, i) {
	      var match = _.find(oldFilters, function (oldFilter) {
	        return compareFilters(newFilter, oldFilter, compareOptions);
	      });
	      return !!match;
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 953 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(950);

	// Adds a filter to a passed state
	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function (Private) {
	    var _ = __webpack_require__(194);
	    var queryFilter = Private(__webpack_require__(950));
	    var filterManager = {};

	    filterManager.add = function (field, values, operation, index) {
	      values = _.isArray(values) ? values : [values];
	      var fieldName = _.isObject(field) ? field.name : field;
	      var filters = _.flatten([queryFilter.getAppFilters()]);
	      var newFilters = [];

	      var negate = operation === '-';

	      // TODO: On array fields, negating does not negate the combination, rather all terms
	      _.each(values, function (value) {
	        var filter = undefined;
	        var existing = _.find(filters, function (filter) {
	          if (!filter) return;

	          if (fieldName === '_exists_' && filter.exists) {
	            return filter.exists.field === value;
	          }

	          if (filter.query) {
	            return filter.query.match[fieldName] && filter.query.match[fieldName].query === value;
	          }

	          if (filter.script) {
	            return filter.meta.field === fieldName && filter.script.params.value === value;
	          }
	        });

	        if (existing) {
	          existing.meta.disabled = false;
	          if (existing.meta.negate !== negate) {
	            queryFilter.invertFilter(existing);
	          }
	          return;
	        }

	        switch (fieldName) {
	          case '_exists_':
	            filter = {
	              meta: {
	                negate: negate,
	                index: index
	              },
	              exists: {
	                field: value
	              }
	            };
	            break;
	          default:
	            if (field.scripted) {
	              filter = {
	                meta: { negate: negate, index: index, field: fieldName },
	                script: {
	                  script: '(' + field.script + ') == value',
	                  lang: field.lang,
	                  params: {
	                    value: value
	                  }
	                }
	              };
	            } else {
	              filter = { meta: { negate: negate, index: index }, query: { match: {} } };
	              filter.query.match[fieldName] = { query: value, type: 'phrase' };
	            }

	            break;
	        }

	        newFilters.push(filter);
	      });

	      return queryFilter.addFilters(newFilters);
	    };

	    return filterManager;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 954 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').run(function ($rootScope) {

	    /**
	     * Helper that registers an event listener, and removes that listener when
	     * the $scope is destroyed.
	     *
	     * @param  {EventEmitter} emitter - the event emitter to listen to
	     * @param  {string} eventName - the event name
	     * @param  {Function} handler - the event handler
	     * @return {undefined}
	     */
	    $rootScope.constructor.prototype.$listen = function (emitter, eventName, handler) {
	      emitter.on(eventName, handler);
	      this.$on('$destroy', function () {
	        emitter.off(eventName, handler);
	      });
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 955 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(956);
	__webpack_require__(957);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(215).get('kibana').directive('parseQuery', function (Private) {
	    var fromUser = Private(__webpack_require__(956));
	    var toUser = __webpack_require__(957);

	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      scope: {
	        'ngModel': '='
	      },
	      link: function link($scope, elem, attr, ngModel) {
	        var init = function init() {
	          $scope.ngModel = fromUser($scope.ngModel);
	        };

	        ngModel.$parsers.push(fromUser);
	        ngModel.$formatters.push(toUser);

	        init();
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 956 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(879);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  return function GetQueryFromUser(es, Private) {
	    var decorateQuery = Private(__webpack_require__(879));

	    /**
	     * Take text from the user and make it into a query object
	     * @param {text} user's query input
	     * @returns {object}
	     */
	    return function (text) {
	      function getQueryStringQuery(text) {
	        return decorateQuery({ query_string: { query: text } });
	      }

	      var matchAll = getQueryStringQuery('*');

	      // If we get an empty object, treat it as a *
	      if (_.isObject(text)) {
	        if (_Object$keys(text).length) {
	          return text;
	        } else {
	          return matchAll;
	        }
	      }

	      // Nope, not an object.
	      text = (text || '').trim();
	      if (text.length === 0) return matchAll;

	      if (text[0] === '{') {
	        try {
	          return JSON.parse(text);
	        } catch (e) {
	          return getQueryStringQuery(text);
	        }
	      } else {
	        return getQueryStringQuery(text);
	      }
	    };
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 957 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var angular = __webpack_require__(212);

	  /**
	   * Take text from the model and present it to the user as a string
	   * @param {text} model value
	   * @returns {string}
	   */
	  return function toUser(_x) {
	    var _again = true;

	    _function: while (_again) {
	      var text = _x;
	      _again = false;

	      if (text == null) return '';
	      if (_.isObject(text)) {
	        if (text.query_string) {
	          _x = text.query_string.query;
	          _again = true;
	          continue _function;
	        }
	        return angular.toJson(text);
	      }
	      return '' + text;
	    }
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 958 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(194);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var modules = __webpack_require__(215);
	  var _ = __webpack_require__(194);

	  modules.get('kibana/persisted_log').factory('PersistedLog', function ($window, localStorage) {
	    function PersistedLog(name, options) {
	      options = options || {};
	      this.name = name;
	      this.maxLength = parseInt(options.maxLength, 10);
	      this.filterDuplicates = options.filterDuplicates || false;
	      this.items = localStorage.get(this.name) || [];
	      if (!isNaN(this.maxLength)) this.items = _.take(this.items, this.maxLength);
	    }

	    PersistedLog.prototype.add = function (val) {
	      if (val == null) {
	        return this.items;
	      }

	      // remove any matching items from the stack if option is set
	      if (this.filterDuplicates) {
	        _.remove(this.items, function (item) {
	          return _.isEqual(item, val);
	        });
	      }

	      this.items.unshift(val);

	      // if maxLength is set, truncate the stack
	      if (!isNaN(this.maxLength)) this.items = _.take(this.items, this.maxLength);

	      // persist the stack
	      localStorage.set(this.name, this.items);
	      return this.items;
	    };

	    PersistedLog.prototype.get = function () {
	      return this.items;
	    };

	    return PersistedLog;
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 959 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(267);
	__webpack_require__(960);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var modules = __webpack_require__(215);
	  var urlParam = '_a';

	  function AppStateProvider(Private, $rootScope, getAppState) {
	    var State = Private(__webpack_require__(267));
	    var PersistedState = Private(__webpack_require__(960));
	    var persistedStates = undefined;
	    var eventUnsubscribers = undefined;

	    _['class'](AppState).inherits(State);
	    function AppState(defaults) {
	      persistedStates = {};
	      eventUnsubscribers = [];

	      AppState.Super.call(this, urlParam, defaults);
	      getAppState._set(this);
	    }

	    // if the url param is missing, write it back
	    AppState.prototype._persistAcrossApps = false;

	    AppState.prototype.destroy = function () {
	      AppState.Super.prototype.destroy.call(this);
	      getAppState._set(null);
	      _.callEach(eventUnsubscribers);
	    };

	    AppState.prototype.makeStateful = function (prop) {
	      var _this = this;

	      if (persistedStates[prop]) return persistedStates[prop];
	      var self = this;

	      // set up the ui state
	      persistedStates[prop] = new PersistedState();

	      // update the app state when the stateful instance changes
	      var updateOnChange = function updateOnChange() {
	        var replaceState = false; // TODO: debouncing logic

	        self[prop] = persistedStates[prop].getChanges();
	        self.save(replaceState);
	      };
	      var handlerOnChange = function handlerOnChange(method) {
	        return persistedStates[prop][method]('change', updateOnChange);
	      };
	      handlerOnChange('on');
	      eventUnsubscribers.push(function () {
	        return handlerOnChange('off');
	      });

	      // update the stateful object when the app state changes
	      var persistOnChange = function persistOnChange(changes) {
	        if (!changes) return;

	        if (changes.indexOf(prop) !== -1) {
	          persistedStates[prop].set(self[prop]);
	        }
	      };
	      var handlePersist = function handlePersist(method) {
	        return _this[method]('fetch_with_changes', persistOnChange);
	      };
	      handlePersist('on');
	      eventUnsubscribers.push(function () {
	        return handlePersist('off');
	      });

	      // if the thing we're making stateful has an appState value, write to persisted state
	      if (self[prop]) persistedStates[prop].setSilent(self[prop]);

	      return persistedStates[prop];
	    };

	    return AppState;
	  }

	  modules.get('kibana/global_state').factory('AppState', function (Private) {
	    return Private(AppStateProvider);
	  }).service('getAppState', function ($location) {
	    var currentAppState = undefined;

	    function get() {
	      return currentAppState;
	    }

	    // Checks to see if the appState might already exist, even if it hasn't been newed up
	    get.previouslyStored = function () {
	      var search = $location.search();
	      return search[urlParam] ? true : false;
	    };

	    get._set = function (current) {
	      currentAppState = current;
	    };

	    return get;
	  });

	  return AppStateProvider;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 960 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(254);
	__webpack_require__(194);
	__webpack_require__(961);
	__webpack_require__(236);
	__webpack_require__(251);
	__webpack_require__(261);

	'use strict';

	var _Object$keys = __webpack_require__(254)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var toPath = __webpack_require__(961);
	  var errors = __webpack_require__(236);

	  return function (Private) {
	    var Events = Private(__webpack_require__(251));
	    var SimpleEmitter = __webpack_require__(261);

	    function validateParent(parent, path) {
	      if (path.length <= 0) {
	        throw new errors.PersistedStateError('PersistedState child objects must contain a path');
	      }

	      if (parent instanceof PersistedState) return;
	      throw new errors.PersistedStateError('Parent object must be an instance of PersistedState');
	    }

	    function validateValue(value) {
	      var msg = 'State value must be a plain object';
	      if (!value) return;
	      if (!_.isPlainObject(value)) throw new errors.PersistedStateError(msg);
	    }

	    function prepSetParams(key, value, path) {
	      // key must be the value, set the entire state using it
	      if (_.isUndefined(value) && (_.isPlainObject(key) || path.length > 0)) {
	        // setting entire tree, swap the key and value to write to the state
	        value = key;
	        key = undefined;
	      }

	      // ensure the value being passed in is never mutated
	      return {
	        value: _.cloneDeep(value),
	        key: key
	      };
	    }

	    function parentDelegationMixin(from, to) {
	      _.forOwn(from.prototype, function (method, methodName) {
	        to.prototype[methodName] = function () {
	          return from.prototype[methodName].apply(this._parent || this, arguments);
	        };
	      });
	    }

	    _['class'](PersistedState).inherits(Events);
	    parentDelegationMixin(SimpleEmitter, PersistedState);
	    parentDelegationMixin(Events, PersistedState);

	    function PersistedState(value, path, parent, silent) {
	      PersistedState.Super.call(this);

	      this._path = this._setPath(path);
	      this._parent = parent || false;

	      if (this._parent) {
	        validateParent(this._parent, this._path);
	      } else if (!this._path.length) {
	        validateValue(value);
	      }

	      value = value || this._getDefault();

	      // copy passed state values and create internal trackers
	      silent ? this.setSilent(value) : this.set(value);
	      this._initialized = true; // used to track state changes
	    }

	    PersistedState.prototype.get = function (key, def) {
	      return _.cloneDeep(this._get(key, def));
	    };

	    PersistedState.prototype.set = function (key, value) {
	      var params = prepSetParams(key, value, this._path);
	      var val = this._set(params.key, params.value);
	      this.emit('set');
	      return val;
	    };

	    PersistedState.prototype.setSilent = function (key, value) {
	      var params = prepSetParams(key, value, this._path);
	      return this._set(params.key, params.value, true);
	    };

	    PersistedState.prototype.reset = function (path) {
	      var keyPath = this._getIndex(path);
	      var origValue = _.get(this._defaultState, keyPath);
	      var currentValue = _.get(this._mergedState, keyPath);

	      if (_.isUndefined(origValue)) {
	        this._cleanPath(path, this._mergedState);
	      } else {
	        _.set(this._mergedState, keyPath, origValue);
	      }

	      // clean up the changedState and defaultChildState trees
	      this._cleanPath(path, this._changedState);
	      this._cleanPath(path, this._defaultChildState);

	      if (!_.isEqual(currentValue, origValue)) this.emit('change');
	    };

	    PersistedState.prototype.createChild = function (path, value, silent) {
	      this._setChild(this._getIndex(path), value, this._parent || this);
	      return new PersistedState(value, this._getIndex(path), this._parent || this, silent);
	    };

	    PersistedState.prototype.removeChild = function (path) {
	      var origValue = _.get(this._defaultState, this._getIndex(path));

	      if (_.isUndefined(origValue)) {
	        this.reset(path);
	      } else {
	        this.set(path, origValue);
	      }
	    };

	    PersistedState.prototype.getChanges = function () {
	      return _.cloneDeep(this._changedState);
	    };

	    PersistedState.prototype.toJSON = function () {
	      return this.get();
	    };

	    PersistedState.prototype.toString = function () {
	      return JSON.stringify(this.toJSON());
	    };

	    PersistedState.prototype.fromString = function (input) {
	      return this.set(JSON.parse(input));
	    };

	    PersistedState.prototype._getIndex = function (key) {
	      if (_.isUndefined(key)) return this._path;
	      return (this._path || []).concat(toPath(key));
	    };

	    PersistedState.prototype._getPartialIndex = function (key) {
	      var keyPath = this._getIndex(key);
	      return keyPath.slice(this._path.length);
	    };

	    PersistedState.prototype._cleanPath = function (path, stateTree) {
	      var partialPath = this._getPartialIndex(path);
	      var remove = true;

	      // recursively delete value tree, when no other keys exist
	      while (partialPath.length > 0) {
	        var lastKey = partialPath.splice(partialPath.length - 1, 1)[0];
	        var statePath = this._path.concat(partialPath);
	        var stateVal = statePath.length > 0 ? _.get(stateTree, statePath) : stateTree;

	        // if stateVal isn't an object, do nothing
	        if (!_.isPlainObject(stateVal)) return;

	        if (remove) delete stateVal[lastKey];
	        if (_Object$keys(stateVal).length > 0) remove = false;
	      }
	    };

	    PersistedState.prototype._getDefault = function () {
	      var def = this._hasPath() ? undefined : {};
	      return this._parent ? this.get() : def;
	    };

	    PersistedState.prototype._setPath = function (path) {
	      var isString = _.isString(path);
	      var isArray = _.isArray(path);

	      if (!isString && !isArray) return [];
	      return isString ? [this._getIndex(path)] : path;
	    };

	    PersistedState.prototype._setChild = function (path, value, parent) {
	      parent._defaultChildState = parent._defaultChildState || {};
	      _.set(parent._defaultChildState, path, value);
	    };

	    PersistedState.prototype._hasPath = function () {
	      return this._path.length > 0;
	    };

	    PersistedState.prototype._get = function (key, def) {
	      // delegate to parent instance
	      if (this._parent) return this._parent._get(this._getIndex(key), def);

	      // no path and no key, get the whole state
	      if (!this._hasPath() && _.isUndefined(key)) {
	        return this._mergedState;
	      }

	      return _.get(this._mergedState, this._getIndex(key), def);
	    };

	    PersistedState.prototype._set = function (key, value, silent, initialChildState) {
	      var self = this;
	      var stateChanged = false;
	      var initialState = !this._initialized;
	      var keyPath = this._getIndex(key);
	      var hasKeyPath = keyPath.length > 0;

	      // if this is the initial state value, save value as the default
	      if (initialState) {
	        this._changedState = {};
	        if (!this._hasPath() && _.isUndefined(key)) this._defaultState = value;else this._defaultState = _.set({}, keyPath, value);
	      }

	      // delegate to parent instance, passing child's default value
	      if (this._parent) {
	        return this._parent._set(keyPath, value, silent, initialState);
	      }

	      // everything in here affects only the parent state
	      if (!initialState) {
	        // no path and no key, set the whole state
	        if (!this._hasPath() && _.isUndefined(key)) {
	          // compare changedState and new state, emit an event when different
	          stateChanged = !_.isEqual(this._changedState, value);
	          if (!initialChildState) {
	            this._changedState = value;
	            this._mergedState = _.cloneDeep(value);
	          }
	        } else {
	          // check for changes at path, emit an event when different
	          var curVal = hasKeyPath ? this.get(keyPath) : this._mergedState;
	          stateChanged = !_.isEqual(curVal, value);

	          if (!initialChildState) {
	            // arrays are merge by index, not desired - ensure they are replaced
	            if (_.isArray(_.get(this._mergedState, keyPath))) {
	              if (hasKeyPath) _.set(this._mergedState, keyPath, undefined);else this._mergedState = undefined;
	            }

	            if (hasKeyPath) _.set(this._changedState, keyPath, value);else this._changedState = _.isPlainObject(value) ? value : {};
	          }
	        }
	      }

	      // update the merged state value
	      var targetObj = this._mergedState || _.cloneDeep(this._defaultState);
	      var sourceObj = _.merge({}, this._defaultChildState, this._changedState);

	      // handler arguments are (targetValue, sourceValue, key, target, source)
	      var mergeMethod = function mergeMethod(targetValue, sourceValue, mergeKey) {
	        // if not initial state, skip default merge method (ie. return value, see note below)
	        if (!initialState && !initialChildState && _.isEqual(keyPath, self._getIndex(mergeKey))) {
	          // use the sourceValue or fall back to targetValue
	          return !_.isUndefined(sourceValue) ? sourceValue : targetValue;
	        }
	      };

	      // If `mergeMethod` is provided it is invoked to produce the merged values of the
	      // destination and source properties.
	      // If `mergeMethod` returns `undefined` the default merging method is used
	      this._mergedState = _.merge(targetObj, sourceObj, mergeMethod);

	      // sanity check; verify that there are actually changes
	      if (_.isEqual(this._mergedState, this._defaultState)) this._changedState = {};

	      if (!silent && stateChanged) this.emit('change');

	      return this;
	    };

	    return PersistedState;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 961 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(962),
	    isArray = __webpack_require__(963);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 962 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 963 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(964),
	    isLength = __webpack_require__(969),
	    isObjectLike = __webpack_require__(968);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 964 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(965);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 965 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(966),
	    isObjectLike = __webpack_require__(968);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;


/***/ },
/* 966 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(967);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 967 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 968 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 969 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var modules = __webpack_require__(215);
	  var angular = __webpack_require__(212);

	  function Storage(store) {
	    var self = this;
	    self.store = store;

	    self.get = function (key) {
	      try {
	        return JSON.parse(self.store.getItem(key));
	      } catch (e) {
	        return null;
	      }
	    };

	    self.set = function (key, value) {
	      try {
	        return self.store.setItem(key, angular.toJson(value));
	      } catch (e) {
	        return false;
	      }
	    };

	    self.remove = function (key) {
	      return self.store.removeItem(key);
	    };

	    self.clear = function () {
	      return self.store.clear();
	    };
	  }

	  var createService = function createService(type) {
	    return function ($window) {
	      return new Storage($window[type]);
	    };
	  };

	  modules.get('kibana/storage').service('localStorage', createService('localStorage')).service('sessionStorage', createService('sessionStorage'));
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 971 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(888);
	__webpack_require__(972);
	__webpack_require__(986);
	__webpack_require__(992);
	__webpack_require__(994);
	__webpack_require__(995);
	__webpack_require__(996);
	__webpack_require__(997);
	__webpack_require__(999);
	__webpack_require__(1002);
	__webpack_require__(1009);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var fieldFormats = __webpack_require__(888);
	  fieldFormats.register(__webpack_require__(972));
	  fieldFormats.register(__webpack_require__(986));
	  fieldFormats.register(__webpack_require__(992));
	  fieldFormats.register(__webpack_require__(994));
	  fieldFormats.register(__webpack_require__(995));
	  fieldFormats.register(__webpack_require__(996));
	  fieldFormats.register(__webpack_require__(997));
	  fieldFormats.register(__webpack_require__(999));
	  fieldFormats.register(__webpack_require__(1002));
	  fieldFormats.register(__webpack_require__(1009));
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 972 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(973);
	__webpack_require__(977);
	__webpack_require__(985);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function UrlFormatProvider(Private, highlightFilter) {
	    var _ = __webpack_require__(194);

	    var FieldFormat = Private(__webpack_require__(901));

	    __webpack_require__(973);
	    __webpack_require__(977);

	    _['class'](Url).inherits(FieldFormat);
	    function Url(params) {
	      Url.Super.call(this, params);
	      this._compileTemplate = _.memoize(this._compileTemplate);
	    }

	    Url.id = 'url';
	    Url.title = 'Url';
	    Url.fieldType = ['number', 'boolean', 'date', 'ip', 'string', 'murmur3', 'unknown', 'conflict'];

	    Url.editor = {
	      template: __webpack_require__(985),
	      controllerAs: 'url',
	      controller: function controller($scope) {
	        var iconPattern = '/bundles/src/ui/public/stringify/icons/{{value}}.png';

	        this.samples = {
	          a: ['john', '/some/pathname/asset.png', 1234],
	          img: ['go', 'stop', ['de', 'ne', 'us', 'ni'], 'cv']
	        };

	        $scope.$watch('editor.formatParams.type', function (type, prev) {
	          var params = $scope.editor.formatParams;
	          if (type === 'img' && type !== prev && !params.urlTemplate) {
	            params.urlTemplate = iconPattern;
	          }
	        });
	      }
	    };

	    Url.templateMatchRE = /{{([\s\S]+?)}}/g;
	    Url.paramDefaults = {
	      type: 'a',
	      urlTemplate: null,
	      labelTemplate: null
	    };

	    Url.urlTypes = [{ id: 'a', name: 'Link' }, { id: 'img', name: 'Image' }];

	    Url.prototype._formatUrl = function (value) {
	      var template = this.param('urlTemplate');
	      if (!template) return value;

	      return this._compileTemplate(template)({
	        value: encodeURIComponent(value),
	        rawValue: value
	      });
	    };

	    Url.prototype._formatLabel = function (value, url) {
	      var template = this.param('labelTemplate');
	      if (url == null) url = this._formatUrl(value);
	      if (!template) return url;

	      return this._compileTemplate(template)({
	        value: value,
	        url: url
	      });
	    };

	    Url.prototype._convert = {
	      text: function text(value) {
	        return this._formatLabel(value);
	      },

	      html: function html(rawValue, field, hit) {
	        var url = _.escape(this._formatUrl(rawValue));
	        var label = _.escape(this._formatLabel(rawValue, url));

	        switch (this.param('type')) {
	          case 'img':
	            return '<img src="' + url + '" alt="' + label + '" title="' + label + '">';
	          default:
	            if (hit && hit.highlight && hit.highlight[field.name]) {
	              label = highlightFilter(label, hit.highlight[field.name]);
	            }

	            return '<a href="' + url + '" target="_blank">' + label + '</a>';
	        }
	      }
	    };

	    Url.prototype._compileTemplate = function (template) {
	      var parts = template.split(Url.templateMatchRE).map(function (part, i) {
	        // trim all the odd bits, the variable names
	        return i % 2 ? part.trim() : part;
	      });

	      return function (locals) {
	        // replace all the odd bits with their local var
	        var output = '';
	        var i = -1;
	        while (++i < parts.length) {
	          if (i % 2) {
	            if (locals.hasOwnProperty(parts[i])) {
	              var local = locals[parts[i]];
	              output += local == null ? '' : local;
	            }
	          } else {
	            output += parts[i];
	          }
	        }

	        return output;
	      };
	    };

	    return Url;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 973 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(974);
	__webpack_require__(215);
	__webpack_require__(976);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(974);

	  __webpack_require__(215).get('kibana').directive('fieldFormatEditorPattern', function () {
	    return {
	      restrict: 'E',
	      template: __webpack_require__(976),
	      require: ['ngModel', '^fieldEditor'],
	      scope: true,
	      link: function link($scope, $el, attrs, cntrls) {
	        var ngModelCntrl = cntrls[0];

	        $scope.$bind('inputs', attrs.inputs);
	        $scope.$bind('placeholder', attrs.placeholder);

	        // bind our local model with the outside ngModel
	        $scope.$watch('model', ngModelCntrl.$setViewValue);
	        ngModelCntrl.$render = function () {
	          $scope.model = ngModelCntrl.$viewValue;
	        };
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 974 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(975);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(215).get('kibana').directive('fieldFormatEditorSamples', function ($sce, Promise) {
	    return {
	      restrict: 'E',
	      template: __webpack_require__(975),
	      require: ['?^ngModel', '^fieldEditor'],
	      scope: true,
	      link: function link($scope, $el, attrs, cntrls) {
	        var ngModelCntrl = cntrls[0];

	        $scope.samples = null;
	        $scope.$bind('inputs', attrs.inputs);

	        $scope.$watchMulti(['editor.field.format', '[]inputs'], function () {
	          $scope.samples = null;
	          var field = $scope.editor.field;

	          if (!field || !field.format) {
	            return;
	          }

	          Promise['try'](function () {
	            var converter = field.format.getConverterFor('html');
	            $scope.samples = _.map($scope.inputs, function (input) {
	              return [input, $sce.trustAsHtml(converter(input))];
	            });
	          }).then(validity, validity);
	        });

	        function validity(err) {
	          $scope.error = err;
	          ngModelCntrl && ngModelCntrl.$setValidity('patternExecutes', !err);
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 975 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group hintbox\" ng-if=\"error\">\r\n  <h4 class=\"hintbox-heading\">\r\n    <i class=\"fa fa-danger text-danger\"></i> Format error\r\n  </h4>\r\n  <p>\r\n    An error occured while trying to use this format configuration.\r\n  </p>\r\n  <pre>{{ error.message }}</pre>\r\n</div>\r\n\r\n<div class=\"form-group\" ng-if=\"samples\">\r\n  <hr>\r\n  <label>Samples</label>\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th>\r\n          Input\r\n        </th>\r\n        <th>\r\n          Formatted\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr ng-repeat=\"sample in samples\">\r\n        <td ng-bind=\"sample[0]\"></td>\r\n        <td ng-bind-html=\"sample[1]\"></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n"

/***/ },
/* 976 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <input\r\n    ng-model=\"model\"\r\n    placeholder=\"{{ placeholder }}\"\r\n    class=\"form-control\">\r\n</div>\r\n\r\n<field-format-editor-samples\r\n  ng-model=\"model\"\r\n  inputs=\"inputs\">\r\n</field-format-editor-samples>\r\n"

/***/ },
/* 977 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(978);
	__webpack_require__(979);
	__webpack_require__(980);
	__webpack_require__(981);
	__webpack_require__(982);
	__webpack_require__(983);
	__webpack_require__(984);

/***/ },
/* 978 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/go.png"

/***/ },
/* 979 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/stop.png"

/***/ },
/* 980 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/de.png"

/***/ },
/* 981 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/ne.png"

/***/ },
/* 982 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/us.png"

/***/ },
/* 983 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/ni.png"

/***/ },
/* 984 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "src/ui/public/stringify/icons/cv.png"

/***/ },
/* 985 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <label>Type</label>\r\n  <select\r\n    ng-model=\"editor.formatParams.type\"\r\n    ng-options=\"type.id as type.name for type in editor.field.format.type.urlTypes\"\r\n    class=\"form-control\">\r\n  </select>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n  <span class=\"pull-right text-info hintbox-label\" ng-click=\"editor.showUrlTmplHelp = !editor.showUrlTmplHelp\">\r\n    <i class=\"fa fa-info\"></i> Url Template Help\r\n  </span>\r\n\r\n  <label>Url Template</label>\r\n  <div class=\"hintbox\" ng-if=\"editor.showUrlTmplHelp\">\r\n    <h4 class=\"hintbox-heading\">\r\n      <i class=\"fa fa-question-circle text-info\"></i> Url Template Help\r\n    </h4>\r\n\r\n    <p>\r\n      If a field only contains part of a url then a \"Url Template\" can be used to format the value as a complete url. The format is a string which uses double curly brace notation <code ng-non-bindable>{{ }}</code> to inject values. The following values can be accessed:\r\n    </p>\r\n\r\n    <ul>\r\n      <li>\r\n        <strong>value</strong> &mdash; The uri-escaped value\r\n      </li>\r\n      <li>\r\n        <strong>rawValue</strong> &mdash; The unescaped value\r\n      </li>\r\n    </ul>\r\n\r\n    <table class=\"table table-striped table-bordered\">\r\n      <caption>Examples</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>Value</th>\r\n          <th>Template</th>\r\n          <th>Result</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>1234</td>\r\n          <td ng-non-bindable>http://company.net/profiles?user_id={{value}}</td>\r\n          <td>http://company.net/profiles?user_id=1234</td>\r\n        </tr>\r\n        <tr>\r\n          <td>users/admin</td>\r\n          <td ng-non-bindable>http://company.net/groups?id={{value}}</td>\r\n          <td>http://company.net/groups?id=users%2Fadmin</td>\r\n        </tr>\r\n        <tr>\r\n          <td>/images/favicon.ico</td>\r\n          <td ng-non-bindable>http://www.site.com{{rawValue}}</td>\r\n          <td>http://www.site.com/images/favicon.ico</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <input ng-model=\"editor.formatParams.urlTemplate\" class=\"form-control\">\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n  <span class=\"pull-right text-info hintbox-label\" ng-click=\"editor.showLabelTmplHelp = !editor.showLabelTmplHelp\">\r\n    <i class=\"fa fa-info\"></i> Label Template Help\r\n  </span>\r\n\r\n  <label>Label Template</label>\r\n  <div class=\"hintbox\" ng-if=\"editor.showLabelTmplHelp\">\r\n    <h4 class=\"hintbox-heading\">\r\n      <i class=\"fa fa-question-circle text-info\"></i> Label Template Help\r\n    </h4>\r\n\r\n    <p>\r\n      If the url in this field is large, it might be useful to provide an alternate template for the text version of the url. This will be displayed instead of the url, but will still link to the url. The format is a string which uses double curly brace notation <code ng-non-bindable>{{ }}</code> to inject values. The following values can be accessed:\r\n    </p>\r\n\r\n    <ul>\r\n      <li>\r\n        <strong>value</strong> &mdash; The fields value\r\n      </li>\r\n      <li>\r\n        <strong>url</strong> &mdash; The formatted url\r\n      </li>\r\n    </ul>\r\n\r\n    <table class=\"table table-striped table-bordered\">\r\n      <caption>Examples</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>Value</th>\r\n          <th>Url Template</th>\r\n          <th>Label Template</th>\r\n          <th>Result</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>1234</td>\r\n          <td ng-non-bindable>http://company.net/profiles?user_id={{value}}</td>\r\n          <td ng-non-bindable>User #{{value}}</td>\r\n          <td>\r\n            <a href=\"http://company.net/profiles?user_id=1234\">User #1234</a>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>/assets/main.css</td>\r\n          <td ng-non-bindable>http://site.com{{rawValue}}</td>\r\n          <td>View Asset</td>\r\n          <td>\r\n            <a href=\"http://site.com/assets/main.css\">View Asset</a>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <input ng-model=\"editor.formatParams.labelTemplate\" class=\"form-control\">\r\n</div>\r\n\r\n<field-format-editor-samples inputs=\"url.samples[editor.formatParams.type]\"></field-format-editor-samples>\r\n"

/***/ },
/* 986 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(987);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function BytesFormatProvider(Private) {
	    var Numeral = Private(__webpack_require__(987));
	    return Numeral.factory({
	      id: 'bytes',
	      title: 'Bytes',
	      sampleInputs: [1024, 5150000, 1990000000]
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 987 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(854);
	__webpack_require__(988);
	__webpack_require__(990);
	__webpack_require__(991);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function AbstractNumeralFormatProvider(Private) {
	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));
	    var BoundToConfigObj = Private(__webpack_require__(854));
	    var numeral = __webpack_require__(988)();
	    __webpack_require__(990);

	    _['class'](Numeral).inherits(FieldFormat);
	    function Numeral(params) {
	      Numeral.Super.call(this, params);
	    }

	    Numeral.prototype._convert = function (val) {
	      if (val === -Infinity) return '-∞';
	      if (val === +Infinity) return '+∞';
	      if (typeof val !== 'number') {
	        val = parseFloat(val);
	      }

	      if (isNaN(val)) return '';

	      return numeral.set(val).format(this.param('pattern'));
	    };

	    Numeral.factory = function (opts) {
	      _['class'](Class).inherits(Numeral);
	      function Class(params) {
	        Class.Super.call(this, params);
	      }

	      Class.id = opts.id;
	      Class.title = opts.title;
	      Class.fieldType = 'number';

	      Class.paramDefaults = opts.paramDefaults || new BoundToConfigObj({
	        pattern: '=format:' + opts.id + ':defaultPattern'
	      });

	      Class.editor = {
	        template: opts.editorTemplate || __webpack_require__(991),
	        controllerAs: 'cntrl',
	        controller: opts.controller || function () {
	          this.sampleInputs = opts.sampleInputs;
	        }
	      };

	      if (opts.prototype) {
	        _.assign(Class.prototype, opts.prototype);
	      }

	      return Class;
	    };

	    return Numeral;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 988 */,
/* 989 */,
/* 990 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(973);
	__webpack_require__(215);
	__webpack_require__(991);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(973);

	  __webpack_require__(215).get('kibana').directive('fieldEditorNumeral', function () {
	    return {
	      restrict: 'E',
	      template: __webpack_require__(991)
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 991 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <small class=\"pull-right\">\r\n    <a ng-href=\"https://adamwdraper.github.io/Numeral-js/\" target=\"_blank\">\r\n      Docs <i class=\"fa fa-link\"></i>\r\n    </a>\r\n  </small>\r\n\r\n  <label>\r\n    Numeral.js format pattern\r\n    <small>\r\n      (Default: \"{{ editor.field.format.type.paramDefaults.pattern }}\")\r\n    </small>\r\n  </label>\r\n</div>\r\n\r\n<field-format-editor-pattern\r\n  ng-model=\"editor.formatParams.pattern\"\r\n  placeholder=\"editor.field.format.type.paramDefaults.pattern\"\r\n  inputs=\"cntrl.sampleInputs\">\r\n</field-format-editor-pattern>\r\n\r\n"

/***/ },
/* 992 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(854);
	__webpack_require__(243);
	__webpack_require__(973);
	__webpack_require__(993);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function DateTimeFormatProvider(Private) {
	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));
	    var BoundToConfigObj = Private(__webpack_require__(854));
	    var moment = __webpack_require__(243);

	    __webpack_require__(973);

	    _['class'](DateTime).inherits(FieldFormat);
	    function DateTime(params) {
	      DateTime.Super.call(this, params);
	    }

	    DateTime.id = 'date';
	    DateTime.title = 'Date';
	    DateTime.fieldType = 'date';

	    DateTime.paramDefaults = new BoundToConfigObj({
	      pattern: '=dateFormat',
	      timezone: '=dateFormat:tz'
	    });

	    DateTime.editor = {
	      template: __webpack_require__(993),
	      controllerAs: 'cntrl',
	      controller: function controller($interval, $scope) {
	        var self = this;
	        self.sampleInputs = [Date.now(), +moment().startOf('year'), +moment().endOf('year')];

	        $scope.$on('$destroy', $interval(function () {
	          self.sampleInputs[0] = Date.now();
	        }, 1000));
	      }
	    };

	    DateTime.prototype._convert = function (val) {
	      // don't give away our ref to converter so
	      // we can hot-swap when config changes
	      var pattern = this.param('pattern');
	      var timezone = this.param('timezone');

	      var timezoneChanged = this._timeZone !== timezone;
	      var datePatternChanged = this._memoizedPattern !== pattern;
	      if (timezoneChanged || datePatternChanged) {
	        this._timeZone = timezone;
	        this._memoizedPattern = pattern;

	        this._memoizedConverter = _.memoize(function converter(val) {
	          if (val === null || val === undefined) {
	            return '-';
	          }
	          return moment(val).format(pattern);
	        });
	      }

	      return this._memoizedConverter(val);
	    };

	    return DateTime;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 993 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <small class=\"pull-right\">\r\n    <a ng-href=\"http://momentjs.com/\" target=\"_blank\">\r\n      Docs <i class=\"fa fa-link\"></i>\r\n    </a>\r\n  </small>\r\n\r\n  <label>\r\n    moment.js format pattern\r\n    <small>\r\n      (Default: \"{{ editor.field.format.type.paramDefaults.pattern }}\")\r\n    </small>\r\n  </label>\r\n\r\n  <field-format-editor-pattern\r\n    ng-model=\"editor.formatParams.pattern\"\r\n    inputs=\"cntrl.sampleInputs\"\r\n  ></field-format-editor-pattern>\r\n\r\n</div>\r\n"

/***/ },
/* 994 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function IpFormatProvider(Private) {
	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));

	    _['class'](Ip).inherits(FieldFormat);
	    function Ip(params) {
	      Ip.Super.call(this, params);
	    }

	    Ip.id = 'ip';
	    Ip.title = 'IP Address';
	    Ip.fieldType = 'ip';

	    Ip.prototype._convert = function (val) {
	      if (val === undefined || val === null) return '-';
	      if (!isFinite(val)) return val;

	      // shazzam!
	      return [val >>> 24, val >>> 16 & 0xFF, val >>> 8 & 0xFF, val & 0xFF].join('.');
	    };

	    return Ip;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 995 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(987);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function NumberFormatProvider(Private) {
	    var Numeral = Private(__webpack_require__(987));
	    return Numeral.factory({
	      id: 'number',
	      title: 'Number',
	      sampleInputs: [10000, 12.345678, -1, -999, 0.52]
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 996 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(854);
	__webpack_require__(987);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function NumberFormatProvider(Private) {
	    var _ = __webpack_require__(194);
	    var BoundToConfigObj = Private(__webpack_require__(854));
	    var Numeral = Private(__webpack_require__(987));

	    return Numeral.factory({
	      id: 'percent',
	      title: 'Percentage',
	      paramDefaults: new BoundToConfigObj({
	        pattern: '=format:percent:defaultPattern',
	        fractional: true
	      }),
	      sampleInputs: [0.10, 0.99999, 1, 100, 1000],
	      prototype: {
	        _convert: _.compose(Numeral.prototype._convert, function (val) {
	          return this.param('fractional') ? val : val / 100;
	        })
	      }
	    });
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 997 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(974);
	__webpack_require__(998);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function _StringProvider(Private) {
	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));

	    __webpack_require__(974);

	    _['class'](_String).inherits(FieldFormat);
	    function _String(params) {
	      _String.Super.call(this, params);
	    }

	    _String.id = 'string';
	    _String.title = 'String';
	    _String.fieldType = ['number', 'boolean', 'date', 'ip', 'attachment', 'geo_point', 'geo_shape', 'string', 'murmur3', 'unknown', 'conflict'];

	    _String.paramDefaults = {
	      transform: false
	    };

	    _String.editor = __webpack_require__(998);

	    _String.transformOpts = [{ id: false, name: '- none -' }, { id: 'lower', name: 'Lower Case' }, { id: 'upper', name: 'Upper Case' }, { id: 'short', name: 'Short Dots' }, { id: 'base64', name: 'Base64 Decode' }];

	    _String.sampleInputs = ['A Quick Brown Fox.', 'com.organizations.project.ClassName', 'hostname.net', 'SGVsbG8gd29ybGQ='];

	    _String.prototype._base64Decode = function (val) {
	      try {
	        return window.atob(val);
	      } catch (e) {
	        return _.asPrettyString(val);
	      }
	    };

	    _String.prototype._convert = function (val) {
	      switch (this.param('transform')) {
	        case 'lower':
	          return String(val).toLowerCase();
	        case 'upper':
	          return String(val).toUpperCase();
	        case 'short':
	          return _.shortenDottedString(val);
	        case 'base64':
	          return this._base64Decode(val);
	        default:
	          return _.asPrettyString(val);
	      }
	    };

	    return _String;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 998 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <label>Transform</label>\r\n  <select\r\n    ng-model=\"editor.formatParams.transform\"\r\n    ng-options=\"opt.id as opt.name for opt in editor.field.format.type.transformOpts\"\r\n    class=\"form-control\">\r\n  </select>\r\n</div>\r\n\r\n<field-format-editor-samples inputs=\"editor.field.format.type.sampleInputs\"></field-format-editor-samples>\r\n"

/***/ },
/* 999 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(1000);
	__webpack_require__(1001);
	__webpack_require__(212);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function _SourceProvider(Private, shortDotsFilter) {
	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));
	    var noWhiteSpace = __webpack_require__(1000);
	    var template = _.template(noWhiteSpace(__webpack_require__(1001)));
	    var angular = __webpack_require__(212);

	    _['class'](Source).inherits(FieldFormat);
	    function Source(params) {
	      Source.Super.call(this, params);
	    }

	    Source.id = '_source';
	    Source.title = '_source';
	    Source.fieldType = '_source';

	    Source.prototype._convert = {
	      text: angular.toJson,
	      html: function sourceToHtml(source, field, hit) {
	        if (!field) return this.getConverter('text')(source, field, hit);

	        var highlights = hit && hit.highlight || {};
	        var formatted = field.indexPattern.formatHit(hit);
	        var highlightPairs = [];
	        var sourcePairs = [];

	        _.keys(formatted).forEach(function (key) {
	          var pairs = highlights[key] ? highlightPairs : sourcePairs;
	          var field = shortDotsFilter(key);
	          var val = formatted[key];
	          pairs.push([field, val]);
	        }, []);

	        return template({ defPairs: highlightPairs.concat(sourcePairs) });
	      }
	    };

	    return Source;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1000 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var TAGS_WITH_WS = />\s+</g;

	  /**
	   * Remove all of the whitespace between html tags
	   * so that inline elements don't have extra spaces.
	   *
	   * If you have inline elements (span, a, em, etc.) and any
	   * amount of whitespace around them in your markup, then the
	   * browser will push them appart. This is ugly in certain
	   * senarios and is only fixed by removing the whitespace
	   * from the html in the first place (or ugly css hacks).
	   *
	   * @param  {string} html - the html to modify
	   * @return {string} - modified html
	   */
	  return function noWhiteSpace(html) {
	    return html.replace(TAGS_WITH_WS, '><');
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1001 */
/***/ function(module, exports) {

	module.exports = "<dl class=\"source truncate-by-height\">\r\n  <% defPairs.forEach(function (def) { %>\r\n    <dt><%- def[0] %>:</dt>\r\n    <dd><%= def[1] %></dd>\r\n    <%= ' ' %>\r\n  <% }); %>\r\n</dl>\r\n"

/***/ },
/* 1002 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(1003);
	__webpack_require__(1007);
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(1008);

	'use strict';

	var _slicedToArray = __webpack_require__(1003)['default'];

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  return function _StringProvider(Private) {
	    __webpack_require__(1007);

	    var _ = __webpack_require__(194);
	    var FieldFormat = Private(__webpack_require__(901));
	    var DEFAULT_COLOR = {
	      range: Number.NEGATIVE_INFINITY + ':' + Number.POSITIVE_INFINITY,
	      text: '#000000',
	      background: '#ffffff'
	    };

	    _['class'](_Color).inherits(FieldFormat);
	    function _Color(params) {
	      _Color.Super.call(this, params);
	    }

	    _Color.id = 'color';
	    _Color.title = 'Color';
	    _Color.fieldType = ['number'];

	    _Color.editor = {
	      template: __webpack_require__(1008),
	      controller: function controller($scope) {
	        $scope.addColor = function () {
	          $scope.editor.formatParams.colors.push(_.cloneDeep(DEFAULT_COLOR));
	        };

	        $scope.removeColor = function (index) {
	          $scope.editor.formatParams.colors.splice(index, 1);
	        };
	      }
	    };

	    _Color.paramDefaults = {
	      colors: [_.cloneDeep(DEFAULT_COLOR)]
	    };

	    _Color.prototype._convert = {
	      html: function html(val) {
	        var color = _.findLast(this.param('colors'), function (_ref) {
	          var range = _ref.range;

	          if (!range) return;

	          var _range$split = range.split(':');

	          var _range$split2 = _slicedToArray(_range$split, 2);

	          var start = _range$split2[0];
	          var end = _range$split2[1];

	          return val >= Number(start) && val <= Number(end);
	        });

	        if (!color) return _.asPrettyString(val);

	        var styleColor = color.text ? 'color: ' + color.text + ';' : '';
	        var styleBackgroundColor = color.background ? 'background-color: ' + color.background + ';' : '';
	        return '<span style="' + styleColor + styleBackgroundColor + '">' + _.escape(val) + '</span>';
	      }
	    };

	    return _Color;
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1003 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(283)["default"];

	var _isIterable = __webpack_require__(1004)["default"];

	exports["default"] = (function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (_isIterable(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	})();

	exports.__esModule = true;

/***/ },
/* 1004 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(1005), __esModule: true };

/***/ },
/* 1005 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(285);
	__webpack_require__(303);
	module.exports = __webpack_require__(1006);

/***/ },
/* 1006 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(309)
	  , ITERATOR  = __webpack_require__(300)('iterator')
	  , Iterators = __webpack_require__(289);
	module.exports = __webpack_require__(224).isIterable = function(it){
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    || Iterators.hasOwnProperty(classof(O));
	};

/***/ },
/* 1007 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 1008 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <div ng-repeat=\"color in editor.formatParams.colors\">\r\n    <div class=\"editor-color\">\r\n      <button ng-if=\"editor.formatParams.colors.length > 1\" aria-label=\"Remove Color\" ng-click=\"removeColor($index)\" tooltip=\"Remove Color\" tooltip-append-to-body=\"true\" type=\"button\" class=\"btn btn-xs btn-danger editor-color-remove\">\r\n        <i aria-hidden=\"true\" class=\"fa fa-times\"></i>\r\n      </button>\r\n      <div class=\"form-group\">\r\n        <label>Range\r\n          <small>\r\n            (min:max)\r\n          </small>\r\n      </label>\r\n        <input\r\n          ng-model=\"color.range\"\r\n          class=\"form-control\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Font Color</label>\r\n        <input\r\n          ng-model=\"color.text\"\r\n          colorpicker\r\n          type=\"text\"\r\n          class=\"form-control\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Background Color</label>\r\n        <input\r\n          ng-model=\"color.background\"\r\n          colorpicker\r\n          type=\"text\"\r\n          class=\"form-control\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Example</label>\r\n          <div class=\"form-control\"\r\n            ng-style=\"{color: color.text, 'background-color': color.background}\"\r\n            value=\"formatted\">\r\n            123456\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <hr>\r\n  </div>\r\n\r\n  <button aria-label=\"Add Color\" ng-click=\"addColor()\" tooltip=\"Add Color\" tooltip-append-to-body=\"true\" type=\"button\" class=\"btn btn-primary btn-xs\">\r\n      <span class=\"sr-only\">Add Color</span>\r\n      <i aria-hidden=\"true\" class=\"fa fa-plus\"></i> Add Color\r\n  </button>\r\n\r\n</div>\r\n"

/***/ },
/* 1009 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(901);
	__webpack_require__(1010);
	__webpack_require__(1011);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    return function TruncateFormatProvider(Private) {
	        var _ = __webpack_require__(194);
	        var FieldFormat = Private(__webpack_require__(901));
	        var omission = '...';

	        _['class'](Truncate).inherits(FieldFormat);

	        function Truncate(params) {
	            Truncate.Super.call(this, params);
	        }

	        Truncate.id = 'truncate';
	        Truncate.title = 'Truncated String';
	        Truncate.fieldType = ['string'];

	        Truncate.prototype._convert = function (val) {
	            var length = this.param('fieldLength');
	            if (length > 0) {
	                return _.trunc(val, {
	                    'length': length + omission.length,
	                    'omission': omission
	                });
	            }

	            return val;
	        };

	        Truncate.editor = __webpack_require__(1010);

	        Truncate.sampleInput = [__webpack_require__(1011)];

	        return Truncate;
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1010 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\">\r\n  <label>Field Length</label>\r\n  <input ng-model=\"editor.formatParams.fieldLength\" class=\"form-control\">\r\n</div>\r\n\r\n<field-format-editor-samples inputs=\"editor.field.format.type.sampleInput\"></field-format-editor-samples>\r\n"

/***/ },
/* 1011 */
/***/ function(module, exports) {

	module.exports = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vitae sem consequat, sollicitudin enim a, feugiat mi. Curabitur congue laoreet elit, eu dictum nisi commodo ut. Nullam congue sem a blandit commodo. Suspendisse eleifend sodales leo ac hendrerit. Nam fringilla tempor fermentum. Ut tristique pharetra sapien sit amet pharetra. Ut turpis massa, viverra id erat quis, fringilla vehicula risus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus tincidunt gravida gravida. Praesent et ligula viverra, semper lacus in, tristique elit. Cras ac eleifend diam. Nulla facilisi. Morbi id sagittis magna. Sed fringilla, magna in suscipit aliquet."

/***/ },
/* 1012 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(208);
	__webpack_require__(855);
	__webpack_require__(215);
	__webpack_require__(1013);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var $ = __webpack_require__(208);
	  var $style = $('<style>').appendTo('head').attr('id', 'style-compile');

	  __webpack_require__(855);

	  __webpack_require__(215).get('kibana').run(function ($rootScope, $compile, config) {
	    var truncateGradientHeight = 15;
	    var template = _.template(__webpack_require__(1013));
	    var locals = {};

	    // watch the value of the truncate:maxHeight config param
	    $rootScope.$watch(function () {
	      return config.get('truncate:maxHeight');
	    }, function (maxHeight) {
	      if (maxHeight > 0) {
	        locals.truncateMaxHeight = maxHeight + 'px !important';
	        locals.truncateGradientTop = maxHeight - truncateGradientHeight + 'px';
	      } else {
	        locals.truncateMaxHeight = 'none';
	        locals.truncateGradientTop = '-' + truncateGradientHeight + 'px';
	      }

	      $style.html(template(locals));
	    });
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1013 */
/***/ function(module, exports) {

	module.exports = ".truncate-by-height {\r\n  max-height: <%= truncateMaxHeight %>;\r\n  display: inline-block;\r\n}\r\n.truncate-by-height:before {\r\n  top: <%= truncateGradientTop %>;\r\n}\r\n"

/***/ },
/* 1014 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(1015);
	__webpack_require__(215);
	__webpack_require__(194);
	__webpack_require__(245);
	__webpack_require__(243);
	__webpack_require__(791);
	__webpack_require__(787);
	__webpack_require__(799);
	__webpack_require__(1016);
	__webpack_require__(800);
	__webpack_require__(1017);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var html = __webpack_require__(1015);
	  var module = __webpack_require__(215).get('ui/timepicker');
	  var _ = __webpack_require__(194);
	  var dateMath = __webpack_require__(245);
	  var moment = __webpack_require__(243);

	  __webpack_require__(791);
	  __webpack_require__(787);
	  __webpack_require__(799);
	  __webpack_require__(1016);
	  __webpack_require__(800);
	  __webpack_require__(1017);

	  module.directive('kbnTimepicker', function (quickRanges, timeUnits, refreshIntervals) {
	    return {
	      restrict: 'E',
	      scope: {
	        from: '=',
	        to: '=',
	        mode: '=',
	        interval: '=',
	        activeTab: '='
	      },
	      template: html,
	      controller: function controller($scope) {
	        var init = function init() {
	          $scope.setMode($scope.mode);
	        };

	        $scope.format = 'MMMM Do YYYY, HH:mm:ss.SSS';
	        $scope.modes = ['quick', 'relative', 'absolute'];
	        $scope.activeTab = $scope.activeTab || 'filter';

	        if (_.isUndefined($scope.mode)) $scope.mode = 'quick';

	        $scope.quickLists = _(quickRanges).groupBy('section').values().value();
	        $scope.refreshLists = _(refreshIntervals).groupBy('section').values().value();

	        $scope.relative = {
	          count: 1,
	          unit: 'm',
	          preview: undefined,
	          round: false
	        };

	        $scope.absolute = {
	          from: moment(),
	          to: moment()
	        };

	        $scope.units = timeUnits;

	        $scope.relativeOptions = [{ text: 'Seconds ago', value: 's' }, { text: 'Minutes ago', value: 'm' }, { text: 'Hours ago', value: 'h' }, { text: 'Days ago', value: 'd' }, { text: 'Weeks ago', value: 'w' }, { text: 'Months ago', value: 'M' }, { text: 'Years ago', value: 'y' }];

	        $scope.$watch('absolute.from', function (date) {
	          if (_.isDate(date)) $scope.absolute.from = moment(date);
	        });

	        $scope.$watch('absolute.to', function (date) {
	          if (_.isDate(date)) $scope.absolute.to = moment(date);
	        });

	        $scope.setMode = function (thisMode) {
	          switch (thisMode) {
	            case 'quick':
	              break;
	            case 'relative':
	              var fromParts = $scope.from.toString().split('-');
	              var relativeParts = [];

	              // Try to parse the relative time, if we can't use moment duration to guestimate
	              if ($scope.to.toString() === 'now' && fromParts[0] === 'now' && fromParts[1]) {
	                relativeParts = fromParts[1].match(/([0-9]+)([smhdwMy]).*/);
	              }
	              if (relativeParts[1] && relativeParts[2]) {
	                $scope.relative.count = parseInt(relativeParts[1], 10);
	                $scope.relative.unit = relativeParts[2];
	              } else {
	                var duration = moment.duration(moment().diff(dateMath.parse($scope.from)));
	                var units = _.pluck(_.clone($scope.relativeOptions).reverse(), 'value');
	                if ($scope.from.toString().split('/')[1]) $scope.relative.round = true;
	                for (var i = 0; i < units.length; i++) {
	                  var as = duration.as(units[i]);
	                  if (as > 1) {
	                    $scope.relative.count = Math.round(as);
	                    $scope.relative.unit = units[i];
	                    break;
	                  }
	                }
	              }

	              if ($scope.from.toString().split('/')[1]) $scope.relative.round = true;
	              $scope.formatRelative();

	              break;
	            case 'absolute':
	              $scope.absolute.from = dateMath.parse($scope.from || moment().subtract('minutes', 15));
	              $scope.absolute.to = dateMath.parse($scope.to || moment(), true);
	              break;
	          }

	          $scope.mode = thisMode;
	        };

	        $scope.setQuick = function (from, to, description) {
	          $scope.from = from;
	          $scope.to = to;
	        };

	        $scope.setToNow = function () {
	          $scope.absolute.to = moment();
	        };

	        $scope.formatRelative = function () {
	          var parsed = dateMath.parse(getRelativeString());
	          $scope.relative.preview = parsed ? parsed.format($scope.format) : undefined;
	          return parsed;
	        };

	        $scope.applyRelative = function () {
	          $scope.from = getRelativeString();
	          $scope.to = 'now';
	        };

	        function getRelativeString() {
	          return 'now-' + $scope.relative.count + $scope.relative.unit + ($scope.relative.round ? '/' + $scope.relative.unit : '');
	        }

	        $scope.applyAbsolute = function () {
	          $scope.from = moment($scope.absolute.from);
	          $scope.to = moment($scope.absolute.to);
	        };

	        $scope.setRefreshInterval = function (interval) {
	          interval = _.clone(interval);
	          console.log('before: ' + interval.pause);
	          interval.pause = interval.pause == null || interval.pause === false ? false : true;

	          console.log('after: ' + interval.pause);
	          $scope.interval = interval;
	        };

	        init();
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1015 */
/***/ function(module, exports) {

	module.exports = "<div class=\"kbn-timepicker\">\r\n  <style>\r\n    .kbn-timepicker [kbn-time-input] {\r\n      text-align: center;\r\n    }\r\n    .kbn-timepicker-modes {\r\n      text-transform: capitalize;\r\n    }\r\n    .kbn-timepicker-section {\r\n      float: left;\r\n      padding: 0px 15px;\r\n    }\r\n    .kbn-refresh-section {\r\n      float: left;\r\n      padding: 0px 15px;\r\n    }\r\n    .kbn-timepicket-alert {\r\n      width: 100px;\r\n    }\r\n  </style>\r\n\r\n  <div class=\"tab-content\">\r\n\r\n    <!-- Filters -->\r\n    <div ng-show=\"activeTab === 'filter'\" role=\"tabpanel\" class=\"tab-pane active\">\r\n      <br>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-2\">\r\n          <ul class=\"nav nav-pills nav-stacked kbn-timepicker-modes\">\r\n            <li ng-class=\"{active: mode === 'quick' }\">\r\n              <a ng-click=\"setMode('quick')\">quick</a>\r\n            </li>\r\n            <li ng-class=\"{active: mode === 'relative' }\">\r\n              <a ng-click=\"setMode('relative')\">relative</a>\r\n            </li>\r\n            <li ng-class=\"{active: mode === 'absolute' }\">\r\n              <a ng-click=\"setMode('absolute')\">absolute</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"col-md-10\">\r\n          <div ng-switch on=\"mode\" class=\"container-fluid\">\r\n            <div ng-switch-when=\"quick\">\r\n\r\n              <div ng-repeat=\"list in quickLists\" class=\"kbn-timepicker-section\">\r\n                <ul class=\"list-unstyled\">\r\n                  <li ng-repeat=\"option in list\">\r\n                    <a ng-click=\"setQuick(option.from, option.to)\" ng-bind=\"::option.display\"></a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <!-- TODO: Add a section for custom intervals -->\r\n            </div>\r\n\r\n            <div ng-switch-when=\"relative\">\r\n              <form role=\"form\" ng-submit=\"applyRelative()\" class=\"form-inline\" name=\"relativeTime\">\r\n                <div class=\"kbn-timepicker-section\">\r\n                  <label>\r\n                    From:\r\n                    <span ng-show=\"relative.preview\">{{relative.preview}}</span>\r\n                    <span ng-hide=\"relative.preview\"><i>Invalid Expression</i></span>\r\n                  </label>\r\n                  <br>\r\n                  <div class=\"form-group\">\r\n                    <input\r\n                      required\r\n                      ng-model=\"relative.count\"\r\n                      ng-change=\"formatRelative()\"\r\n                      greater-than=\"-1\"\r\n                      type=\"number\"\r\n                      class=\"form-control\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <select\r\n                      ng-model=\"relative.unit\"\r\n                      ng-options=\"opt.value as opt.text for opt in relativeOptions\"\r\n                      ng-change=\"formatRelative()\"\r\n                      class=\"form-control col-xs-2\">\r\n                    </select>\r\n                  </div>\r\n                  <br>\r\n                  <div class=\"small\">\r\n                    <label>\r\n                      <input\r\n                        ng-model=\"relative.round\"\r\n                        ng-checked=\"relative.round\"\r\n                        ng-change=\"formatRelative()\"\r\n                        type=\"checkbox\">\r\n                      round to the {{units[relative.unit]}}\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"kbn-timepicker-section\">\r\n                  <label>\r\n                    To: Now\r\n                  </label>\r\n                  <br>\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" disabled class=\"form-control\" value=\"Now\">\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"kbn-timepicker-section\">\r\n                  <label>&nbsp;</label>\r\n                  <br>\r\n                  <div class=\"form-group\">\r\n                    <button type=\"submit\" class=\"btn btn-primary kbn-timepicker-go\" ng-disabled=\"!relative.preview\">\r\n                      Go\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <div ng-switch-when=\"absolute\">\r\n              <form name=\"absoluteTime\" ng-submit=\"applyAbsolute()\">\r\n                <div class=\"kbn-timepicker-section\">\r\n                  <div>\r\n                    <label class=\"small\">From: <span ng-show=\"!absolute.from\"><i>Invalid Date</i></span>\r\n                    </label>\r\n                    <input type=\"text\" required class=\"form-control\" input-datetime=\"{{format}}\" ng-model=\"absolute.from\">\r\n                  </div>\r\n                  <div>\r\n                    <datepicker ng-model=\"absolute.from\" max-date=\"absolute.to\" show-weeks=\"false\"></datepicker>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"kbn-timepicker-section\">\r\n                  <div>\r\n                    <label class=\"small\">To:\r\n                      <a class=\"label label-default\" ng-click=\"setToNow()\">Set To Now</a>\r\n                    </label>\r\n                    <span ng-show=\"!absolute.to\"><i>Invalid Date</i></span>\r\n                    <input type=\"text\" required class=\"form-control\" input-datetime=\"{{format}}\" ng-model=\"absolute.to\">\r\n                  </div>\r\n                  <div>\r\n                    <datepicker ng-model=\"absolute.to\" min-date=\"absolute.from\" show-weeks=\"false\"></datepicker>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"kbn-timepicker-section kbn-timepicker-alert\">\r\n                  <label>&nbsp;</label>\r\n                  <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary kbn-timepicker-go\" ng-disabled=\"absolute.from > absolute.to || !absolute.from || !absolute.to\" type=\"submit\">\r\n                      Go\r\n                    </button>\r\n                    <span class=\"small\" ng-show=\"absolute.from > absolute.to\"><strong>From</strong> must occur before <strong>To</strong></span>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Refresh Intervals -->\r\n    <div ng-show=\"activeTab === 'interval'\" role=\"tabpanel\" class=\"tab-pane active\">\r\n      <br>\r\n      <div ng-repeat=\"list in refreshLists\" class=\"kbn-refresh-section\">\r\n        <ul class=\"list-unstyled\">\r\n          <li ng-repeat=\"inter in list\">\r\n            <a class=\"refresh-interval\" ng-class=\"{ 'refresh-interval-active': interval.value === inter.value }\" ng-click=\"setRefreshInterval(inter)\">\r\n              {{inter.display}}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ },
/* 1016 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var module = __webpack_require__(215).get('kibana');

	  module.constant('refreshIntervals', [{ value: 0, display: 'Off', section: 0 }, { value: 5000, display: '5 seconds', section: 1 }, { value: 10000, display: '10 seconds', section: 1 }, { value: 30000, display: '30 seconds', section: 1 }, { value: 45000, display: '45 seconds', section: 1 }, { value: 60000, display: '1 minute', section: 2 }, { value: 300000, display: '5 minutes', section: 2 }, { value: 900000, display: '15 minutes', section: 2 }, { value: 1800000, display: '30 minutes', section: 2 }, { value: 3600000, display: '1 hour', section: 3 }, { value: 7200000, display: '2 hour', section: 3 }, { value: 43200000, display: '12 hour', section: 3 }, { value: 86400000, display: '1 day', section: 3 }]);
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1017 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(281)['default'];

	var _uiModules = __webpack_require__(215);

	var _uiModules2 = _interopRequireDefault(_uiModules);

	var _uiRegistryChrome_nav_controls = __webpack_require__(335);

	var _uiRegistryChrome_nav_controls2 = _interopRequireDefault(_uiRegistryChrome_nav_controls);

	var _toggleHtml = __webpack_require__(1018);

	var _toggleHtml2 = _interopRequireDefault(_toggleHtml);

	// TODO: the chrome-context directive is currently responsible for several variables
	// on scope used by this template. We need to get rid of that directive and move that
	// logic here

	_uiRegistryChrome_nav_controls2['default'].register(function () {
	  return {
	    name: 'timepicker toggle',
	    order: 100,
	    template: _toggleHtml2['default']
	  };
	});

/***/ },
/* 1018 */
/***/ function(module, exports) {

	module.exports = "<ul ng-show=\"timefilter.enabled\" class=\"nav navbar-nav navbar-right navbar-timepicker\">\r\n  <li>\r\n    <a\r\n      ng-click=\"toggleRefresh()\"\r\n      ng-show=\"timefilter.refreshInterval.value > 0\">\r\n\r\n      <i class=\"fa\" ng-class=\"timefilter.refreshInterval.pause ? 'fa-play' : 'fa-pause'\"></i>\r\n    </a>\r\n  </li>\r\n\r\n  <li\r\n    ng-class=\"{active: pickerTemplate.is('interval') }\"\r\n    ng-show=\"timefilter.refreshInterval.value > 0 || !!pickerTemplate.current\"\r\n    class=\"to-body\">\r\n\r\n    <a ng-click=\"pickerTemplate.toggle('interval')\" class=\"navbar-timepicker-auto-refresh-desc\">\r\n      <span ng-show=\"timefilter.refreshInterval.value === 0\"><i class=\"fa fa-repeat\"></i> Auto-refresh</span>\r\n      <span ng-show=\"timefilter.refreshInterval.value > 0\">{{timefilter.refreshInterval.display}}</span>\r\n    </a>\r\n\r\n  </li>\r\n\r\n  <li class=\"to-body\" ng-class=\"{active: pickerTemplate.is('filter')}\">\r\n    <a\r\n      ng-click=\"pickerTemplate.toggle('filter')\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded=\"false\"\r\n      class=\"navbar-timepicker-time-desc\">\r\n      <i aria-hidden=\"true\" class=\"fa fa-clock-o\"></i>\r\n      <pretty-duration from=\"timefilter.time.from\" to=\"timefilter.time.to\"></pretty-duration>\r\n    </a>\r\n  </li>\r\n</ul>\r\n"

/***/ },
/* 1019 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(1020);
	__webpack_require__(1021);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var html = __webpack_require__(1020);

	  __webpack_require__(1021).config(function ($tooltipProvider) {
	    $tooltipProvider.options({
	      placement: 'bottom',
	      animation: true,
	      popupDelay: 150,
	      appendToBody: false
	    });
	  }).directive('kbnTooltip', function () {
	    return {
	      restrict: 'E',
	      template: html,
	      transclude: true,
	      replace: true,
	      scope: true,
	      link: function link($scope, $el, attr) {
	        $scope.text = attr.text;
	        $scope.placement = attr.placement || 'top';
	        $scope.delay = attr.delay || 400;
	        $scope.appendToBody = attr.appendToBody || 0;
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1020 */
/***/ function(module, exports) {

	module.exports = "<span\r\n  tooltip=\"{{text}}\"\r\n  tooltip-placement=\"{{placement}}\"\r\n  tooltip-popup-delay=\"{{delay}}\"\r\n  tooltip-append-to-body=\"{{appendToBody}}\"\r\n  ng-transclude></span>"

/***/ },
/* 1021 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  __webpack_require__(212);
	  __webpack_require__(1022);

	  return __webpack_require__(215)
	  .get('kibana', ['ui.bootstrap'])
	  .config(function ($tooltipProvider) {
	    $tooltipProvider.setTriggers({ 'mouseenter': 'mouseleave click' });
	  });

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1022 */
/***/ function(module, exports) {

	/*
	 * angular-ui-bootstrap
	 * http://angular-ui.github.io/bootstrap/

	 * Version: 0.12.1 - 2015-02-20
	 * License: MIT
	 */
	angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
	angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]);
	angular.module('ui.bootstrap.transition', [])

	/**
	 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
	 * @param  {DOMElement} element  The DOMElement that will be animated.
	 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
	 *   - As a string, it represents the css class to be added to the element.
	 *   - As an object, it represents a hash of style attributes to be applied to the element.
	 *   - As a function, it represents a function to be called that will cause the transition to occur.
	 * @return {Promise}  A promise that is resolved when the transition finishes.
	 */
	.factory('$transition', ['$q', '$timeout', '$rootScope', function($q, $timeout, $rootScope) {

	  var $transition = function(element, trigger, options) {
	    options = options || {};
	    var deferred = $q.defer();
	    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

	    var transitionEndHandler = function(event) {
	      $rootScope.$apply(function() {
	        element.unbind(endEventName, transitionEndHandler);
	        deferred.resolve(element);
	      });
	    };

	    if (endEventName) {
	      element.bind(endEventName, transitionEndHandler);
	    }

	    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
	    $timeout(function() {
	      if ( angular.isString(trigger) ) {
	        element.addClass(trigger);
	      } else if ( angular.isFunction(trigger) ) {
	        trigger(element);
	      } else if ( angular.isObject(trigger) ) {
	        element.css(trigger);
	      }
	      //If browser does not support transitions, instantly resolve
	      if ( !endEventName ) {
	        deferred.resolve(element);
	      }
	    });

	    // Add our custom cancel function to the promise that is returned
	    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
	    // i.e. it will therefore never raise a transitionEnd event for that transition
	    deferred.promise.cancel = function() {
	      if ( endEventName ) {
	        element.unbind(endEventName, transitionEndHandler);
	      }
	      deferred.reject('Transition cancelled');
	    };

	    return deferred.promise;
	  };

	  // Work out the name of the transitionEnd event
	  var transElement = document.createElement('trans');
	  var transitionEndEventNames = {
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'transitionend',
	    'OTransition': 'oTransitionEnd',
	    'transition': 'transitionend'
	  };
	  var animationEndEventNames = {
	    'WebkitTransition': 'webkitAnimationEnd',
	    'MozTransition': 'animationend',
	    'OTransition': 'oAnimationEnd',
	    'transition': 'animationend'
	  };
	  function findEndEventName(endEventNames) {
	    for (var name in endEventNames){
	      if (transElement.style[name] !== undefined) {
	        return endEventNames[name];
	      }
	    }
	  }
	  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
	  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
	  return $transition;
	}]);

	angular.module('ui.bootstrap.collapse', ['ui.bootstrap.transition'])

	  .directive('collapse', ['$transition', function ($transition) {

	    return {
	      link: function (scope, element, attrs) {

	        var initialAnimSkip = true;
	        var currentTransition;

	        function doTransition(change) {
	          var newTransition = $transition(element, change);
	          if (currentTransition) {
	            currentTransition.cancel();
	          }
	          currentTransition = newTransition;
	          newTransition.then(newTransitionDone, newTransitionDone);
	          return newTransition;

	          function newTransitionDone() {
	            // Make sure it's this transition, otherwise, leave it alone.
	            if (currentTransition === newTransition) {
	              currentTransition = undefined;
	            }
	          }
	        }

	        function expand() {
	          if (initialAnimSkip) {
	            initialAnimSkip = false;
	            expandDone();
	          } else {
	            element.removeClass('collapse').addClass('collapsing');
	            doTransition({ height: element[0].scrollHeight + 'px' }).then(expandDone);
	          }
	        }

	        function expandDone() {
	          element.removeClass('collapsing');
	          element.addClass('collapse in');
	          element.css({height: 'auto'});
	        }

	        function collapse() {
	          if (initialAnimSkip) {
	            initialAnimSkip = false;
	            collapseDone();
	            element.css({height: 0});
	          } else {
	            // CSS transitions don't work with height: auto, so we have to manually change the height to a specific value
	            element.css({ height: element[0].scrollHeight + 'px' });
	            //trigger reflow so a browser realizes that height was updated from auto to a specific value
	            var x = element[0].offsetWidth;

	            element.removeClass('collapse in').addClass('collapsing');

	            doTransition({ height: 0 }).then(collapseDone);
	          }
	        }

	        function collapseDone() {
	          element.removeClass('collapsing');
	          element.addClass('collapse');
	        }

	        scope.$watch(attrs.collapse, function (shouldCollapse) {
	          if (shouldCollapse) {
	            collapse();
	          } else {
	            expand();
	          }
	        });
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

	.constant('accordionConfig', {
	  closeOthers: true
	})

	.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

	  // This array keeps track of the accordion groups
	  this.groups = [];

	  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
	  this.closeOthers = function(openGroup) {
	    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
	    if ( closeOthers ) {
	      angular.forEach(this.groups, function (group) {
	        if ( group !== openGroup ) {
	          group.isOpen = false;
	        }
	      });
	    }
	  };

	  // This is called from the accordion-group directive to add itself to the accordion
	  this.addGroup = function(groupScope) {
	    var that = this;
	    this.groups.push(groupScope);

	    groupScope.$on('$destroy', function (event) {
	      that.removeGroup(groupScope);
	    });
	  };

	  // This is called from the accordion-group directive when to remove itself
	  this.removeGroup = function(group) {
	    var index = this.groups.indexOf(group);
	    if ( index !== -1 ) {
	      this.groups.splice(index, 1);
	    }
	  };

	}])

	// The accordion directive simply sets up the directive controller
	// and adds an accordion CSS class to itself element.
	.directive('accordion', function () {
	  return {
	    restrict:'EA',
	    controller:'AccordionController',
	    transclude: true,
	    replace: false,
	    templateUrl: 'template/accordion/accordion.html'
	  };
	})

	// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
	.directive('accordionGroup', function() {
	  return {
	    require:'^accordion',         // We need this directive to be inside an accordion
	    restrict:'EA',
	    transclude:true,              // It transcludes the contents of the directive into the template
	    replace: true,                // The element containing the directive will be replaced with the template
	    templateUrl:'template/accordion/accordion-group.html',
	    scope: {
	      heading: '@',               // Interpolate the heading attribute onto this scope
	      isOpen: '=?',
	      isDisabled: '=?'
	    },
	    controller: function() {
	      this.setHeading = function(element) {
	        this.heading = element;
	      };
	    },
	    link: function(scope, element, attrs, accordionCtrl) {
	      accordionCtrl.addGroup(scope);

	      scope.$watch('isOpen', function(value) {
	        if ( value ) {
	          accordionCtrl.closeOthers(scope);
	        }
	      });

	      scope.toggleOpen = function() {
	        if ( !scope.isDisabled ) {
	          scope.isOpen = !scope.isOpen;
	        }
	      };
	    }
	  };
	})

	// Use accordion-heading below an accordion-group to provide a heading containing HTML
	// <accordion-group>
	//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
	// </accordion-group>
	.directive('accordionHeading', function() {
	  return {
	    restrict: 'EA',
	    transclude: true,   // Grab the contents to be used as the heading
	    template: '',       // In effect remove this element!
	    replace: true,
	    require: '^accordionGroup',
	    link: function(scope, element, attr, accordionGroupCtrl, transclude) {
	      // Pass the heading to the accordion-group controller
	      // so that it can be transcluded into the right place in the template
	      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
	      accordionGroupCtrl.setHeading(transclude(scope, function() {}));
	    }
	  };
	})

	// Use in the accordion-group template to indicate where you want the heading to be transcluded
	// You must provide the property on the accordion-group controller that will hold the transcluded element
	// <div class="accordion-group">
	//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
	//   ...
	// </div>
	.directive('accordionTransclude', function() {
	  return {
	    require: '^accordionGroup',
	    link: function(scope, element, attr, controller) {
	      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
	        if ( heading ) {
	          element.html('');
	          element.append(heading);
	        }
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.alert', [])

	.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {
	  $scope.closeable = 'close' in $attrs;
	  this.close = $scope.close;
	}])

	.directive('alert', function () {
	  return {
	    restrict:'EA',
	    controller:'AlertController',
	    templateUrl:'template/alert/alert.html',
	    transclude:true,
	    replace:true,
	    scope: {
	      type: '@',
	      close: '&'
	    }
	  };
	})

	.directive('dismissOnTimeout', ['$timeout', function($timeout) {
	  return {
	    require: 'alert',
	    link: function(scope, element, attrs, alertCtrl) {
	      $timeout(function(){
	        alertCtrl.close();
	      }, parseInt(attrs.dismissOnTimeout, 10));
	    }
	  };
	}]);

	angular.module('ui.bootstrap.bindHtml', [])

	  .directive('bindHtmlUnsafe', function () {
	    return function (scope, element, attr) {
	      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
	      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
	        element.html(value || '');
	      });
	    };
	  });
	angular.module('ui.bootstrap.buttons', [])

	.constant('buttonConfig', {
	  activeClass: 'active',
	  toggleEvent: 'click'
	})

	.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
	  this.activeClass = buttonConfig.activeClass || 'active';
	  this.toggleEvent = buttonConfig.toggleEvent || 'click';
	}])

	.directive('btnRadio', function () {
	  return {
	    require: ['btnRadio', 'ngModel'],
	    controller: 'ButtonsController',
	    link: function (scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      //model -> UI
	      ngModelCtrl.$render = function () {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
	      };

	      //ui->model
	      element.bind(buttonsCtrl.toggleEvent, function () {
	        var isActive = element.hasClass(buttonsCtrl.activeClass);

	        if (!isActive || angular.isDefined(attrs.uncheckable)) {
	          scope.$apply(function () {
	            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
	            ngModelCtrl.$render();
	          });
	        }
	      });
	    }
	  };
	})

	.directive('btnCheckbox', function () {
	  return {
	    require: ['btnCheckbox', 'ngModel'],
	    controller: 'ButtonsController',
	    link: function (scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      function getTrueValue() {
	        return getCheckboxValue(attrs.btnCheckboxTrue, true);
	      }

	      function getFalseValue() {
	        return getCheckboxValue(attrs.btnCheckboxFalse, false);
	      }

	      function getCheckboxValue(attributeValue, defaultValue) {
	        var val = scope.$eval(attributeValue);
	        return angular.isDefined(val) ? val : defaultValue;
	      }

	      //model -> UI
	      ngModelCtrl.$render = function () {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
	      };

	      //ui->model
	      element.bind(buttonsCtrl.toggleEvent, function () {
	        scope.$apply(function () {
	          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
	          ngModelCtrl.$render();
	        });
	      });
	    }
	  };
	});

	/**
	* @ngdoc overview
	* @name ui.bootstrap.carousel
	*
	* @description
	* AngularJS version of an image carousel.
	*
	*/
	angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition'])
	.controller('CarouselController', ['$scope', '$timeout', '$interval', '$transition', function ($scope, $timeout, $interval, $transition) {
	  var self = this,
	    slides = self.slides = $scope.slides = [],
	    currentIndex = -1,
	    currentInterval, isPlaying;
	  self.currentSlide = null;

	  var destroyed = false;
	  /* direction: "prev" or "next" */
	  self.select = $scope.select = function(nextSlide, direction) {
	    var nextIndex = slides.indexOf(nextSlide);
	    //Decide direction if it's not given
	    if (direction === undefined) {
	      direction = nextIndex > currentIndex ? 'next' : 'prev';
	    }
	    if (nextSlide && nextSlide !== self.currentSlide) {
	      if ($scope.$currentTransition) {
	        $scope.$currentTransition.cancel();
	        //Timeout so ng-class in template has time to fix classes for finished slide
	        $timeout(goNext);
	      } else {
	        goNext();
	      }
	    }
	    function goNext() {
	      // Scope has been destroyed, stop here.
	      if (destroyed) { return; }
	      //If we have a slide to transition from and we have a transition type and we're allowed, go
	      if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
	        //We shouldn't do class manip in here, but it's the same weird thing bootstrap does. need to fix sometime
	        nextSlide.$element.addClass(direction);
	        var reflow = nextSlide.$element[0].offsetWidth; //force reflow

	        //Set all other slides to stop doing their stuff for the new transition
	        angular.forEach(slides, function(slide) {
	          angular.extend(slide, {direction: '', entering: false, leaving: false, active: false});
	        });
	        angular.extend(nextSlide, {direction: direction, active: true, entering: true});
	        angular.extend(self.currentSlide||{}, {direction: direction, leaving: true});

	        $scope.$currentTransition = $transition(nextSlide.$element, {});
	        //We have to create new pointers inside a closure since next & current will change
	        (function(next,current) {
	          $scope.$currentTransition.then(
	            function(){ transitionDone(next, current); },
	            function(){ transitionDone(next, current); }
	          );
	        }(nextSlide, self.currentSlide));
	      } else {
	        transitionDone(nextSlide, self.currentSlide);
	      }
	      self.currentSlide = nextSlide;
	      currentIndex = nextIndex;
	      //every time you change slides, reset the timer
	      restartTimer();
	    }
	    function transitionDone(next, current) {
	      angular.extend(next, {direction: '', active: true, leaving: false, entering: false});
	      angular.extend(current||{}, {direction: '', active: false, leaving: false, entering: false});
	      $scope.$currentTransition = null;
	    }
	  };
	  $scope.$on('$destroy', function () {
	    destroyed = true;
	  });

	  /* Allow outside people to call indexOf on slides array */
	  self.indexOfSlide = function(slide) {
	    return slides.indexOf(slide);
	  };

	  $scope.next = function() {
	    var newIndex = (currentIndex + 1) % slides.length;

	    //Prevent this user-triggered transition from occurring if there is already one in progress
	    if (!$scope.$currentTransition) {
	      return self.select(slides[newIndex], 'next');
	    }
	  };

	  $scope.prev = function() {
	    var newIndex = currentIndex - 1 < 0 ? slides.length - 1 : currentIndex - 1;

	    //Prevent this user-triggered transition from occurring if there is already one in progress
	    if (!$scope.$currentTransition) {
	      return self.select(slides[newIndex], 'prev');
	    }
	  };

	  $scope.isActive = function(slide) {
	     return self.currentSlide === slide;
	  };

	  $scope.$watch('interval', restartTimer);
	  $scope.$on('$destroy', resetTimer);

	  function restartTimer() {
	    resetTimer();
	    var interval = +$scope.interval;
	    if (!isNaN(interval) && interval > 0) {
	      currentInterval = $interval(timerFn, interval);
	    }
	  }

	  function resetTimer() {
	    if (currentInterval) {
	      $interval.cancel(currentInterval);
	      currentInterval = null;
	    }
	  }

	  function timerFn() {
	    var interval = +$scope.interval;
	    if (isPlaying && !isNaN(interval) && interval > 0) {
	      $scope.next();
	    } else {
	      $scope.pause();
	    }
	  }

	  $scope.play = function() {
	    if (!isPlaying) {
	      isPlaying = true;
	      restartTimer();
	    }
	  };
	  $scope.pause = function() {
	    if (!$scope.noPause) {
	      isPlaying = false;
	      resetTimer();
	    }
	  };

	  self.addSlide = function(slide, element) {
	    slide.$element = element;
	    slides.push(slide);
	    //if this is the first slide or the slide is set to active, select it
	    if(slides.length === 1 || slide.active) {
	      self.select(slides[slides.length-1]);
	      if (slides.length == 1) {
	        $scope.play();
	      }
	    } else {
	      slide.active = false;
	    }
	  };

	  self.removeSlide = function(slide) {
	    //get the index of the slide inside the carousel
	    var index = slides.indexOf(slide);
	    slides.splice(index, 1);
	    if (slides.length > 0 && slide.active) {
	      if (index >= slides.length) {
	        self.select(slides[index-1]);
	      } else {
	        self.select(slides[index]);
	      }
	    } else if (currentIndex > index) {
	      currentIndex--;
	    }
	  };

	}])

	/**
	 * @ngdoc directive
	 * @name ui.bootstrap.carousel.directive:carousel
	 * @restrict EA
	 *
	 * @description
	 * Carousel is the outer container for a set of image 'slides' to showcase.
	 *
	 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
	 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
	 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
	 *
	 * @example
	<example module="ui.bootstrap">
	  <file name="index.html">
	    <carousel>
	      <slide>
	        <img src="http://placekitten.com/150/150" style="margin:auto;">
	        <div class="carousel-caption">
	          <p>Beautiful!</p>
	        </div>
	      </slide>
	      <slide>
	        <img src="http://placekitten.com/100/150" style="margin:auto;">
	        <div class="carousel-caption">
	          <p>D'aww!</p>
	        </div>
	      </slide>
	    </carousel>
	  </file>
	  <file name="demo.css">
	    .carousel-indicators {
	      top: auto;
	      bottom: 15px;
	    }
	  </file>
	</example>
	 */
	.directive('carousel', [function() {
	  return {
	    restrict: 'EA',
	    transclude: true,
	    replace: true,
	    controller: 'CarouselController',
	    require: 'carousel',
	    templateUrl: 'template/carousel/carousel.html',
	    scope: {
	      interval: '=',
	      noTransition: '=',
	      noPause: '='
	    }
	  };
	}])

	/**
	 * @ngdoc directive
	 * @name ui.bootstrap.carousel.directive:slide
	 * @restrict EA
	 *
	 * @description
	 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
	 *
	 * @param {boolean=} active Model binding, whether or not this slide is currently active.
	 *
	 * @example
	<example module="ui.bootstrap">
	  <file name="index.html">
	<div ng-controller="CarouselDemoCtrl">
	  <carousel>
	    <slide ng-repeat="slide in slides" active="slide.active">
	      <img ng-src="{{slide.image}}" style="margin:auto;">
	      <div class="carousel-caption">
	        <h4>Slide {{$index}}</h4>
	        <p>{{slide.text}}</p>
	      </div>
	    </slide>
	  </carousel>
	  Interval, in milliseconds: <input type="number" ng-model="myInterval">
	  <br />Enter a negative number to stop the interval.
	</div>
	  </file>
	  <file name="script.js">
	function CarouselDemoCtrl($scope) {
	  $scope.myInterval = 5000;
	}
	  </file>
	  <file name="demo.css">
	    .carousel-indicators {
	      top: auto;
	      bottom: 15px;
	    }
	  </file>
	</example>
	*/

	.directive('slide', function() {
	  return {
	    require: '^carousel',
	    restrict: 'EA',
	    transclude: true,
	    replace: true,
	    templateUrl: 'template/carousel/slide.html',
	    scope: {
	      active: '=?'
	    },
	    link: function (scope, element, attrs, carouselCtrl) {
	      carouselCtrl.addSlide(scope, element);
	      //when the scope is destroyed then remove the slide from the current slides array
	      scope.$on('$destroy', function() {
	        carouselCtrl.removeSlide(scope);
	      });

	      scope.$watch('active', function(active) {
	        if (active) {
	          carouselCtrl.select(scope);
	        }
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.dateparser', [])

	.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {

	  this.parsers = {};

	  var formatCodeToRegex = {
	    'yyyy': {
	      regex: '\\d{4}',
	      apply: function(value) { this.year = +value; }
	    },
	    'yy': {
	      regex: '\\d{2}',
	      apply: function(value) { this.year = +value + 2000; }
	    },
	    'y': {
	      regex: '\\d{1,4}',
	      apply: function(value) { this.year = +value; }
	    },
	    'MMMM': {
	      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
	      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }
	    },
	    'MMM': {
	      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
	      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }
	    },
	    'MM': {
	      regex: '0[1-9]|1[0-2]',
	      apply: function(value) { this.month = value - 1; }
	    },
	    'M': {
	      regex: '[1-9]|1[0-2]',
	      apply: function(value) { this.month = value - 1; }
	    },
	    'dd': {
	      regex: '[0-2][0-9]{1}|3[0-1]{1}',
	      apply: function(value) { this.date = +value; }
	    },
	    'd': {
	      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
	      apply: function(value) { this.date = +value; }
	    },
	    'EEEE': {
	      regex: $locale.DATETIME_FORMATS.DAY.join('|')
	    },
	    'EEE': {
	      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')
	    }
	  };

	  function createParser(format) {
	    var map = [], regex = format.split('');

	    angular.forEach(formatCodeToRegex, function(data, code) {
	      var index = format.indexOf(code);

	      if (index > -1) {
	        format = format.split('');

	        regex[index] = '(' + data.regex + ')';
	        format[index] = '$'; // Custom symbol to define consumed part of format
	        for (var i = index + 1, n = index + code.length; i < n; i++) {
	          regex[i] = '';
	          format[i] = '$';
	        }
	        format = format.join('');

	        map.push({ index: index, apply: data.apply });
	      }
	    });

	    return {
	      regex: new RegExp('^' + regex.join('') + '$'),
	      map: orderByFilter(map, 'index')
	    };
	  }

	  this.parse = function(input, format) {
	    if ( !angular.isString(input) || !format ) {
	      return input;
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;

	    if ( !this.parsers[format] ) {
	      this.parsers[format] = createParser(format);
	    }

	    var parser = this.parsers[format],
	        regex = parser.regex,
	        map = parser.map,
	        results = input.match(regex);

	    if ( results && results.length ) {
	      var fields = { year: 1900, month: 0, date: 1, hours: 0 }, dt;

	      for( var i = 1, n = results.length; i < n; i++ ) {
	        var mapper = map[i-1];
	        if ( mapper.apply ) {
	          mapper.apply.call(fields, results[i]);
	        }
	      }

	      if ( isValid(fields.year, fields.month, fields.date) ) {
	        dt = new Date( fields.year, fields.month, fields.date, fields.hours);
	      }

	      return dt;
	    }
	  };

	  // Check if date is valid for specific month (and year for February).
	  // Month: 0 = Jan, 1 = Feb, etc
	  function isValid(year, month, date) {
	    if ( month === 1 && date > 28) {
	        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
	    }

	    if ( month === 3 || month === 5 || month === 8 || month === 10) {
	        return date < 31;
	    }

	    return true;
	  }
	}]);

	angular.module('ui.bootstrap.position', [])

	/**
	 * A set of utility methods that can be use to retrieve position of DOM elements.
	 * It is meant to be used where we need to absolute-position DOM elements in
	 * relation to other, existing elements (this is the case for tooltips, popovers,
	 * typeahead suggestions etc.).
	 */
	  .factory('$position', ['$document', '$window', function ($document, $window) {

	    function getStyle(el, cssprop) {
	      if (el.currentStyle) { //IE
	        return el.currentStyle[cssprop];
	      } else if ($window.getComputedStyle) {
	        return $window.getComputedStyle(el)[cssprop];
	      }
	      // finally try and get inline style
	      return el.style[cssprop];
	    }

	    /**
	     * Checks if a given element is statically positioned
	     * @param element - raw DOM element
	     */
	    function isStaticPositioned(element) {
	      return (getStyle(element, 'position') || 'static' ) === 'static';
	    }

	    /**
	     * returns the closest, non-statically positioned parentOffset of a given element
	     * @param element
	     */
	    var parentOffsetEl = function (element) {
	      var docDomEl = $document[0];
	      var offsetParent = element.offsetParent || docDomEl;
	      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
	        offsetParent = offsetParent.offsetParent;
	      }
	      return offsetParent || docDomEl;
	    };

	    return {
	      /**
	       * Provides read-only equivalent of jQuery's position function:
	       * http://api.jquery.com/position/
	       */
	      position: function (element) {
	        var elBCR = this.offset(element);
	        var offsetParentBCR = { top: 0, left: 0 };
	        var offsetParentEl = parentOffsetEl(element[0]);
	        if (offsetParentEl != $document[0]) {
	          offsetParentBCR = this.offset(angular.element(offsetParentEl));
	          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
	          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
	        }

	        var boundingClientRect = element[0].getBoundingClientRect();
	        return {
	          width: boundingClientRect.width || element.prop('offsetWidth'),
	          height: boundingClientRect.height || element.prop('offsetHeight'),
	          top: elBCR.top - offsetParentBCR.top,
	          left: elBCR.left - offsetParentBCR.left
	        };
	      },

	      /**
	       * Provides read-only equivalent of jQuery's offset function:
	       * http://api.jquery.com/offset/
	       */
	      offset: function (element) {
	        var boundingClientRect = element[0].getBoundingClientRect();
	        return {
	          width: boundingClientRect.width || element.prop('offsetWidth'),
	          height: boundingClientRect.height || element.prop('offsetHeight'),
	          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
	          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
	        };
	      },

	      /**
	       * Provides coordinates for the targetEl in relation to hostEl
	       */
	      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {

	        var positionStrParts = positionStr.split('-');
	        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';

	        var hostElPos,
	          targetElWidth,
	          targetElHeight,
	          targetElPos;

	        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

	        targetElWidth = targetEl.prop('offsetWidth');
	        targetElHeight = targetEl.prop('offsetHeight');

	        var shiftWidth = {
	          center: function () {
	            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
	          },
	          left: function () {
	            return hostElPos.left;
	          },
	          right: function () {
	            return hostElPos.left + hostElPos.width;
	          }
	        };

	        var shiftHeight = {
	          center: function () {
	            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
	          },
	          top: function () {
	            return hostElPos.top;
	          },
	          bottom: function () {
	            return hostElPos.top + hostElPos.height;
	          }
	        };

	        switch (pos0) {
	          case 'right':
	            targetElPos = {
	              top: shiftHeight[pos1](),
	              left: shiftWidth[pos0]()
	            };
	            break;
	          case 'left':
	            targetElPos = {
	              top: shiftHeight[pos1](),
	              left: hostElPos.left - targetElWidth
	            };
	            break;
	          case 'bottom':
	            targetElPos = {
	              top: shiftHeight[pos0](),
	              left: shiftWidth[pos1]()
	            };
	            break;
	          default:
	            targetElPos = {
	              top: hostElPos.top - targetElHeight,
	              left: shiftWidth[pos1]()
	            };
	            break;
	        }

	        return targetElPos;
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])

	.constant('datepickerConfig', {
	  formatDay: 'dd',
	  formatMonth: 'MMMM',
	  formatYear: 'yyyy',
	  formatDayHeader: 'EEE',
	  formatDayTitle: 'MMMM yyyy',
	  formatMonthTitle: 'yyyy',
	  datepickerMode: 'day',
	  minMode: 'day',
	  maxMode: 'year',
	  showWeeks: true,
	  startingDay: 0,
	  yearRange: 20,
	  minDate: null,
	  maxDate: null
	})

	.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {
	  var self = this,
	      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

	  // Modes chain
	  this.modes = ['day', 'month', 'year'];

	  // Configuration attributes
	  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',
	                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange'], function( key, index ) {
	    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];
	  });

	  // Watchable date attributes
	  angular.forEach(['minDate', 'maxDate'], function( key ) {
	    if ( $attrs[key] ) {
	      $scope.$parent.$watch($parse($attrs[key]), function(value) {
	        self[key] = value ? new Date(value) : null;
	        self.refreshView();
	      });
	    } else {
	      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
	    }
	  });

	  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
	  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);
	  this.activeDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date();

	  $scope.isActive = function(dateObject) {
	    if (self.compare(dateObject.date, self.activeDate) === 0) {
	      $scope.activeDateId = dateObject.uid;
	      return true;
	    }
	    return false;
	  };

	  this.init = function( ngModelCtrl_ ) {
	    ngModelCtrl = ngModelCtrl_;

	    ngModelCtrl.$render = function() {
	      self.render();
	    };
	  };

	  this.render = function() {
	    if ( ngModelCtrl.$modelValue ) {
	      var date = new Date( ngModelCtrl.$modelValue ),
	          isValid = !isNaN(date);

	      if ( isValid ) {
	        this.activeDate = date;
	      } else {
	        $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
	      }
	      ngModelCtrl.$setValidity('date', isValid);
	    }
	    this.refreshView();
	  };

	  this.refreshView = function() {
	    if ( this.element ) {
	      this._refreshView();

	      var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
	      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));
	    }
	  };

	  this.createDateObject = function(date, format) {
	    var model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
	    return {
	      date: date,
	      label: dateFilter(date, format),
	      selected: model && this.compare(date, model) === 0,
	      disabled: this.isDisabled(date),
	      current: this.compare(date, new Date()) === 0
	    };
	  };

	  this.isDisabled = function( date ) {
	    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));
	  };

	  // Split array into smaller arrays
	  this.split = function(arr, size) {
	    var arrays = [];
	    while (arr.length > 0) {
	      arrays.push(arr.splice(0, size));
	    }
	    return arrays;
	  };

	  $scope.select = function( date ) {
	    if ( $scope.datepickerMode === self.minMode ) {
	      var dt = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : new Date(0, 0, 0, 0, 0, 0, 0);
	      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );
	      ngModelCtrl.$setViewValue( dt );
	      ngModelCtrl.$render();
	    } else {
	      self.activeDate = date;
	      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];
	    }
	  };

	  $scope.move = function( direction ) {
	    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
	        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
	    self.activeDate.setFullYear(year, month, 1);
	    self.refreshView();
	  };

	  $scope.toggleMode = function( direction ) {
	    direction = direction || 1;

	    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {
	      return;
	    }

	    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];
	  };

	  // Key event mapper
	  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };

	  var focusElement = function() {
	    $timeout(function() {
	      self.element[0].focus();
	    }, 0 , false);
	  };

	  // Listen for focus requests from popup directive
	  $scope.$on('datepicker.focus', focusElement);

	  $scope.keydown = function( evt ) {
	    var key = $scope.keys[evt.which];

	    if ( !key || evt.shiftKey || evt.altKey ) {
	      return;
	    }

	    evt.preventDefault();
	    evt.stopPropagation();

	    if (key === 'enter' || key === 'space') {
	      if ( self.isDisabled(self.activeDate)) {
	        return; // do nothing
	      }
	      $scope.select(self.activeDate);
	      focusElement();
	    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
	      $scope.toggleMode(key === 'up' ? 1 : -1);
	      focusElement();
	    } else {
	      self.handleKeyDown(key, evt);
	      self.refreshView();
	    }
	  };
	}])

	.directive( 'datepicker', function () {
	  return {
	    restrict: 'EA',
	    replace: true,
	    templateUrl: 'template/datepicker/datepicker.html',
	    scope: {
	      datepickerMode: '=?',
	      dateDisabled: '&'
	    },
	    require: ['datepicker', '?^ngModel'],
	    controller: 'DatepickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if ( ngModelCtrl ) {
	        datepickerCtrl.init( ngModelCtrl );
	      }
	    }
	  };
	})

	.directive('daypicker', ['dateFilter', function (dateFilter) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    templateUrl: 'template/datepicker/day.html',
	    require: '^datepicker',
	    link: function(scope, element, attrs, ctrl) {
	      scope.showWeeks = ctrl.showWeeks;

	      ctrl.step = { months: 1 };
	      ctrl.element = element;

	      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	      function getDaysInMonth( year, month ) {
	        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];
	      }

	      function getDates(startDate, n) {
	        var dates = new Array(n), current = new Date(startDate), i = 0;
	        current.setHours(12); // Prevent repeated dates because of timezone bug
	        while ( i < n ) {
	          dates[i++] = new Date(current);
	          current.setDate( current.getDate() + 1 );
	        }
	        return dates;
	      }

	      ctrl._refreshView = function() {
	        var year = ctrl.activeDate.getFullYear(),
	          month = ctrl.activeDate.getMonth(),
	          firstDayOfMonth = new Date(year, month, 1),
	          difference = ctrl.startingDay - firstDayOfMonth.getDay(),
	          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,
	          firstDate = new Date(firstDayOfMonth);

	        if ( numDisplayedFromPreviousMonth > 0 ) {
	          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );
	        }

	        // 42 is the number of days on a six-month calendar
	        var days = getDates(firstDate, 42);
	        for (var i = 0; i < 42; i ++) {
	          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
	            secondary: days[i].getMonth() !== month,
	            uid: scope.uniqueId + '-' + i
	          });
	        }

	        scope.labels = new Array(7);
	        for (var j = 0; j < 7; j++) {
	          scope.labels[j] = {
	            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
	            full: dateFilter(days[j].date, 'EEEE')
	          };
	        }

	        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
	        scope.rows = ctrl.split(days, 7);

	        if ( scope.showWeeks ) {
	          scope.weekNumbers = [];
	          var weekNumber = getISO8601WeekNumber( scope.rows[0][0].date ),
	              numWeeks = scope.rows.length;
	          while( scope.weekNumbers.push(weekNumber++) < numWeeks ) {}
	        }
	      };

	      ctrl.compare = function(date1, date2) {
	        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );
	      };

	      function getISO8601WeekNumber(date) {
	        var checkDate = new Date(date);
	        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
	        var time = checkDate.getTime();
	        checkDate.setMonth(0); // Compare with Jan 1
	        checkDate.setDate(1);
	        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	      }

	      ctrl.handleKeyDown = function( key, evt ) {
	        var date = ctrl.activeDate.getDate();

	        if (key === 'left') {
	          date = date - 1;   // up
	        } else if (key === 'up') {
	          date = date - 7;   // down
	        } else if (key === 'right') {
	          date = date + 1;   // down
	        } else if (key === 'down') {
	          date = date + 7;
	        } else if (key === 'pageup' || key === 'pagedown') {
	          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
	          ctrl.activeDate.setMonth(month, 1);
	          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
	        } else if (key === 'home') {
	          date = 1;
	        } else if (key === 'end') {
	          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
	        }
	        ctrl.activeDate.setDate(date);
	      };

	      ctrl.refreshView();
	    }
	  };
	}])

	.directive('monthpicker', ['dateFilter', function (dateFilter) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    templateUrl: 'template/datepicker/month.html',
	    require: '^datepicker',
	    link: function(scope, element, attrs, ctrl) {
	      ctrl.step = { years: 1 };
	      ctrl.element = element;

	      ctrl._refreshView = function() {
	        var months = new Array(12),
	            year = ctrl.activeDate.getFullYear();

	        for ( var i = 0; i < 12; i++ ) {
	          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {
	            uid: scope.uniqueId + '-' + i
	          });
	        }

	        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
	        scope.rows = ctrl.split(months, 3);
	      };

	      ctrl.compare = function(date1, date2) {
	        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() );
	      };

	      ctrl.handleKeyDown = function( key, evt ) {
	        var date = ctrl.activeDate.getMonth();

	        if (key === 'left') {
	          date = date - 1;   // up
	        } else if (key === 'up') {
	          date = date - 3;   // down
	        } else if (key === 'right') {
	          date = date + 1;   // down
	        } else if (key === 'down') {
	          date = date + 3;
	        } else if (key === 'pageup' || key === 'pagedown') {
	          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
	          ctrl.activeDate.setFullYear(year);
	        } else if (key === 'home') {
	          date = 0;
	        } else if (key === 'end') {
	          date = 11;
	        }
	        ctrl.activeDate.setMonth(date);
	      };

	      ctrl.refreshView();
	    }
	  };
	}])

	.directive('yearpicker', ['dateFilter', function (dateFilter) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    templateUrl: 'template/datepicker/year.html',
	    require: '^datepicker',
	    link: function(scope, element, attrs, ctrl) {
	      var range = ctrl.yearRange;

	      ctrl.step = { years: range };
	      ctrl.element = element;

	      function getStartingYear( year ) {
	        return parseInt((year - 1) / range, 10) * range + 1;
	      }

	      ctrl._refreshView = function() {
	        var years = new Array(range);

	        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {
	          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {
	            uid: scope.uniqueId + '-' + i
	          });
	        }

	        scope.title = [years[0].label, years[range - 1].label].join(' - ');
	        scope.rows = ctrl.split(years, 5);
	      };

	      ctrl.compare = function(date1, date2) {
	        return date1.getFullYear() - date2.getFullYear();
	      };

	      ctrl.handleKeyDown = function( key, evt ) {
	        var date = ctrl.activeDate.getFullYear();

	        if (key === 'left') {
	          date = date - 1;   // up
	        } else if (key === 'up') {
	          date = date - 5;   // down
	        } else if (key === 'right') {
	          date = date + 1;   // down
	        } else if (key === 'down') {
	          date = date + 5;
	        } else if (key === 'pageup' || key === 'pagedown') {
	          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;
	        } else if (key === 'home') {
	          date = getStartingYear( ctrl.activeDate.getFullYear() );
	        } else if (key === 'end') {
	          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;
	        }
	        ctrl.activeDate.setFullYear(date);
	      };

	      ctrl.refreshView();
	    }
	  };
	}])

	.constant('datepickerPopupConfig', {
	  datepickerPopup: 'yyyy-MM-dd',
	  currentText: 'Today',
	  clearText: 'Clear',
	  closeText: 'Done',
	  closeOnDateSelection: true,
	  appendToBody: false,
	  showButtonBar: true
	})

	.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',
	function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {
	  return {
	    restrict: 'EA',
	    require: 'ngModel',
	    scope: {
	      isOpen: '=?',
	      currentText: '@',
	      clearText: '@',
	      closeText: '@',
	      dateDisabled: '&'
	    },
	    link: function(scope, element, attrs, ngModel) {
	      var dateFormat,
	          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,
	          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;

	      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;

	      scope.getText = function( key ) {
	        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
	      };

	      attrs.$observe('datepickerPopup', function(value) {
	          dateFormat = value || datepickerPopupConfig.datepickerPopup;
	          ngModel.$render();
	      });

	      // popup element used to display calendar
	      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');
	      popupEl.attr({
	        'ng-model': 'date',
	        'ng-change': 'dateSelection()'
	      });

	      function cameltoDash( string ){
	        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
	      }

	      // datepicker element
	      var datepickerEl = angular.element(popupEl.children()[0]);
	      if ( attrs.datepickerOptions ) {
	        angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function( value, option ) {
	          datepickerEl.attr( cameltoDash(option), value );
	        });
	      }

	      scope.watchData = {};
	      angular.forEach(['minDate', 'maxDate', 'datepickerMode'], function( key ) {
	        if ( attrs[key] ) {
	          var getAttribute = $parse(attrs[key]);
	          scope.$parent.$watch(getAttribute, function(value){
	            scope.watchData[key] = value;
	          });
	          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

	          // Propagate changes from datepicker to outside
	          if ( key === 'datepickerMode' ) {
	            var setAttribute = getAttribute.assign;
	            scope.$watch('watchData.' + key, function(value, oldvalue) {
	              if ( value !== oldvalue ) {
	                setAttribute(scope.$parent, value);
	              }
	            });
	          }
	        }
	      });
	      if (attrs.dateDisabled) {
	        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
	      }

	      function parseDate(viewValue) {
	        if (!viewValue) {
	          ngModel.$setValidity('date', true);
	          return null;
	        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
	          ngModel.$setValidity('date', true);
	          return viewValue;
	        } else if (angular.isString(viewValue)) {
	          var date = dateParser.parse(viewValue, dateFormat) || new Date(viewValue);
	          if (isNaN(date)) {
	            ngModel.$setValidity('date', false);
	            return undefined;
	          } else {
	            ngModel.$setValidity('date', true);
	            return date;
	          }
	        } else {
	          ngModel.$setValidity('date', false);
	          return undefined;
	        }
	      }
	      ngModel.$parsers.unshift(parseDate);

	      // Inner change
	      scope.dateSelection = function(dt) {
	        if (angular.isDefined(dt)) {
	          scope.date = dt;
	        }
	        ngModel.$setViewValue(scope.date);
	        ngModel.$render();

	        if ( closeOnDateSelection ) {
	          scope.isOpen = false;
	          element[0].focus();
	        }
	      };

	      element.bind('input change keyup', function() {
	        scope.$apply(function() {
	          scope.date = ngModel.$modelValue;
	        });
	      });

	      // Outter change
	      ngModel.$render = function() {
	        var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';
	        element.val(date);
	        scope.date = parseDate( ngModel.$modelValue );
	      };

	      var documentClickBind = function(event) {
	        if (scope.isOpen && event.target !== element[0]) {
	          scope.$apply(function() {
	            scope.isOpen = false;
	          });
	        }
	      };

	      var keydown = function(evt, noApply) {
	        scope.keydown(evt);
	      };
	      element.bind('keydown', keydown);

	      scope.keydown = function(evt) {
	        if (evt.which === 27) {
	          evt.preventDefault();
	          evt.stopPropagation();
	          scope.close();
	        } else if (evt.which === 40 && !scope.isOpen) {
	          scope.isOpen = true;
	        }
	      };

	      scope.$watch('isOpen', function(value) {
	        if (value) {
	          scope.$broadcast('datepicker.focus');
	          scope.position = appendToBody ? $position.offset(element) : $position.position(element);
	          scope.position.top = scope.position.top + element.prop('offsetHeight');

	          $document.bind('click', documentClickBind);
	        } else {
	          $document.unbind('click', documentClickBind);
	        }
	      });

	      scope.select = function( date ) {
	        if (date === 'today') {
	          var today = new Date();
	          if (angular.isDate(ngModel.$modelValue)) {
	            date = new Date(ngModel.$modelValue);
	            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
	          } else {
	            date = new Date(today.setHours(0, 0, 0, 0));
	          }
	        }
	        scope.dateSelection( date );
	      };

	      scope.close = function() {
	        scope.isOpen = false;
	        element[0].focus();
	      };

	      var $popup = $compile(popupEl)(scope);
	      // Prevent jQuery cache memory leak (template is now redundant after linking)
	      popupEl.remove();

	      if ( appendToBody ) {
	        $document.find('body').append($popup);
	      } else {
	        element.after($popup);
	      }

	      scope.$on('$destroy', function() {
	        $popup.remove();
	        element.unbind('keydown', keydown);
	        $document.unbind('click', documentClickBind);
	      });
	    }
	  };
	}])

	.directive('datepickerPopupWrap', function() {
	  return {
	    restrict:'EA',
	    replace: true,
	    transclude: true,
	    templateUrl: 'template/datepicker/popup.html',
	    link:function (scope, element, attrs) {
	      element.bind('click', function(event) {
	        event.preventDefault();
	        event.stopPropagation();
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.dropdown', [])

	.constant('dropdownConfig', {
	  openClass: 'open'
	})

	.service('dropdownService', ['$document', function($document) {
	  var openScope = null;

	  this.open = function( dropdownScope ) {
	    if ( !openScope ) {
	      $document.bind('click', closeDropdown);
	      $document.bind('keydown', escapeKeyBind);
	    }

	    if ( openScope && openScope !== dropdownScope ) {
	        openScope.isOpen = false;
	    }

	    openScope = dropdownScope;
	  };

	  this.close = function( dropdownScope ) {
	    if ( openScope === dropdownScope ) {
	      openScope = null;
	      $document.unbind('click', closeDropdown);
	      $document.unbind('keydown', escapeKeyBind);
	    }
	  };

	  var closeDropdown = function( evt ) {
	    // This method may still be called during the same mouse event that
	    // unbound this event handler. So check openScope before proceeding.
	    if (!openScope) { return; }

	    var toggleElement = openScope.getToggleElement();
	    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {
	        return;
	    }

	    openScope.$apply(function() {
	      openScope.isOpen = false;
	    });
	  };

	  var escapeKeyBind = function( evt ) {
	    if ( evt.which === 27 ) {
	      openScope.focusToggleElement();
	      closeDropdown();
	    }
	  };
	}])

	.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate) {
	  var self = this,
	      scope = $scope.$new(), // create a child scope so we are not polluting original one
	      openClass = dropdownConfig.openClass,
	      getIsOpen,
	      setIsOpen = angular.noop,
	      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;

	  this.init = function( element ) {
	    self.$element = element;

	    if ( $attrs.isOpen ) {
	      getIsOpen = $parse($attrs.isOpen);
	      setIsOpen = getIsOpen.assign;

	      $scope.$watch(getIsOpen, function(value) {
	        scope.isOpen = !!value;
	      });
	    }
	  };

	  this.toggle = function( open ) {
	    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
	  };

	  // Allow other directives to watch status
	  this.isOpen = function() {
	    return scope.isOpen;
	  };

	  scope.getToggleElement = function() {
	    return self.toggleElement;
	  };

	  scope.focusToggleElement = function() {
	    if ( self.toggleElement ) {
	      self.toggleElement[0].focus();
	    }
	  };

	  scope.$watch('isOpen', function( isOpen, wasOpen ) {
	    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);

	    if ( isOpen ) {
	      scope.focusToggleElement();
	      dropdownService.open( scope );
	    } else {
	      dropdownService.close( scope );
	    }

	    setIsOpen($scope, isOpen);
	    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
	      toggleInvoker($scope, { open: !!isOpen });
	    }
	  });

	  $scope.$on('$locationChangeSuccess', function() {
	    scope.isOpen = false;
	  });

	  $scope.$on('$destroy', function() {
	    scope.$destroy();
	  });
	}])

	.directive('dropdown', function() {
	  return {
	    controller: 'DropdownController',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      dropdownCtrl.init( element );
	    }
	  };
	})

	.directive('dropdownToggle', function() {
	  return {
	    require: '?^dropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if ( !dropdownCtrl ) {
	        return;
	      }

	      dropdownCtrl.toggleElement = element;

	      var toggleDropdown = function(event) {
	        event.preventDefault();

	        if ( !element.hasClass('disabled') && !attrs.disabled ) {
	          scope.$apply(function() {
	            dropdownCtrl.toggle();
	          });
	        }
	      };

	      element.bind('click', toggleDropdown);

	      // WAI-ARIA
	      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
	      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {
	        element.attr('aria-expanded', !!isOpen);
	      });

	      scope.$on('$destroy', function() {
	        element.unbind('click', toggleDropdown);
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.modal', ['ui.bootstrap.transition'])

	/**
	 * A helper, internal data structure that acts as a map but also allows getting / removing
	 * elements in the LIFO order
	 */
	  .factory('$$stackedMap', function () {
	    return {
	      createNew: function () {
	        var stack = [];

	        return {
	          add: function (key, value) {
	            stack.push({
	              key: key,
	              value: value
	            });
	          },
	          get: function (key) {
	            for (var i = 0; i < stack.length; i++) {
	              if (key == stack[i].key) {
	                return stack[i];
	              }
	            }
	          },
	          keys: function() {
	            var keys = [];
	            for (var i = 0; i < stack.length; i++) {
	              keys.push(stack[i].key);
	            }
	            return keys;
	          },
	          top: function () {
	            return stack[stack.length - 1];
	          },
	          remove: function (key) {
	            var idx = -1;
	            for (var i = 0; i < stack.length; i++) {
	              if (key == stack[i].key) {
	                idx = i;
	                break;
	              }
	            }
	            return stack.splice(idx, 1)[0];
	          },
	          removeTop: function () {
	            return stack.splice(stack.length - 1, 1)[0];
	          },
	          length: function () {
	            return stack.length;
	          }
	        };
	      }
	    };
	  })

	/**
	 * A helper directive for the $modal service. It creates a backdrop element.
	 */
	  .directive('modalBackdrop', ['$timeout', function ($timeout) {
	    return {
	      restrict: 'EA',
	      replace: true,
	      templateUrl: 'template/modal/backdrop.html',
	      link: function (scope, element, attrs) {
	        scope.backdropClass = attrs.backdropClass || '';

	        scope.animate = false;

	        //trigger CSS transitions
	        $timeout(function () {
	          scope.animate = true;
	        });
	      }
	    };
	  }])

	  .directive('modalWindow', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
	    return {
	      restrict: 'EA',
	      scope: {
	        index: '@',
	        animate: '='
	      },
	      replace: true,
	      transclude: true,
	      templateUrl: function(tElement, tAttrs) {
	        return tAttrs.templateUrl || 'template/modal/window.html';
	      },
	      link: function (scope, element, attrs) {
	        element.addClass(attrs.windowClass || '');
	        scope.size = attrs.size;

	        $timeout(function () {
	          // trigger CSS transitions
	          scope.animate = true;

	          /**
	           * Auto-focusing of a freshly-opened modal element causes any child elements
	           * with the autofocus attribute to lose focus. This is an issue on touch
	           * based devices which will show and then hide the onscreen keyboard.
	           * Attempts to refocus the autofocus element via JavaScript will not reopen
	           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
	           * the modal element if the modal does not contain an autofocus element.
	           */
	          if (!element[0].querySelectorAll('[autofocus]').length) {
	            element[0].focus();
	          }
	        });

	        scope.close = function (evt) {
	          var modal = $modalStack.getTop();
	          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            $modalStack.dismiss(modal.key, 'backdrop click');
	          }
	        };
	      }
	    };
	  }])

	  .directive('modalTransclude', function () {
	    return {
	      link: function($scope, $element, $attrs, controller, $transclude) {
	        $transclude($scope.$parent, function(clone) {
	          $element.empty();
	          $element.append(clone);
	        });
	      }
	    };
	  })

	  .factory('$modalStack', ['$transition', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
	    function ($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {

	      var OPENED_MODAL_CLASS = 'modal-open';

	      var backdropDomEl, backdropScope;
	      var openedWindows = $$stackedMap.createNew();
	      var $modalStack = {};

	      function backdropIndex() {
	        var topBackdropIndex = -1;
	        var opened = openedWindows.keys();
	        for (var i = 0; i < opened.length; i++) {
	          if (openedWindows.get(opened[i]).value.backdrop) {
	            topBackdropIndex = i;
	          }
	        }
	        return topBackdropIndex;
	      }

	      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
	        if (backdropScope) {
	          backdropScope.index = newBackdropIndex;
	        }
	      });

	      function removeModalWindow(modalInstance) {

	        var body = $document.find('body').eq(0);
	        var modalWindow = openedWindows.get(modalInstance).value;

	        //clean up the stack
	        openedWindows.remove(modalInstance);

	        //remove window DOM element
	        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
	          modalWindow.modalScope.$destroy();
	          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
	          checkRemoveBackdrop();
	        });
	      }

	      function checkRemoveBackdrop() {
	          //remove backdrop if no longer needed
	          if (backdropDomEl && backdropIndex() == -1) {
	            var backdropScopeRef = backdropScope;
	            removeAfterAnimate(backdropDomEl, backdropScope, 150, function () {
	              backdropScopeRef.$destroy();
	              backdropScopeRef = null;
	            });
	            backdropDomEl = undefined;
	            backdropScope = undefined;
	          }
	      }

	      function removeAfterAnimate(domEl, scope, emulateTime, done) {
	        // Closing animation
	        scope.animate = false;

	        var transitionEndEventName = $transition.transitionEndEventName;
	        if (transitionEndEventName) {
	          // transition out
	          var timeout = $timeout(afterAnimating, emulateTime);

	          domEl.bind(transitionEndEventName, function () {
	            $timeout.cancel(timeout);
	            afterAnimating();
	            scope.$apply();
	          });
	        } else {
	          // Ensure this call is async
	          $timeout(afterAnimating);
	        }

	        function afterAnimating() {
	          if (afterAnimating.done) {
	            return;
	          }
	          afterAnimating.done = true;

	          domEl.remove();
	          if (done) {
	            done();
	          }
	        }
	      }

	      $document.bind('keydown', function (evt) {
	        var modal;

	        if (evt.which === 27) {
	          modal = openedWindows.top();
	          if (modal && modal.value.keyboard) {
	            evt.preventDefault();
	            $rootScope.$apply(function () {
	              $modalStack.dismiss(modal.key, 'escape key press');
	            });
	          }
	        }
	      });

	      $modalStack.open = function (modalInstance, modal) {

	        openedWindows.add(modalInstance, {
	          deferred: modal.deferred,
	          modalScope: modal.scope,
	          backdrop: modal.backdrop,
	          keyboard: modal.keyboard
	        });

	        var body = $document.find('body').eq(0),
	            currBackdropIndex = backdropIndex();

	        if (currBackdropIndex >= 0 && !backdropDomEl) {
	          backdropScope = $rootScope.$new(true);
	          backdropScope.index = currBackdropIndex;
	          var angularBackgroundDomEl = angular.element('<div modal-backdrop></div>');
	          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
	          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
	          body.append(backdropDomEl);
	        }

	        var angularDomEl = angular.element('<div modal-window></div>');
	        angularDomEl.attr({
	          'template-url': modal.windowTemplateUrl,
	          'window-class': modal.windowClass,
	          'size': modal.size,
	          'index': openedWindows.length() - 1,
	          'animate': 'animate'
	        }).html(modal.content);

	        var modalDomEl = $compile(angularDomEl)(modal.scope);
	        openedWindows.top().value.modalDomEl = modalDomEl;
	        body.append(modalDomEl);
	        body.addClass(OPENED_MODAL_CLASS);
	      };

	      $modalStack.close = function (modalInstance, result) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.deferred.resolve(result);
	          removeModalWindow(modalInstance);
	        }
	      };

	      $modalStack.dismiss = function (modalInstance, reason) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.deferred.reject(reason);
	          removeModalWindow(modalInstance);
	        }
	      };

	      $modalStack.dismissAll = function (reason) {
	        var topModal = this.getTop();
	        while (topModal) {
	          this.dismiss(topModal.key, reason);
	          topModal = this.getTop();
	        }
	      };

	      $modalStack.getTop = function () {
	        return openedWindows.top();
	      };

	      return $modalStack;
	    }])

	  .provider('$modal', function () {

	    var $modalProvider = {
	      options: {
	        backdrop: true, //can be also false or 'static'
	        keyboard: true
	      },
	      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
	        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

	          var $modal = {};

	          function getTemplatePromise(options) {
	            return options.template ? $q.when(options.template) :
	              $http.get(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl,
	                {cache: $templateCache}).then(function (result) {
	                  return result.data;
	              });
	          }

	          function getResolvePromises(resolves) {
	            var promisesArr = [];
	            angular.forEach(resolves, function (value) {
	              if (angular.isFunction(value) || angular.isArray(value)) {
	                promisesArr.push($q.when($injector.invoke(value)));
	              }
	            });
	            return promisesArr;
	          }

	          $modal.open = function (modalOptions) {

	            var modalResultDeferred = $q.defer();
	            var modalOpenedDeferred = $q.defer();

	            //prepare an instance of a modal to be injected into controllers and returned to a caller
	            var modalInstance = {
	              result: modalResultDeferred.promise,
	              opened: modalOpenedDeferred.promise,
	              close: function (result) {
	                $modalStack.close(modalInstance, result);
	              },
	              dismiss: function (reason) {
	                $modalStack.dismiss(modalInstance, reason);
	              }
	            };

	            //merge and clean up options
	            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
	            modalOptions.resolve = modalOptions.resolve || {};

	            //verify options
	            if (!modalOptions.template && !modalOptions.templateUrl) {
	              throw new Error('One of template or templateUrl options is required.');
	            }

	            var templateAndResolvePromise =
	              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


	            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

	              var modalScope = (modalOptions.scope || $rootScope).$new();
	              modalScope.$close = modalInstance.close;
	              modalScope.$dismiss = modalInstance.dismiss;

	              var ctrlInstance, ctrlLocals = {};
	              var resolveIter = 1;

	              //controllers
	              if (modalOptions.controller) {
	                ctrlLocals.$scope = modalScope;
	                ctrlLocals.$modalInstance = modalInstance;
	                angular.forEach(modalOptions.resolve, function (value, key) {
	                  ctrlLocals[key] = tplAndVars[resolveIter++];
	                });

	                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
	                if (modalOptions.controllerAs) {
	                  modalScope[modalOptions.controllerAs] = ctrlInstance;
	                }
	              }

	              $modalStack.open(modalInstance, {
	                scope: modalScope,
	                deferred: modalResultDeferred,
	                content: tplAndVars[0],
	                backdrop: modalOptions.backdrop,
	                keyboard: modalOptions.keyboard,
	                backdropClass: modalOptions.backdropClass,
	                windowClass: modalOptions.windowClass,
	                windowTemplateUrl: modalOptions.windowTemplateUrl,
	                size: modalOptions.size
	              });

	            }, function resolveError(reason) {
	              modalResultDeferred.reject(reason);
	            });

	            templateAndResolvePromise.then(function () {
	              modalOpenedDeferred.resolve(true);
	            }, function () {
	              modalOpenedDeferred.reject(false);
	            });

	            return modalInstance;
	          };

	          return $modal;
	        }]
	    };

	    return $modalProvider;
	  });

	angular.module('ui.bootstrap.pagination', [])

	.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {
	  var self = this,
	      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
	      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;

	  this.init = function(ngModelCtrl_, config) {
	    ngModelCtrl = ngModelCtrl_;
	    this.config = config;

	    ngModelCtrl.$render = function() {
	      self.render();
	    };

	    if ($attrs.itemsPerPage) {
	      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
	        self.itemsPerPage = parseInt(value, 10);
	        $scope.totalPages = self.calculateTotalPages();
	      });
	    } else {
	      this.itemsPerPage = config.itemsPerPage;
	    }
	  };

	  this.calculateTotalPages = function() {
	    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
	    return Math.max(totalPages || 0, 1);
	  };

	  this.render = function() {
	    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
	  };

	  $scope.selectPage = function(page) {
	    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {
	      ngModelCtrl.$setViewValue(page);
	      ngModelCtrl.$render();
	    }
	  };

	  $scope.getText = function( key ) {
	    return $scope[key + 'Text'] || self.config[key + 'Text'];
	  };
	  $scope.noPrevious = function() {
	    return $scope.page === 1;
	  };
	  $scope.noNext = function() {
	    return $scope.page === $scope.totalPages;
	  };

	  $scope.$watch('totalItems', function() {
	    $scope.totalPages = self.calculateTotalPages();
	  });

	  $scope.$watch('totalPages', function(value) {
	    setNumPages($scope.$parent, value); // Readonly variable

	    if ( $scope.page > value ) {
	      $scope.selectPage(value);
	    } else {
	      ngModelCtrl.$render();
	    }
	  });
	}])

	.constant('paginationConfig', {
	  itemsPerPage: 10,
	  boundaryLinks: false,
	  directionLinks: true,
	  firstText: 'First',
	  previousText: 'Previous',
	  nextText: 'Next',
	  lastText: 'Last',
	  rotate: true
	})

	.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {
	  return {
	    restrict: 'EA',
	    scope: {
	      totalItems: '=',
	      firstText: '@',
	      previousText: '@',
	      nextText: '@',
	      lastText: '@'
	    },
	    require: ['pagination', '?ngModel'],
	    controller: 'PaginationController',
	    templateUrl: 'template/pagination/pagination.html',
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	         return; // do nothing if no ng-model
	      }

	      // Setup configuration parameters
	      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize,
	          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
	      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
	      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;

	      paginationCtrl.init(ngModelCtrl, paginationConfig);

	      if (attrs.maxSize) {
	        scope.$parent.$watch($parse(attrs.maxSize), function(value) {
	          maxSize = parseInt(value, 10);
	          paginationCtrl.render();
	        });
	      }

	      // Create page object used in template
	      function makePage(number, text, isActive) {
	        return {
	          number: number,
	          text: text,
	          active: isActive
	        };
	      }

	      function getPages(currentPage, totalPages) {
	        var pages = [];

	        // Default page limits
	        var startPage = 1, endPage = totalPages;
	        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

	        // recompute if maxSize
	        if ( isMaxSized ) {
	          if ( rotate ) {
	            // Current page is displayed in the middle of the visible ones
	            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);
	            endPage   = startPage + maxSize - 1;

	            // Adjust if limit is exceeded
	            if (endPage > totalPages) {
	              endPage   = totalPages;
	              startPage = endPage - maxSize + 1;
	            }
	          } else {
	            // Visible pages are paginated with maxSize
	            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

	            // Adjust last page if limit is exceeded
	            endPage = Math.min(startPage + maxSize - 1, totalPages);
	          }
	        }

	        // Add page number links
	        for (var number = startPage; number <= endPage; number++) {
	          var page = makePage(number, number, number === currentPage);
	          pages.push(page);
	        }

	        // Add links to move between page sets
	        if ( isMaxSized && ! rotate ) {
	          if ( startPage > 1 ) {
	            var previousPageSet = makePage(startPage - 1, '...', false);
	            pages.unshift(previousPageSet);
	          }

	          if ( endPage < totalPages ) {
	            var nextPageSet = makePage(endPage + 1, '...', false);
	            pages.push(nextPageSet);
	          }
	        }

	        return pages;
	      }

	      var originalRender = paginationCtrl.render;
	      paginationCtrl.render = function() {
	        originalRender();
	        if (scope.page > 0 && scope.page <= scope.totalPages) {
	          scope.pages = getPages(scope.page, scope.totalPages);
	        }
	      };
	    }
	  };
	}])

	.constant('pagerConfig', {
	  itemsPerPage: 10,
	  previousText: '« Previous',
	  nextText: 'Next »',
	  align: true
	})

	.directive('pager', ['pagerConfig', function(pagerConfig) {
	  return {
	    restrict: 'EA',
	    scope: {
	      totalItems: '=',
	      previousText: '@',
	      nextText: '@'
	    },
	    require: ['pager', '?ngModel'],
	    controller: 'PaginationController',
	    templateUrl: 'template/pagination/pager.html',
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	         return; // do nothing if no ng-model
	      }

	      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
	      paginationCtrl.init(ngModelCtrl, pagerConfig);
	    }
	  };
	}]);

	/**
	 * The following features are still outstanding: animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, html tooltips, and selector delegation.
	 */
	angular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )

	/**
	 * The $tooltip service creates tooltip- and popover-like directives as well as
	 * houses global options for them.
	 */
	.provider( '$tooltip', function () {
	  // The default options tooltip and popover.
	  var defaultOptions = {
	    placement: 'top',
	    animation: true,
	    popupDelay: 0
	  };

	  // Default hide triggers for each show trigger
	  var triggerMap = {
	    'mouseenter': 'mouseleave',
	    'click': 'click',
	    'focus': 'blur'
	  };

	  // The options specified to the provider globally.
	  var globalOptions = {};

	  /**
	   * `options({})` allows global configuration of all tooltips in the
	   * application.
	   *
	   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
	   *     // place tooltips left instead of top by default
	   *     $tooltipProvider.options( { placement: 'left' } );
	   *   });
	   */
		this.options = function( value ) {
			angular.extend( globalOptions, value );
		};

	  /**
	   * This allows you to extend the set of trigger mappings available. E.g.:
	   *
	   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
	   */
	  this.setTriggers = function setTriggers ( triggers ) {
	    angular.extend( triggerMap, triggers );
	  };

	  /**
	   * This is a helper function for translating camel-case to snake-case.
	   */
	  function snake_case(name){
	    var regexp = /[A-Z]/g;
	    var separator = '-';
	    return name.replace(regexp, function(letter, pos) {
	      return (pos ? separator : '') + letter.toLowerCase();
	    });
	  }

	  /**
	   * Returns the actual instance of the $tooltip service.
	   * TODO support multiple triggers
	   */
	  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {
	    return function $tooltip ( type, prefix, defaultTriggerShow ) {
	      var options = angular.extend( {}, defaultOptions, globalOptions );

	      /**
	       * Returns an object of show and hide triggers.
	       *
	       * If a trigger is supplied,
	       * it is used to show the tooltip; otherwise, it will use the `trigger`
	       * option passed to the `$tooltipProvider.options` method; else it will
	       * default to the trigger supplied to this directive factory.
	       *
	       * The hide trigger is based on the show trigger. If the `trigger` option
	       * was passed to the `$tooltipProvider.options` method, it will use the
	       * mapped trigger from `triggerMap` or the passed trigger if the map is
	       * undefined; otherwise, it uses the `triggerMap` value of the show
	       * trigger; else it will just use the show trigger.
	       */
	      function getTriggers ( trigger ) {
	        var show = trigger || options.trigger || defaultTriggerShow;
	        var hide = triggerMap[show] || show;
	        return {
	          show: show,
	          hide: hide
	        };
	      }

	      var directiveName = snake_case( type );

	      var startSym = $interpolate.startSymbol();
	      var endSym = $interpolate.endSymbol();
	      var template =
	        '<div '+ directiveName +'-popup '+
	          'title="'+startSym+'title'+endSym+'" '+
	          'content="'+startSym+'content'+endSym+'" '+
	          'placement="'+startSym+'placement'+endSym+'" '+
	          'animation="animation" '+
	          'is-open="isOpen"'+
	          '>'+
	        '</div>';

	      return {
	        restrict: 'EA',
	        compile: function (tElem, tAttrs) {
	          var tooltipLinker = $compile( template );

	          return function link ( scope, element, attrs ) {
	            var tooltip;
	            var tooltipLinkedScope;
	            var transitionTimeout;
	            var popupTimeout;
	            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;
	            var triggers = getTriggers( undefined );
	            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);
	            var ttScope = scope.$new(true);

	            var positionTooltip = function () {

	              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
	              ttPosition.top += 'px';
	              ttPosition.left += 'px';

	              // Now set the calculated positioning.
	              tooltip.css( ttPosition );
	            };

	            // By default, the tooltip is not open.
	            // TODO add ability to start tooltip opened
	            ttScope.isOpen = false;

	            function toggleTooltipBind () {
	              if ( ! ttScope.isOpen ) {
	                showTooltipBind();
	              } else {
	                hideTooltipBind();
	              }
	            }

	            // Show the tooltip with delay if specified, otherwise show it immediately
	            function showTooltipBind() {
	              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {
	                return;
	              }

	              prepareTooltip();

	              if ( ttScope.popupDelay ) {
	                // Do nothing if the tooltip was already scheduled to pop-up.
	                // This happens if show is triggered multiple times before any hide is triggered.
	                if (!popupTimeout) {
	                  popupTimeout = $timeout( show, ttScope.popupDelay, false );
	                  popupTimeout.then(function(reposition){reposition();});
	                }
	              } else {
	                show()();
	              }
	            }

	            function hideTooltipBind () {
	              scope.$apply(function () {
	                hide();
	              });
	            }

	            // Show the tooltip popup element.
	            function show() {

	              popupTimeout = null;

	              // If there is a pending remove transition, we must cancel it, lest the
	              // tooltip be mysteriously removed.
	              if ( transitionTimeout ) {
	                $timeout.cancel( transitionTimeout );
	                transitionTimeout = null;
	              }

	              // Don't show empty tooltips.
	              if ( ! ttScope.content ) {
	                return angular.noop;
	              }

	              createTooltip();

	              // Set the initial positioning.
	              tooltip.css({ top: 0, left: 0, display: 'block' });
	              ttScope.$digest();

	              positionTooltip();

	              // And show the tooltip.
	              ttScope.isOpen = true;
	              ttScope.$digest(); // digest required as $apply is not called

	              // Return positioning function as promise callback for correct
	              // positioning after draw.
	              return positionTooltip;
	            }

	            // Hide the tooltip popup element.
	            function hide() {
	              // First things first: we don't show it anymore.
	              ttScope.isOpen = false;

	              //if tooltip is going to be shown after delay, we must cancel this
	              $timeout.cancel( popupTimeout );
	              popupTimeout = null;

	              // And now we remove it from the DOM. However, if we have animation, we
	              // need to wait for it to expire beforehand.
	              // FIXME: this is a placeholder for a port of the transitions library.
	              if ( ttScope.animation ) {
	                if (!transitionTimeout) {
	                  transitionTimeout = $timeout(removeTooltip, 500);
	                }
	              } else {
	                removeTooltip();
	              }
	            }

	            function createTooltip() {
	              // There can only be one tooltip element per directive shown at once.
	              if (tooltip) {
	                removeTooltip();
	              }
	              tooltipLinkedScope = ttScope.$new();
	              tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {
	                if ( appendToBody ) {
	                  $document.find( 'body' ).append( tooltip );
	                } else {
	                  element.after( tooltip );
	                }
	              });
	            }

	            function removeTooltip() {
	              transitionTimeout = null;
	              if (tooltip) {
	                tooltip.remove();
	                tooltip = null;
	              }
	              if (tooltipLinkedScope) {
	                tooltipLinkedScope.$destroy();
	                tooltipLinkedScope = null;
	              }
	            }

	            function prepareTooltip() {
	              prepPlacement();
	              prepPopupDelay();
	            }

	            /**
	             * Observe the relevant attributes.
	             */
	            attrs.$observe( type, function ( val ) {
	              ttScope.content = val;

	              if (!val && ttScope.isOpen ) {
	                hide();
	              }
	            });

	            attrs.$observe( prefix+'Title', function ( val ) {
	              ttScope.title = val;
	            });

	            function prepPlacement() {
	              var val = attrs[ prefix + 'Placement' ];
	              ttScope.placement = angular.isDefined( val ) ? val : options.placement;
	            }

	            function prepPopupDelay() {
	              var val = attrs[ prefix + 'PopupDelay' ];
	              var delay = parseInt( val, 10 );
	              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;
	            }

	            var unregisterTriggers = function () {
	              element.unbind(triggers.show, showTooltipBind);
	              element.unbind(triggers.hide, hideTooltipBind);
	            };

	            function prepTriggers() {
	              var val = attrs[ prefix + 'Trigger' ];
	              unregisterTriggers();

	              triggers = getTriggers( val );

	              if ( triggers.show === triggers.hide ) {
	                element.bind( triggers.show, toggleTooltipBind );
	              } else {
	                element.bind( triggers.show, showTooltipBind );
	                element.bind( triggers.hide, hideTooltipBind );
	              }
	            }
	            prepTriggers();

	            var animation = scope.$eval(attrs[prefix + 'Animation']);
	            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

	            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);
	            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

	            // if a tooltip is attached to <body> we need to remove it on
	            // location change as its parent scope will probably not be destroyed
	            // by the change.
	            if ( appendToBody ) {
	              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {
	              if ( ttScope.isOpen ) {
	                hide();
	              }
	            });
	            }

	            // Make sure tooltip is destroyed and removed.
	            scope.$on('$destroy', function onDestroyTooltip() {
	              $timeout.cancel( transitionTimeout );
	              $timeout.cancel( popupTimeout );
	              unregisterTriggers();
	              removeTooltip();
	              ttScope = null;
	            });
	          };
	        }
	      };
	    };
	  }];
	})

	.directive( 'tooltipPopup', function () {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'template/tooltip/tooltip-popup.html'
	  };
	})

	.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {
	  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );
	}])

	.directive( 'tooltipHtmlUnsafePopup', function () {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
	  };
	})

	.directive( 'tooltipHtmlUnsafe', [ '$tooltip', function ( $tooltip ) {
	  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );
	}]);

	/**
	 * The following features are still outstanding: popup delay, animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, html popovers, and selector delegatation.
	 */
	angular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )

	.directive( 'popoverPopup', function () {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { title: '@', content: '@', placement: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'template/popover/popover.html'
	  };
	})

	.directive( 'popover', [ '$tooltip', function ( $tooltip ) {
	  return $tooltip( 'popover', 'popover', 'click' );
	}]);

	angular.module('ui.bootstrap.progressbar', [])

	.constant('progressConfig', {
	  animate: true,
	  max: 100
	})

	.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {
	    var self = this,
	        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

	    this.bars = [];
	    $scope.max = angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : progressConfig.max;

	    this.addBar = function(bar, element) {
	        if ( !animate ) {
	            element.css({'transition': 'none'});
	        }

	        this.bars.push(bar);

	        bar.$watch('value', function( value ) {
	            bar.percent = +(100 * value / $scope.max).toFixed(2);
	        });

	        bar.$on('$destroy', function() {
	            element = null;
	            self.removeBar(bar);
	        });
	    };

	    this.removeBar = function(bar) {
	        this.bars.splice(this.bars.indexOf(bar), 1);
	    };
	}])

	.directive('progress', function() {
	    return {
	        restrict: 'EA',
	        replace: true,
	        transclude: true,
	        controller: 'ProgressController',
	        require: 'progress',
	        scope: {},
	        templateUrl: 'template/progressbar/progress.html'
	    };
	})

	.directive('bar', function() {
	    return {
	        restrict: 'EA',
	        replace: true,
	        transclude: true,
	        require: '^progress',
	        scope: {
	            value: '=',
	            type: '@'
	        },
	        templateUrl: 'template/progressbar/bar.html',
	        link: function(scope, element, attrs, progressCtrl) {
	            progressCtrl.addBar(scope, element);
	        }
	    };
	})

	.directive('progressbar', function() {
	    return {
	        restrict: 'EA',
	        replace: true,
	        transclude: true,
	        controller: 'ProgressController',
	        scope: {
	            value: '=',
	            type: '@'
	        },
	        templateUrl: 'template/progressbar/progressbar.html',
	        link: function(scope, element, attrs, progressCtrl) {
	            progressCtrl.addBar(scope, angular.element(element.children()[0]));
	        }
	    };
	});
	angular.module('ui.bootstrap.rating', [])

	.constant('ratingConfig', {
	  max: 5,
	  stateOn: null,
	  stateOff: null
	})

	.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {
	  var ngModelCtrl  = { $setViewValue: angular.noop };

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
	    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;

	    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :
	                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );
	    $scope.range = this.buildTemplateObjects(ratingStates);
	  };

	  this.buildTemplateObjects = function(states) {
	    for (var i = 0, n = states.length; i < n; i++) {
	      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);
	    }
	    return states;
	  };

	  $scope.rate = function(value) {
	    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {
	      ngModelCtrl.$setViewValue(value);
	      ngModelCtrl.$render();
	    }
	  };

	  $scope.enter = function(value) {
	    if ( !$scope.readonly ) {
	      $scope.value = value;
	    }
	    $scope.onHover({value: value});
	  };

	  $scope.reset = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.onLeave();
	  };

	  $scope.onKeydown = function(evt) {
	    if (/(37|38|39|40)/.test(evt.which)) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );
	    }
	  };

	  this.render = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	  };
	}])

	.directive('rating', function() {
	  return {
	    restrict: 'EA',
	    require: ['rating', 'ngModel'],
	    scope: {
	      readonly: '=?',
	      onHover: '&',
	      onLeave: '&'
	    },
	    controller: 'RatingController',
	    templateUrl: 'template/rating/rating.html',
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if ( ngModelCtrl ) {
	        ratingCtrl.init( ngModelCtrl );
	      }
	    }
	  };
	});

	/**
	 * @ngdoc overview
	 * @name ui.bootstrap.tabs
	 *
	 * @description
	 * AngularJS version of the tabs directive.
	 */

	angular.module('ui.bootstrap.tabs', [])

	.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
	  var ctrl = this,
	      tabs = ctrl.tabs = $scope.tabs = [];

	  ctrl.select = function(selectedTab) {
	    angular.forEach(tabs, function(tab) {
	      if (tab.active && tab !== selectedTab) {
	        tab.active = false;
	        tab.onDeselect();
	      }
	    });
	    selectedTab.active = true;
	    selectedTab.onSelect();
	  };

	  ctrl.addTab = function addTab(tab) {
	    tabs.push(tab);
	    // we can't run the select function on the first tab
	    // since that would select it twice
	    if (tabs.length === 1) {
	      tab.active = true;
	    } else if (tab.active) {
	      ctrl.select(tab);
	    }
	  };

	  ctrl.removeTab = function removeTab(tab) {
	    var index = tabs.indexOf(tab);
	    //Select a new tab if the tab to be removed is selected and not destroyed
	    if (tab.active && tabs.length > 1 && !destroyed) {
	      //If this is the last tab, select the previous tab. else, the next tab.
	      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
	      ctrl.select(tabs[newActiveIndex]);
	    }
	    tabs.splice(index, 1);
	  };

	  var destroyed;
	  $scope.$on('$destroy', function() {
	    destroyed = true;
	  });
	}])

	/**
	 * @ngdoc directive
	 * @name ui.bootstrap.tabs.directive:tabset
	 * @restrict EA
	 *
	 * @description
	 * Tabset is the outer container for the tabs directive
	 *
	 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
	 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
	 *
	 * @example
	<example module="ui.bootstrap">
	  <file name="index.html">
	    <tabset>
	      <tab heading="Tab 1"><b>First</b> Content!</tab>
	      <tab heading="Tab 2"><i>Second</i> Content!</tab>
	    </tabset>
	    <hr />
	    <tabset vertical="true">
	      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
	      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
	    </tabset>
	    <tabset justified="true">
	      <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
	      <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
	    </tabset>
	  </file>
	</example>
	 */
	.directive('tabset', function() {
	  return {
	    restrict: 'EA',
	    transclude: true,
	    replace: true,
	    scope: {
	      type: '@'
	    },
	    controller: 'TabsetController',
	    templateUrl: 'template/tabs/tabset.html',
	    link: function(scope, element, attrs) {
	      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
	      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
	    }
	  };
	})

	/**
	 * @ngdoc directive
	 * @name ui.bootstrap.tabs.directive:tab
	 * @restrict EA
	 *
	 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
	 * @param {string=} select An expression to evaluate when the tab is selected.
	 * @param {boolean=} active A binding, telling whether or not this tab is selected.
	 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
	 *
	 * @description
	 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
	 *
	 * @example
	<example module="ui.bootstrap">
	  <file name="index.html">
	    <div ng-controller="TabsDemoCtrl">
	      <button class="btn btn-small" ng-click="items[0].active = true">
	        Select item 1, using active binding
	      </button>
	      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
	        Enable/disable item 2, using disabled binding
	      </button>
	      <br />
	      <tabset>
	        <tab heading="Tab 1">First Tab</tab>
	        <tab select="alertMe()">
	          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
	          Second Tab, with alert callback and html heading!
	        </tab>
	        <tab ng-repeat="item in items"
	          heading="{{item.title}}"
	          disabled="item.disabled"
	          active="item.active">
	          {{item.content}}
	        </tab>
	      </tabset>
	    </div>
	  </file>
	  <file name="script.js">
	    function TabsDemoCtrl($scope) {
	      $scope.items = [
	        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
	        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
	      ];

	      $scope.alertMe = function() {
	        setTimeout(function() {
	          alert("You've selected the alert tab!");
	        });
	      };
	    };
	  </file>
	</example>
	 */

	/**
	 * @ngdoc directive
	 * @name ui.bootstrap.tabs.directive:tabHeading
	 * @restrict EA
	 *
	 * @description
	 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
	 *
	 * @example
	<example module="ui.bootstrap">
	  <file name="index.html">
	    <tabset>
	      <tab>
	        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
	        And some content, too!
	      </tab>
	      <tab>
	        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
	        That's right.
	      </tab>
	    </tabset>
	  </file>
	</example>
	 */
	.directive('tab', ['$parse', function($parse) {
	  return {
	    require: '^tabset',
	    restrict: 'EA',
	    replace: true,
	    templateUrl: 'template/tabs/tab.html',
	    transclude: true,
	    scope: {
	      active: '=?',
	      heading: '@',
	      onSelect: '&select', //This callback is called in contentHeadingTransclude
	                          //once it inserts the tab's content into the dom
	      onDeselect: '&deselect'
	    },
	    controller: function() {
	      //Empty controller so other directives can require being 'under' a tab
	    },
	    compile: function(elm, attrs, transclude) {
	      return function postLink(scope, elm, attrs, tabsetCtrl) {
	        scope.$watch('active', function(active) {
	          if (active) {
	            tabsetCtrl.select(scope);
	          }
	        });

	        scope.disabled = false;
	        if ( attrs.disabled ) {
	          scope.$parent.$watch($parse(attrs.disabled), function(value) {
	            scope.disabled = !! value;
	          });
	        }

	        scope.select = function() {
	          if ( !scope.disabled ) {
	            scope.active = true;
	          }
	        };

	        tabsetCtrl.addTab(scope);
	        scope.$on('$destroy', function() {
	          tabsetCtrl.removeTab(scope);
	        });

	        //We need to transclude later, once the content container is ready.
	        //when this link happens, we're inside a tab heading.
	        scope.$transcludeFn = transclude;
	      };
	    }
	  };
	}])

	.directive('tabHeadingTransclude', [function() {
	  return {
	    restrict: 'A',
	    require: '^tab',
	    link: function(scope, elm, attrs, tabCtrl) {
	      scope.$watch('headingElement', function updateHeadingElement(heading) {
	        if (heading) {
	          elm.html('');
	          elm.append(heading);
	        }
	      });
	    }
	  };
	}])

	.directive('tabContentTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^tabset',
	    link: function(scope, elm, attrs) {
	      var tab = scope.$eval(attrs.tabContentTransclude);

	      //Now our tab is ready to be transcluded: both the tab heading area
	      //and the tab content area are loaded.  Transclude 'em both.
	      tab.$transcludeFn(tab.$parent, function(contents) {
	        angular.forEach(contents, function(node) {
	          if (isTabHeading(node)) {
	            //Let tabHeadingTransclude know.
	            tab.headingElement = node;
	          } else {
	            elm.append(node);
	          }
	        });
	      });
	    }
	  };
	  function isTabHeading(node) {
	    return node.tagName &&  (
	      node.hasAttribute('tab-heading') ||
	      node.hasAttribute('data-tab-heading') ||
	      node.tagName.toLowerCase() === 'tab-heading' ||
	      node.tagName.toLowerCase() === 'data-tab-heading'
	    );
	  }
	})

	;

	angular.module('ui.bootstrap.timepicker', [])

	.constant('timepickerConfig', {
	  hourStep: 1,
	  minuteStep: 1,
	  showMeridian: true,
	  meridians: null,
	  readonlyInput: false,
	  mousewheel: true
	})

	.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
	  var selected = new Date(),
	      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
	      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;

	  this.init = function( ngModelCtrl_, inputs ) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    var hoursInputEl = inputs.eq(0),
	        minutesInputEl = inputs.eq(1);

	    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
	    if ( mousewheel ) {
	      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );
	    }

	    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
	    this.setupInputEvents( hoursInputEl, minutesInputEl );
	  };

	  var hourStep = timepickerConfig.hourStep;
	  if ($attrs.hourStep) {
	    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
	      hourStep = parseInt(value, 10);
	    });
	  }

	  var minuteStep = timepickerConfig.minuteStep;
	  if ($attrs.minuteStep) {
	    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
	      minuteStep = parseInt(value, 10);
	    });
	  }

	  // 12H / 24H mode
	  $scope.showMeridian = timepickerConfig.showMeridian;
	  if ($attrs.showMeridian) {
	    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
	      $scope.showMeridian = !!value;

	      if ( ngModelCtrl.$error.time ) {
	        // Evaluate from template
	        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
	        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {
	          selected.setHours( hours );
	          refresh();
	        }
	      } else {
	        updateTemplate();
	      }
	    });
	  }

	  // Get $scope.hours in 24H mode if valid
	  function getHoursFromTemplate ( ) {
	    var hours = parseInt( $scope.hours, 10 );
	    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
	    if ( !valid ) {
	      return undefined;
	    }

	    if ( $scope.showMeridian ) {
	      if ( hours === 12 ) {
	        hours = 0;
	      }
	      if ( $scope.meridian === meridians[1] ) {
	        hours = hours + 12;
	      }
	    }
	    return hours;
	  }

	  function getMinutesFromTemplate() {
	    var minutes = parseInt($scope.minutes, 10);
	    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
	  }

	  function pad( value ) {
	    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value;
	  }

	  // Respond on mousewheel spin
	  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {
	    var isScrollingUp = function(e) {
	      if (e.originalEvent) {
	        e = e.originalEvent;
	      }
	      //pick correct delta variable depending on event
	      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
	      return (e.detail || delta > 0);
	    };

	    hoursInputEl.bind('mousewheel wheel', function(e) {
	      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );
	      e.preventDefault();
	    });

	    minutesInputEl.bind('mousewheel wheel', function(e) {
	      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );
	      e.preventDefault();
	    });

	  };

	  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {
	    if ( $scope.readonlyInput ) {
	      $scope.updateHours = angular.noop;
	      $scope.updateMinutes = angular.noop;
	      return;
	    }

	    var invalidate = function(invalidHours, invalidMinutes) {
	      ngModelCtrl.$setViewValue( null );
	      ngModelCtrl.$setValidity('time', false);
	      if (angular.isDefined(invalidHours)) {
	        $scope.invalidHours = invalidHours;
	      }
	      if (angular.isDefined(invalidMinutes)) {
	        $scope.invalidMinutes = invalidMinutes;
	      }
	    };

	    $scope.updateHours = function() {
	      var hours = getHoursFromTemplate();

	      if ( angular.isDefined(hours) ) {
	        selected.setHours( hours );
	        refresh( 'h' );
	      } else {
	        invalidate(true);
	      }
	    };

	    hoursInputEl.bind('blur', function(e) {
	      if ( !$scope.invalidHours && $scope.hours < 10) {
	        $scope.$apply( function() {
	          $scope.hours = pad( $scope.hours );
	        });
	      }
	    });

	    $scope.updateMinutes = function() {
	      var minutes = getMinutesFromTemplate();

	      if ( angular.isDefined(minutes) ) {
	        selected.setMinutes( minutes );
	        refresh( 'm' );
	      } else {
	        invalidate(undefined, true);
	      }
	    };

	    minutesInputEl.bind('blur', function(e) {
	      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {
	        $scope.$apply( function() {
	          $scope.minutes = pad( $scope.minutes );
	        });
	      }
	    });

	  };

	  this.render = function() {
	    var date = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : null;

	    if ( isNaN(date) ) {
	      ngModelCtrl.$setValidity('time', false);
	      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
	    } else {
	      if ( date ) {
	        selected = date;
	      }
	      makeValid();
	      updateTemplate();
	    }
	  };

	  // Call internally when we know that model is valid.
	  function refresh( keyboardChange ) {
	    makeValid();
	    ngModelCtrl.$setViewValue( new Date(selected) );
	    updateTemplate( keyboardChange );
	  }

	  function makeValid() {
	    ngModelCtrl.$setValidity('time', true);
	    $scope.invalidHours = false;
	    $scope.invalidMinutes = false;
	  }

	  function updateTemplate( keyboardChange ) {
	    var hours = selected.getHours(), minutes = selected.getMinutes();

	    if ( $scope.showMeridian ) {
	      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
	    }

	    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);
	    $scope.minutes = keyboardChange === 'm' ? minutes : pad(minutes);
	    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
	  }

	  function addMinutes( minutes ) {
	    var dt = new Date( selected.getTime() + minutes * 60000 );
	    selected.setHours( dt.getHours(), dt.getMinutes() );
	    refresh();
	  }

	  $scope.incrementHours = function() {
	    addMinutes( hourStep * 60 );
	  };
	  $scope.decrementHours = function() {
	    addMinutes( - hourStep * 60 );
	  };
	  $scope.incrementMinutes = function() {
	    addMinutes( minuteStep );
	  };
	  $scope.decrementMinutes = function() {
	    addMinutes( - minuteStep );
	  };
	  $scope.toggleMeridian = function() {
	    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );
	  };
	}])

	.directive('timepicker', function () {
	  return {
	    restrict: 'EA',
	    require: ['timepicker', '?^ngModel'],
	    controller:'TimepickerController',
	    replace: true,
	    scope: {},
	    templateUrl: 'template/timepicker/timepicker.html',
	    link: function(scope, element, attrs, ctrls) {
	      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if ( ngModelCtrl ) {
	        timepickerCtrl.init( ngModelCtrl, element.find('input') );
	      }
	    }
	  };
	});

	angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

	/**
	 * A helper service that can parse typeahead's syntax (string provided by users)
	 * Extracted to a separate service for ease of unit testing
	 */
	  .factory('typeaheadParser', ['$parse', function ($parse) {

	  //                      00000111000000000000022200000000000000003333333333333330000000000044000
	  var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;

	  return {
	    parse:function (input) {

	      var match = input.match(TYPEAHEAD_REGEXP);
	      if (!match) {
	        throw new Error(
	          'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
	            ' but got "' + input + '".');
	      }

	      return {
	        itemName:match[3],
	        source:$parse(match[4]),
	        viewMapper:$parse(match[2] || match[1]),
	        modelMapper:$parse(match[1])
	      };
	    }
	  };
	}])

	  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',
	    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {

	  var HOT_KEYS = [9, 13, 27, 38, 40];

	  return {
	    require:'ngModel',
	    link:function (originalScope, element, attrs, modelCtrl) {

	      //SUPPORTED ATTRIBUTES (OPTIONS)

	      //minimal no of characters that needs to be entered before typeahead kicks-in
	      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;

	      //minimal wait time after last character typed before typehead kicks-in
	      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

	      //should it restrict model values to the ones selected from the popup only?
	      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

	      //binding to a variable that indicates if matches are being retrieved asynchronously
	      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

	      //a callback executed when a match is selected
	      var onSelectCallback = $parse(attrs.typeaheadOnSelect);

	      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

	      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

	      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

	      //INTERNAL VARIABLES

	      //model setter executed upon match selection
	      var $setModelValue = $parse(attrs.ngModel).assign;

	      //expressions used by typeahead
	      var parserResult = typeaheadParser.parse(attrs.typeahead);

	      var hasFocus;

	      //create a child scope for the typeahead directive so we are not polluting original scope
	      //with typeahead-specific data (matches, query etc.)
	      var scope = originalScope.$new();
	      originalScope.$on('$destroy', function(){
	        scope.$destroy();
	      });

	      // WAI-ARIA
	      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	      element.attr({
	        'aria-autocomplete': 'list',
	        'aria-expanded': false,
	        'aria-owns': popupId
	      });

	      //pop-up element used to display matches
	      var popUpEl = angular.element('<div typeahead-popup></div>');
	      popUpEl.attr({
	        id: popupId,
	        matches: 'matches',
	        active: 'activeIdx',
	        select: 'select(activeIdx)',
	        query: 'query',
	        position: 'position'
	      });
	      //custom item template
	      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
	        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
	      }

	      var resetMatches = function() {
	        scope.matches = [];
	        scope.activeIdx = -1;
	        element.attr('aria-expanded', false);
	      };

	      var getMatchId = function(index) {
	        return popupId + '-option-' + index;
	      };

	      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
	      // This attribute is added or removed automatically when the `activeIdx` changes.
	      scope.$watch('activeIdx', function(index) {
	        if (index < 0) {
	          element.removeAttr('aria-activedescendant');
	        } else {
	          element.attr('aria-activedescendant', getMatchId(index));
	        }
	      });

	      var getMatchesAsync = function(inputValue) {

	        var locals = {$viewValue: inputValue};
	        isLoadingSetter(originalScope, true);
	        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {

	          //it might happen that several async queries were in progress if a user were typing fast
	          //but we are interested only in responses that correspond to the current view value
	          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);
	          if (onCurrentRequest && hasFocus) {
	            if (matches.length > 0) {

	              scope.activeIdx = focusFirst ? 0 : -1;
	              scope.matches.length = 0;

	              //transform labels
	              for(var i=0; i<matches.length; i++) {
	                locals[parserResult.itemName] = matches[i];
	                scope.matches.push({
	                  id: getMatchId(i),
	                  label: parserResult.viewMapper(scope, locals),
	                  model: matches[i]
	                });
	              }

	              scope.query = inputValue;
	              //position pop-up with matches - we need to re-calculate its position each time we are opening a window
	              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
	              //due to other elements being rendered
	              scope.position = appendToBody ? $position.offset(element) : $position.position(element);
	              scope.position.top = scope.position.top + element.prop('offsetHeight');

	              element.attr('aria-expanded', true);
	            } else {
	              resetMatches();
	            }
	          }
	          if (onCurrentRequest) {
	            isLoadingSetter(originalScope, false);
	          }
	        }, function(){
	          resetMatches();
	          isLoadingSetter(originalScope, false);
	        });
	      };

	      resetMatches();

	      //we need to propagate user's query so we can higlight matches
	      scope.query = undefined;

	      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later 
	      var timeoutPromise;

	      var scheduleSearchWithTimeout = function(inputValue) {
	        timeoutPromise = $timeout(function () {
	          getMatchesAsync(inputValue);
	        }, waitTime);
	      };

	      var cancelPreviousTimeout = function() {
	        if (timeoutPromise) {
	          $timeout.cancel(timeoutPromise);
	        }
	      };

	      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
	      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
	      modelCtrl.$parsers.unshift(function (inputValue) {

	        hasFocus = true;

	        if (inputValue && inputValue.length >= minSearch) {
	          if (waitTime > 0) {
	            cancelPreviousTimeout();
	            scheduleSearchWithTimeout(inputValue);
	          } else {
	            getMatchesAsync(inputValue);
	          }
	        } else {
	          isLoadingSetter(originalScope, false);
	          cancelPreviousTimeout();
	          resetMatches();
	        }

	        if (isEditable) {
	          return inputValue;
	        } else {
	          if (!inputValue) {
	            // Reset in case user had typed something previously.
	            modelCtrl.$setValidity('editable', true);
	            return inputValue;
	          } else {
	            modelCtrl.$setValidity('editable', false);
	            return undefined;
	          }
	        }
	      });

	      modelCtrl.$formatters.push(function (modelValue) {

	        var candidateViewValue, emptyViewValue;
	        var locals = {};

	        if (inputFormatter) {

	          locals.$model = modelValue;
	          return inputFormatter(originalScope, locals);

	        } else {

	          //it might happen that we don't have enough info to properly render input value
	          //we need to check for this situation and simply return model value if we can't apply custom formatting
	          locals[parserResult.itemName] = modelValue;
	          candidateViewValue = parserResult.viewMapper(originalScope, locals);
	          locals[parserResult.itemName] = undefined;
	          emptyViewValue = parserResult.viewMapper(originalScope, locals);

	          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;
	        }
	      });

	      scope.select = function (activeIdx) {
	        //called from within the $digest() cycle
	        var locals = {};
	        var model, item;

	        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
	        model = parserResult.modelMapper(originalScope, locals);
	        $setModelValue(originalScope, model);
	        modelCtrl.$setValidity('editable', true);

	        onSelectCallback(originalScope, {
	          $item: item,
	          $model: model,
	          $label: parserResult.viewMapper(originalScope, locals)
	        });

	        resetMatches();

	        //return focus to the input element if a match was selected via a mouse click event
	        // use timeout to avoid $rootScope:inprog error
	        $timeout(function() { element[0].focus(); }, 0, false);
	      };

	      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
	      element.bind('keydown', function (evt) {

	        //typeahead is open and an "interesting" key was pressed
	        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
	          return;
	        }

	        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything
	        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {
	          return;
	        }

	        evt.preventDefault();

	        if (evt.which === 40) {
	          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
	          scope.$digest();

	        } else if (evt.which === 38) {
	          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
	          scope.$digest();

	        } else if (evt.which === 13 || evt.which === 9) {
	          scope.$apply(function () {
	            scope.select(scope.activeIdx);
	          });

	        } else if (evt.which === 27) {
	          evt.stopPropagation();

	          resetMatches();
	          scope.$digest();
	        }
	      });

	      element.bind('blur', function (evt) {
	        hasFocus = false;
	      });

	      // Keep reference to click handler to unbind it.
	      var dismissClickHandler = function (evt) {
	        if (element[0] !== evt.target) {
	          resetMatches();
	          scope.$digest();
	        }
	      };

	      $document.bind('click', dismissClickHandler);

	      originalScope.$on('$destroy', function(){
	        $document.unbind('click', dismissClickHandler);
	        if (appendToBody) {
	          $popup.remove();
	        }
	      });

	      var $popup = $compile(popUpEl)(scope);
	      if (appendToBody) {
	        $document.find('body').append($popup);
	      } else {
	        element.after($popup);
	      }
	    }
	  };

	}])

	  .directive('typeaheadPopup', function () {
	    return {
	      restrict:'EA',
	      scope:{
	        matches:'=',
	        query:'=',
	        active:'=',
	        position:'=',
	        select:'&'
	      },
	      replace:true,
	      templateUrl:'template/typeahead/typeahead-popup.html',
	      link:function (scope, element, attrs) {

	        scope.templateUrl = attrs.templateUrl;

	        scope.isOpen = function () {
	          return scope.matches.length > 0;
	        };

	        scope.isActive = function (matchIdx) {
	          return scope.active == matchIdx;
	        };

	        scope.selectActive = function (matchIdx) {
	          scope.active = matchIdx;
	        };

	        scope.selectMatch = function (activeIdx) {
	          scope.select({activeIdx:activeIdx});
	        };
	      }
	    };
	  })

	  .directive('typeaheadMatch', ['$http', '$templateCache', '$compile', '$parse', function ($http, $templateCache, $compile, $parse) {
	    return {
	      restrict:'EA',
	      scope:{
	        index:'=',
	        match:'=',
	        query:'='
	      },
	      link:function (scope, element, attrs) {
	        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
	        $http.get(tplUrl, {cache: $templateCache}).success(function(tplContent){
	           element.replaceWith($compile(tplContent.trim())(scope));
	        });
	      }
	    };
	  }])

	  .filter('typeaheadHighlight', function() {

	    function escapeRegexp(queryToEscape) {
	      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	    }

	    return function(matchItem, query) {
	      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
	    };
	  });

	angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/accordion/accordion-group.html",
	    "<div class=\"panel panel-default\">\n" +
	    "  <div class=\"panel-heading\">\n" +
	    "    <h4 class=\"panel-title\">\n" +
	    "      <a href class=\"accordion-toggle\" ng-click=\"toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
	    "    </h4>\n" +
	    "  </div>\n" +
	    "  <div class=\"panel-collapse\" collapse=\"!isOpen\">\n" +
	    "	  <div class=\"panel-body\" ng-transclude></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/accordion/accordion.html",
	    "<div class=\"panel-group\" ng-transclude></div>");
	}]);

	angular.module("template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/alert/alert.html",
	    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\" role=\"alert\">\n" +
	    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close()\">\n" +
	    "        <span aria-hidden=\"true\">&times;</span>\n" +
	    "        <span class=\"sr-only\">Close</span>\n" +
	    "    </button>\n" +
	    "    <div ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/carousel/carousel.html",
	    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
	    "    <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
	    "        <li ng-repeat=\"slide in slides track by $index\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
	    "    </ol>\n" +
	    "    <div class=\"carousel-inner\" ng-transclude></div>\n" +
	    "    <a class=\"left carousel-control\" ng-click=\"prev()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-left\"></span></a>\n" +
	    "    <a class=\"right carousel-control\" ng-click=\"next()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-right\"></span></a>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/carousel/slide.html",
	    "<div ng-class=\"{\n" +
	    "    'active': leaving || (active && !entering),\n" +
	    "    'prev': (next || active) && direction=='prev',\n" +
	    "    'next': (next || active) && direction=='next',\n" +
	    "    'right': direction=='prev',\n" +
	    "    'left': direction=='next'\n" +
	    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/datepicker/datepicker.html",
	    "<div ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
	    "  <daypicker ng-switch-when=\"day\" tabindex=\"0\"></daypicker>\n" +
	    "  <monthpicker ng-switch-when=\"month\" tabindex=\"0\"></monthpicker>\n" +
	    "  <yearpicker ng-switch-when=\"year\" tabindex=\"0\"></yearpicker>\n" +
	    "</div>");
	}]);

	angular.module("template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/datepicker/day.html",
	    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{5 + showWeeks}}\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <th ng-show=\"showWeeks\" class=\"text-center\"></th>\n" +
	    "      <th ng-repeat=\"label in labels track by $index\" class=\"text-center\"><small aria-label=\"{{label.full}}\">{{label.abbr}}</small></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-show=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
	    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
	    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-muted': dt.secondary, 'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/datepicker/month.html",
	    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
	    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/datepicker/popup.html",
	    "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\">\n" +
	    "	<li ng-transclude></li>\n" +
	    "	<li ng-if=\"showButtonBar\" style=\"padding:10px 9px 2px\">\n" +
	    "		<span class=\"btn-group pull-left\">\n" +
	    "			<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"select('today')\">{{ getText('current') }}</button>\n" +
	    "			<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"select(null)\">{{ getText('clear') }}</button>\n" +
	    "		</span>\n" +
	    "		<button type=\"button\" class=\"btn btn-sm btn-success pull-right\" ng-click=\"close()\">{{ getText('close') }}</button>\n" +
	    "	</li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/datepicker/year.html",
	    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"3\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
	    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/modal/backdrop.html",
	    "<div class=\"modal-backdrop fade {{ backdropClass }}\"\n" +
	    "     ng-class=\"{in: animate}\"\n" +
	    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
	    "></div>\n" +
	    "");
	}]);

	angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/modal/window.html",
	    "<div tabindex=\"-1\" role=\"dialog\" class=\"modal fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
	    "    <div class=\"modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
	    "</div>");
	}]);

	angular.module("template/pagination/pager.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/pagination/pager.html",
	    "<ul class=\"pager\">\n" +
	    "  <li ng-class=\"{disabled: noPrevious(), previous: align}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
	    "  <li ng-class=\"{disabled: noNext(), next: align}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
	    "</ul>");
	}]);

	angular.module("template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/pagination/pagination.html",
	    "<ul class=\"pagination\">\n" +
	    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(1)\">{{getText('first')}}</a></li>\n" +
	    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
	    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active}\"><a href ng-click=\"selectPage(page.number)\">{{page.text}}</a></li>\n" +
	    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
	    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(totalPages)\">{{getText('last')}}</a></li>\n" +
	    "</ul>");
	}]);

	angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
	    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/tooltip/tooltip-popup.html",
	    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/popover/popover.html",
	    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
	    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/progressbar/bar.html",
	    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>");
	}]);

	angular.module("template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/progressbar/progress.html",
	    "<div class=\"progress\" ng-transclude></div>");
	}]);

	angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/progressbar/progressbar.html",
	    "<div class=\"progress\">\n" +
	    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
	    "</div>");
	}]);

	angular.module("template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/rating/rating.html",
	    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\">\n" +
	    "    <i ng-repeat=\"r in range track by $index\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\">\n" +
	    "        <span class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
	    "    </i>\n" +
	    "</span>");
	}]);

	angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/tabs/tab.html",
	    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
	    "  <a href ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
	    "</li>\n" +
	    "");
	}]);

	angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/tabs/tabset.html",
	    "<div>\n" +
	    "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
	    "  <div class=\"tab-content\">\n" +
	    "    <div class=\"tab-pane\" \n" +
	    "         ng-repeat=\"tab in tabs\" \n" +
	    "         ng-class=\"{active: tab.active}\"\n" +
	    "         tab-content-transclude=\"tab\">\n" +
	    "    </div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/timepicker/timepicker.html",
	    "<table>\n" +
	    "	<tbody>\n" +
	    "		<tr class=\"text-center\">\n" +
	    "			<td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "			<td>&nbsp;</td>\n" +
	    "			<td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "			<td ng-show=\"showMeridian\"></td>\n" +
	    "		</tr>\n" +
	    "		<tr>\n" +
	    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidHours}\">\n" +
	    "				<input type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-mousewheel=\"incrementHours()\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
	    "			</td>\n" +
	    "			<td>:</td>\n" +
	    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
	    "				<input type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
	    "			</td>\n" +
	    "			<td ng-show=\"showMeridian\"><button type=\"button\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\">{{meridian}}</button></td>\n" +
	    "		</tr>\n" +
	    "		<tr class=\"text-center\">\n" +
	    "			<td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "			<td>&nbsp;</td>\n" +
	    "			<td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "			<td ng-show=\"showMeridian\"></td>\n" +
	    "		</tr>\n" +
	    "	</tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/typeahead/typeahead-match.html",
	    "<a tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>");
	}]);

	angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("template/typeahead/typeahead-popup.html",
	    "<ul class=\"dropdown-menu\" ng-show=\"isOpen()\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" style=\"display: block;\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
	    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{match.id}}\">\n" +
	    "        <div typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
	    "    </li>\n" +
	    "</ul>\n" +
	    "");
	}]);


/***/ },
/* 1023 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(1024);
	__webpack_require__(1025);
	__webpack_require__(1026);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var typeahead = __webpack_require__(215).get('kibana/typeahead');

	  __webpack_require__(1024);
	  __webpack_require__(1025);
	  __webpack_require__(1026);

	  typeahead.directive('kbnTypeahead', function () {
	    var keyMap = {
	      ESC: 27,
	      UP: 38,
	      DOWN: 40,
	      TAB: 9,
	      ENTER: 13
	    };

	    return {
	      restrict: 'A',
	      scope: {
	        historyKey: '@kbnTypeahead'
	      },
	      controllerAs: 'typeahead',

	      controller: function controller($scope, $element, $timeout, PersistedLog, config) {
	        var self = this;
	        self.form = $element.closest('form');
	        self.query = '';
	        self.hidden = true;
	        self.focused = false;
	        self.mousedOver = false;

	        // instantiate history and add items to the scope
	        self.history = new PersistedLog('typeahead:' + $scope.historyKey, {
	          maxLength: config.get('history:limit'),
	          filterDuplicates: true
	        });

	        $scope.items = self.history.get();
	        $scope.filteredItems = [];

	        self.setInputModel = function (model) {
	          $scope.inputModel = model;

	          // watch for changes to the query parameter, delegate to typeaheadCtrl
	          $scope.$watch('inputModel.$viewValue', self.filterItemsByQuery);
	        };

	        self.setHidden = function (hidden) {
	          self.hidden = !!hidden;
	        };

	        self.setFocused = function (focused) {
	          self.focused = !!focused;
	        };

	        self.setMouseover = function (mousedOver) {
	          self.mousedOver = !!mousedOver;
	        };

	        // activation methods
	        self.activateItem = function (item) {
	          self.active = item;
	        };

	        self.getActiveIndex = function () {
	          if (!self.active) {
	            return;
	          }

	          return $scope.filteredItems.indexOf(self.active);
	        };

	        self.getItems = function () {
	          return $scope.filteredItems;
	        };

	        self.activateNext = function () {
	          var index = self.getActiveIndex();
	          if (index == null) {
	            index = 0;
	          } else if (index < $scope.filteredItems.length - 1) {
	            ++index;
	          }

	          self.activateItem($scope.filteredItems[index]);
	        };

	        self.activatePrev = function () {
	          var index = self.getActiveIndex();

	          if (index > 0 && index != null) {
	            --index;
	          } else if (index === 0) {
	            self.active = false;
	            return;
	          }

	          self.activateItem($scope.filteredItems[index]);
	        };

	        self.isActive = function (item) {
	          return item === self.active;
	        };

	        // selection methods
	        self.selectItem = function (item, ev) {
	          self.hidden = true;
	          self.active = false;
	          $scope.inputModel.$setViewValue(item);
	          $scope.inputModel.$render();
	          self.persistEntry();

	          if (ev && ev.type === 'click') {
	            $timeout(function () {
	              self.submitForm();
	            });
	          }
	        };

	        self.submitForm = function () {
	          if (self.form.length) {
	            self.form.submit();
	          }
	        };

	        self.persistEntry = function () {
	          if ($scope.inputModel.$viewValue.length) {
	            // push selection into the history
	            $scope.items = self.history.add($scope.inputModel.$viewValue);
	          }
	        };

	        self.selectActive = function () {
	          if (self.active) {
	            self.selectItem(self.active);
	          }
	        };

	        self.keypressHandler = function (ev) {
	          var keyCode = ev.which || ev.keyCode;

	          if (self.focused) {
	            self.hidden = false;
	          }

	          // hide on escape
	          if (_.contains([keyMap.ESC], keyCode)) {
	            self.hidden = true;
	            self.active = false;
	          }

	          // change selection with arrow up/down
	          // on down key, attempt to load all items if none are loaded
	          if (_.contains([keyMap.DOWN], keyCode) && $scope.filteredItems.length === 0) {
	            $scope.filteredItems = $scope.items;
	            $scope.$digest();
	          } else if (_.contains([keyMap.UP, keyMap.DOWN], keyCode)) {
	            if (self.isVisible() && $scope.filteredItems.length) {
	              ev.preventDefault();

	              if (keyCode === keyMap.DOWN) {
	                self.activateNext();
	              } else {
	                self.activatePrev();
	              }
	            }
	          }

	          // persist selection on enter, when not selecting from the list
	          if (_.contains([keyMap.ENTER], keyCode)) {
	            if (!self.active) {
	              self.persistEntry();
	            }
	          }

	          // select on enter or tab
	          if (_.contains([keyMap.ENTER, keyMap.TAB], keyCode)) {
	            self.selectActive();
	            self.hidden = true;
	          }
	        };

	        self.filterItemsByQuery = function (query) {
	          // cache query so we can call it again if needed
	          if (query) {
	            self.query = query;
	          }

	          // if the query is empty, clear the list items
	          if (!self.query.length) {
	            $scope.filteredItems = [];
	            return;
	          }

	          // update the filteredItems using the query
	          var beginningMatches = $scope.items.filter(function (item) {
	            return item.indexOf(query) === 0;
	          });

	          var otherMatches = $scope.items.filter(function (item) {
	            return item.indexOf(query) > 0;
	          });

	          $scope.filteredItems = beginningMatches.concat(otherMatches);
	        };

	        self.isVisible = function () {
	          return !self.hidden && $scope.filteredItems.length > 0 && (self.focused || self.mousedOver);
	        };

	        // handle updates to parent scope history
	        $scope.$watch('items', function (items) {
	          if (self.query) {
	            self.filterItemsByQuery(self.query);
	          }
	        });

	        // watch for changes to the filtered item list
	        $scope.$watch('filteredItems', function (filteredItems) {

	          // if list is empty, or active item is missing, unset active item
	          if (!filteredItems.length || !_.contains(filteredItems, self.active)) {
	            self.active = false;
	          }
	        });
	      },

	      link: function link($scope, $el, attr) {
	        // should be defined via setInput() method
	        if (!$scope.inputModel) {
	          throw new Error('kbn-typeahead-input must be defined');
	        }

	        $scope.$watch('typeahead.isVisible()', function (vis) {
	          $el.toggleClass('visible', vis);
	        });
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1024 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 1025 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(324);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var typeahead = __webpack_require__(215).get('kibana/typeahead');

	  __webpack_require__(324);

	  typeahead.directive('kbnTypeaheadInput', function ($rootScope) {

	    return {
	      restrict: 'A',
	      require: ['^ngModel', '^kbnTypeahead'],

	      link: function link($scope, $el, $attr, deps) {
	        var model = deps[0];
	        var typeaheadCtrl = deps[1];

	        typeaheadCtrl.setInputModel(model);

	        // disable browser autocomplete
	        $el.attr('autocomplete', 'off');

	        // handle keypresses
	        $el.on('keydown', function (ev) {
	          typeaheadCtrl.keypressHandler(ev);
	          digest();
	        });

	        // update focus state based on the input focus state
	        $el.on('focus', function () {
	          typeaheadCtrl.setFocused(true);
	          digest();
	        });

	        $el.on('blur', function () {
	          typeaheadCtrl.setFocused(false);
	          digest();
	        });

	        // unbind event listeners
	        $scope.$on('$destroy', function () {
	          $el.off();
	        });

	        function digest() {
	          $rootScope.$$phase || $scope.$digest();
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1026 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(215);
	__webpack_require__(1027);
	__webpack_require__(324);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var typeahead = __webpack_require__(215).get('kibana/typeahead');
	  var listTemplate = __webpack_require__(1027);

	  __webpack_require__(324);

	  typeahead.directive('kbnTypeaheadItems', function () {
	    return {
	      restrict: 'E',
	      require: '^kbnTypeahead',
	      replace: true,
	      template: listTemplate,

	      link: function link($scope, $el, attr, typeaheadCtrl) {
	        $scope.typeahead = typeaheadCtrl;
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1027 */
/***/ function(module, exports) {

	module.exports = "<div\r\n  ng-show=\"typeahead.isVisible()\"\r\n  ng-mouseenter=\"typeahead.setMouseover(true);\"\r\n  ng-mouseleave=\"typeahead.setMouseover(false);\"\r\n  class=\"typeahead-items\"\r\n  >\r\n\r\n  <div\r\n    ng-repeat=\"item in typeahead.getItems()\"\r\n    ng-class=\"{active: item === typeahead.active}\"\r\n    ng-click=\"typeahead.selectItem(item, $event);\"\r\n    ng-mouseenter=\"typeahead.activateItem(item);\"\r\n    class=\"typeahead-item\"\r\n    >\r\n    {{item}}\r\n  </div>\r\n</div>\r\n"

/***/ },
/* 1028 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(831);
	__webpack_require__(827);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);

	  __webpack_require__(831);
	  __webpack_require__(827);

	  __webpack_require__(215).get('kibana/url').service('kbnUrl', function (Private) {
	    return Private(KbnUrlProvider);
	  });

	  function KbnUrlProvider($route, $location, $rootScope, globalState, $parse, getAppState) {
	    var self = this;

	    /**
	     * Navigate to a url
	     *
	     * @param  {String} url - the new url, can be a template. See #eval
	     * @param  {Object} [paramObj] - optional set of parameters for the url template
	     * @return {undefined}
	     */
	    self.change = function (url, paramObj) {
	      self._changeLocation('url', url, paramObj);
	    };

	    /**
	     * Same as #change except only changes the url's path,
	     * leaving the search string and such intact
	     *
	     * @param  {String} path - the new path, can be a template. See #eval
	     * @param  {Object} [paramObj] - optional set of parameters for the path template
	     * @return {undefined}
	     */
	    self.changePath = function (path, paramObj) {
	      self._changeLocation('path', path, paramObj);
	    };

	    /**
	     * Same as #change except that it removes the current url from history
	     *
	     * @param  {String} url - the new url, can be a template. See #eval
	     * @param  {Object} [paramObj] - optional set of parameters for the url template
	     * @return {undefined}
	     */
	    self.redirect = function (url, paramObj) {
	      self._changeLocation('url', url, paramObj, true);
	    };

	    /**
	     * Same as #redirect except only changes the url's path,
	     * leaving the search string and such intact
	     *
	     * @param  {String} path - the new path, can be a template. See #eval
	     * @param  {Object} [paramObj] - optional set of parameters for the path template
	     * @return {undefined}
	     */
	    self.redirectPath = function (path, paramObj) {
	      self._changeLocation('path', path, paramObj, true);
	    };

	    /**
	     * Evaluate a url template. templates can contain double-curly wrapped
	     * expressions that are evaluated in the context of the paramObj
	     *
	     * @param  {String} template - the url template to evaluate
	     * @param  {Object} [paramObj] - the variables to expose to the template
	     * @return {String} - the evaluated result
	     * @throws {Error} If any of the expressions can't be parsed.
	     */
	    self.eval = function (template, paramObj) {
	      paramObj = paramObj || {};

	      return template.replace(/\{\{([^\}]+)\}\}/g, function (match, expr) {
	        // remove filters
	        var key = expr.split('|')[0].trim();

	        // verify that the expression can be evaluated
	        var p = $parse(key)(paramObj);

	        // if evaluation can't be made, throw
	        if (_.isUndefined(p)) {
	          throw new Error('Replacement failed, unresolved expression: ' + expr);
	        }

	        // append uriescape filter if not included
	        if (expr.indexOf('uriescape') === -1) {
	          expr += '|uriescape';
	        }

	        return $parse(expr)(paramObj);
	      });
	    };

	    /**
	     * convert an object's route to an href, compatible with
	     * window.location.href= and <a href="">
	     *
	     * @param  {Object} obj - any object that list's it's routes at obj.routes{}
	     * @param  {string} route - the route name
	     * @return {string} - the computed href
	     */
	    self.getRouteHref = function (obj, route) {
	      return '#' + self.getRouteUrl(obj, route);
	    };

	    /**
	     * convert an object's route to a url, compatible with url.change() or $location.url()
	     *
	     * @param  {Object} obj - any object that list's it's routes at obj.routes{}
	     * @param  {string} route - the route name
	     * @return {string} - the computed url
	     */
	    self.getRouteUrl = function (obj, route) {
	      var template = obj && obj.routes && obj.routes[route];
	      if (template) return self.eval(template, obj);
	    };

	    /**
	     * Similar to getRouteUrl, supports objects which list their routes,
	     * and redirects to the named route. See #redirect
	     *
	     * @param  {Object} obj - any object that list's it's routes at obj.routes{}
	     * @param  {string} route - the route name
	     * @return {undefined}
	     */
	    self.redirectToRoute = function (obj, route) {
	      self.redirect(self.getRouteUrl(obj, route));
	    };

	    /**
	     * Similar to getRouteUrl, supports objects which list their routes,
	     * and changes the url to the named route. See #change
	     *
	     * @param  {Object} obj - any object that list's it's routes at obj.routes{}
	     * @param  {string} route - the route name
	     * @return {undefined}
	     */
	    self.changeToRoute = function (obj, route) {
	      self.change(self.getRouteUrl(obj, route));
	    };

	    /////
	    // private api
	    /////
	    var reloading = undefined;

	    self._changeLocation = function (type, url, paramObj, replace) {
	      var prev = {
	        path: $location.path(),
	        search: $location.search()
	      };

	      url = self.eval(url, paramObj);
	      $location[type](url);
	      if (replace) $location.replace();

	      var next = {
	        path: $location.path(),
	        search: $location.search()
	      };

	      if (self._shouldAutoReload(next, prev)) {
	        var appState = getAppState();
	        if (appState) appState.destroy();

	        reloading = $rootScope.$on('$locationChangeSuccess', function () {
	          // call the "unlisten" function returned by $on
	          reloading();
	          reloading = false;

	          $route.reload();
	        });
	      }
	    };

	    self._shouldAutoReload = function (next, prev) {
	      if (reloading) return false;

	      var route = $route.current && $route.current.$$route;
	      if (!route) return false;

	      if (next.path !== prev.path) return false;

	      var reloadOnSearch = route.reloadOnSearch;
	      var searchSame = _.isEqual(next.search, prev.search);

	      return reloadOnSearch && searchSame || !reloadOnSearch;
	    };
	  }

	  return KbnUrlProvider;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1029 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(1030);
	__webpack_require__(215);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var parseInterval = __webpack_require__(1030);

	  __webpack_require__(215).get('kibana').directive('validateDateInterval', function () {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link($scope, $el, attrs, ngModelCntrl) {

	        ngModelCntrl.$parsers.push(check);
	        ngModelCntrl.$formatters.push(check);

	        function check(value) {
	          ngModelCntrl.$setValidity('dateInterval', parseInterval(value) != null);
	          return value;
	        }
	      }
	    };
	  });
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 1030 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*** auto-preload-rjscommon-deps-loader ***/
	__webpack_require__(194);
	__webpack_require__(243);
	__webpack_require__(245);

	'use strict';

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	  var _ = __webpack_require__(194);
	  var moment = __webpack_require__(243);
	  var dateMath = __webpack_require__(245);

	  // Assume interval is in the form (value)(unit), such as "1h"
	  var INTERVAL_STRING_RE = new RegExp('^([0-9\\.]*)\\s*(' + dateMath.units.join('|') + ')$');

	  return function parseInterval(interval) {
	    var matches = String(interval).trim().match(INTERVAL_STRING_RE);

	    if (!matches) return null;

	    try {
	      var _ret = (function () {
	        var value = parseFloat(matches[1]) || 1;
	        var unit = matches[2];

	        var duration = moment.duration(value, unit);

	        // There is an error with moment, where if you have a fractional interval between 0 and 1, then when you add that
	        // interval to an existing moment object, it will remain unchanged, which causes problems in the ordered_x_keys
	        // code. To counteract this, we find the first unit that doesn't result in a value between 0 and 1.
	        // For example, if you have '0.5d', then when calculating the x-axis series, we take the start date and begin
	        // adding 0.5 days until we hit the end date. However, since there is a bug in moment, when you add 0.5 days to
	        // the start date, you get the same exact date (instead of being ahead by 12 hours). So instead of returning
	        // a duration corresponding to 0.5 hours, we return a duration corresponding to 12 hours.
	        var selectedUnit = _.find(dateMath.units, function (unit) {
	          return Math.abs(duration.as(unit)) >= 1;
	        });

	        return {
	          v: moment.duration(duration.as(selectedUnit), selectedUnit)
	        };
	      })();

	      if (typeof _ret === 'object') return _ret.v;
	    } catch (e) {
	      return null;
	    }
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }
]);